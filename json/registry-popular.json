[{"organization":"ballerinax", "name":"twilio", "version":"0.99.8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/twilio/0.99.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/twilio/0.99.8/ballerinax-twilio-java11-0.99.8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Twilio Connector\n\n[![Build Status](https:\/\/travis-ci.org\/ballerina-platform\/module-ballerinax-twilio.svg?branch=master)](https:\/\/travis-ci.org\/ballerina-platform\/module-ballerinax-twilio)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\nConnects the twilio communication services\n\n# Introduction\n\nTwilio’s APIs power its platform for communications. Behind these APIs is a software layer connecting and optimizing communications networks around the world to allow your users to call and message anyone, globally. Twilio has a whole host of APIs, from SMS to Voice to Wireless! You can find Twilio's API reference documentation throughout twilio product documentation. For more information, Please browse the various [Twilio APIs here](https:\/\/www.twilio.com\/docs\/api).\nAs twilio supports for [HTTP Basic authentication](https:\/\/en.wikipedia.org\/wiki\/Basic_access_authentication). It needs the URL authentication for each request using the credentials provided by the twilio. You can find both your account SID and auth token in the Twilio Console after signing up for [a free Twilio trial account](http:\/\/twilio.com\/try-twilio?_ga=2.127476109.1229618101.1613523745-690133185.1613523745). \nTwilio uses webhooks to asynchronously let your application know when events happen, like getting an incoming call or receiving an SMS message.\n\n# Connector Overview\n\nThe Twilio connector allows you to send SMS, voice and WhatsApp messages through the Twilio REST API and also connector provides the facility to receive inbound HTTP(S) requests (also known as webhooks) from Twilio's servers.\nThe Twilio connector consists with two modules\n\n*Twilio Client module  - The default module has the twilio client that is used to communicate through the SMS, VoiceCalls and Whatsapp messages.\n\n*Webhook Listener module  - The module that provides the listener supports for the twilio events such as SentSMSEvent, VoiceCallRinging etc.\n\n# Prerequisites\n\n* [Twilio Account](https:\/\/www.twilio.com\/) to obtain Account SID, Auth Token and Twilio phone number\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Ballerina SLAlpha2 Installed\nBallerina Swan Lake Alpha 4 is required. \n\n* (optional)[ngork](https:\/\/ngrok.com\/) is requried to test listner samples using localhost\n\n# Supported Versions & Limitations\n\n## Supported Versions\n\n|                           |    Version         |\n|:-------------------------:|:------------------:|\n| Ballerina Language        | Swan Lake Alpha 5  |\n| Twilio Basic API          | 2010-04-01         |\n| Java Development Kit (JDK)| 11                 |\n\n## Limitations\n* The connector doesn't support to Authy based operation at the moment.\n* The connector only supports limited number of operations of the twilio APIs.\n\n# Quickstart(s)\n\n## Module - `ballerinax\/twilio`\n\n### Feature Overview\n\n1. Send SMS, WhatsApp messages\n2. Make voice calls\n\n### Getting started\n\n1.  Have a [Quick Tour](https:\/\/ballerina.io\/learn\/getting-started\/quick-tour\/) section to download and install Ballerina.  \n\n2.  To use Twilio endpoint, you need to provide the following:\n\n       - Account SId\n       - Auth Token\n\n![image](samples\/docs\/dashboardTokens.png)\n\n3. Import the Twilio module to your Ballerina program as follows. You can use [configurable variables](https:\/\/ballerina.io\/learn\/by-example\/configurable.html) to provide the necessary credentials.\n\n\t```ballerina\n\timport ballerina\/log;\n    import ballerinax\/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        \/\/Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        \/\/Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        \/\/Get account detail remote function is called by the twilio client\n        var details = twilioClient->getAccountDetails();\n\n        \/\/Response is printed as log messages\n        if (details is twilio:Account) {\n            log:printInfo(\"Account Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n\t```\n\n## Module - `ballerinax\/twilio.webhook`\n\n### Feature Overview\n\nThe Twilio Listener connector allows you to listen to Twilio SMS and Call status change events.\n1. Listen to incoming message events and message status change callback events from the twilio SMS\n2. Listen to incoming call events and call status change callback events from the twilio Voice Call\n\n### Note:\n\nCallback URL registration method depends on the event type.\n1. Twilio SMS\n - Incoming Messages\n    - Callback webhook URL has to be registered in the console under the particular Twilio number.\n - Status change events\n    - Callback webhook URL has to be registered at the time of sending the SMS (from the client connector)\n2. Twilio Call\n - Incoming Call\n    - Callback webhook URL has to be registered in the console under the particular Twilio number.\n - Status change events\n    - Callback webhook URL has to be registered at the time of making the call (from the client connector)\n\n### Getting started\n\n1.  Have a [Quick Tour](https:\/\/ballerina.io\/learn\/getting-started\/quick-tour\/) section to download and install Ballerina.\n\n2. Import the Twilio Webhook module to your Ballerina program as follows.\n\n\t```ballerina\n\timport ballerina\/log;\n    import ballerinax\/twilio;\n    import ballerinax\/twilio.webhook as webhook;\n    import ballerina\/http;\n\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string twimlURL = ?;\n    configurable string statusCallbackUrl = ?;\n\n    \/\/Starting a service with using twilio listner by providing port,authToken, status call back url.\n    listener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\n    service \/ on twilioListener {\n        resource function post twilio(http:Caller caller, http:Request request) returns error? {\n            var payload = check twilioListener.getEventType(caller, request);\n            if (payload is webhook:CallStatusChangeEvent) {\n                if (payload.CallStatus == webhook:RINGING) {\n                    log:printInfo(\"The call is in rining status\");\n                } \n            } \n        }\n    }\n\t```\n# Samples\n## Twilio Client Operations\n\n### Get Account details\nThis shows you how to obtain the account details of your twilio account.\nSample is available at: \n```ballerina\n    import ballerina\/log;\n    import ballerinax\/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        \/\/Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        \/\/Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        \/\/Get account detail remote function is called by the twilio client\n        var details = twilioClient->getAccountDetails();\n\n        \/\/Response is printed as log messages\n        if (details is twilio:Account) {\n            log:printInfo(\"Account Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n\n### Send an SMS\nThis section shows how to use the connector to send an SMS. You will need a verfied phone number if you are using a trial account to send the message from your twilio phone number. if the SMS is sent successfully it will provides SMSResponse record with details of the SMS otherwise it will provide the error occured.\n\nSample is available at: \n```ballerina\nimport ballerina\/log;\nimport ballerinax\/twilio;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string message = \"Wso2-Test-SMS-Message\";\n\n\npublic function main() {\n    \/\/Twilio Client configuration\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n\n    \/\/Twilio Client\n    twilio:Client twilioClient = new (twilioConfig);\n\n    \/\/Send SMS remote function is called by the twilio client\n    var details = twilioClient->sendSms(fromMobile, toMobile, message);\n\n    \/\/Response is printed as log messages\n    if (details is twilio:SmsResponse) {\n        log:printInfo(\"SMS_SID: \" + details.sid.toString() + \", Body: \" + details.body.toString());\n    } else {\n        log:printInfo(details.message());\n    }\n}\n```\n### Send a whatappMessage\nAs the following example, the connector supports to send whatapp messages and if the message is successfully sent , you will get WhatsAppResponse record otherwsie an error message.\nSample is available at:\n```ballerina\n    import ballerina\/log;\n    import ballerinax\/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n\n    public function main() {\n        \/\/Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        \/\/Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        \/\/Send whatsapp remote function is called by the twilio client\n        var details = twilioClient->sendWhatsAppMessage(fromNo = fromMobile, toNo = toMobile, message = \"Test Whatsapp\");\n\n        \/\/Response is printed as log messages\n        if (details is twilio:WhatsAppResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n### Make a voice call\nYou can make voice call with twilio voice enabled phone number. The following should be provided in addition to the account access credentials.\n    \"fromNo\" - the voice-enabled Twilio phone number you added to your account earlier\n    \"toNo\" - the person you'd like to call\n    \"twiml\" - Instructions in the form [TwiML](https:\/\/www.twilio.com\/docs\/voice\/twiml) that explains what should happen when the other party picks up the phone\n    \"statusCallback\" - Optionally, instead of passing the Twiml parameter, you can provide a Url that returns TwiML Voice instructions.\nSample is available at:\n```ballerina\n    import ballerina\/log;\n    import ballerinax\/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n    configurable string twimlURL = ?;\n\n    public function main() {\n        \/\/Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        \/\/Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        \/\/Make voice Call remote function is called by the twilio client\n        var details = twilioClient->makeVoiceCall(fromMobile, toMobile, twimlURL);\n\n        \/\/Response is printed as log messages\n        if (details is twilio:VoiceCallResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n\n### Get a message\nThis section shows you how to get a message details  from your account. you need to provide message sid to retreive the details from the message list of your account. If the request is successful, it will send the MessageResourceResponse record else an error message with the details.\nSample is available at:\n```ballerina\n    import ballerina\/log;\n    import ballerinax\/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        \/\/Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        \/\/Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n        \n        \/\/Set Message resource SID to get the message detial\n        string messageSid = \"<Add Mesaage SID>\";\n\n        \/\/Get SMS remote function is called by the twilio client\n        var details = twilioClient->getMessage(messageSid);\n\n        \/\/Response is printed as log messages\n        if (details is twilio:MessageResourceResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n## Twilio Listener Operations\n\n### QUEUED\/SENT SMS Event\nThis examples shows how you can start a ballerina twilio listener using localhost. you will need to use ngork to expose a web server running on your local machine to the internet. Find more sample from here.\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/twilio;\nimport ballerinax\/twilio.webhook as webhook;\nimport ballerina\/http;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string message = \"Wso2-Test-SMS-Message\";\n\n\/\/ngork is used to get the callback url eg: http:\/\/6d602a963438.ngrok.io\/twilio\nconfigurable string statusCallbackUrl = ?;\n\n\/\/Starting a service with twilio listner by providing port,authToken, status call back url.\nlistener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\nservice \/ on twilioListener {\n    resource function post twilio(http:Caller caller, http:Request request) returns error? {\n        var payload = check twilioListener.getEventType(caller, request);\n\n        \/\/Check for the event and get the status of the event.\n        if (payload is webhook:SmsStatusChangeEvent) {\n            if (payload.SmsStatus == webhook:QUEUED) {\n                log:printInfo(\"The SMS has been queued to be sent\");\n            } \n        } \n    }\n}\n\npublic function main() {\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n    twilio:Client twilioClient = new (twilioConfig);\n    var details = twilioClient->sendSms(fromMobile, toMobile, message, statusCallbackUrl);\n    if (details is error) {\n        log:printInfo(details.message());\n    }\n\n}\n```\n### Ringing\/InProgress\/Completed Voice Call Events\nThis provides the listener support to the voice calls. you will need to use ngork to expose a web server running on your local machine to the internet. Find more sample from here.\n```ballerina\n\nimport ballerina\/log;\nimport ballerinax\/twilio;\nimport ballerinax\/twilio.webhook as webhook;\nimport ballerina\/http;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string twimlURL = ?;\n\n\/\/ngork is used to get the callback url eg: http:\/\/6d602a963438.ngrok.io\/twilio\nconfigurable string statusCallbackUrl = ?;\n\n\/\/Starting a service with using twilio listner by providing port,authToken, status call back url.\nlistener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\nservice \/ on twilioListener {\n    resource function post twilio(http:Caller caller, http:Request request) returns error? {\n        var payload = check twilioListener.getEventType(caller, request);\n        if (payload is webhook:CallStatusChangeEvent) {\n            if (payload.CallStatus == webhook:COMPLETED) {\n                log:printInfo(\"The call has been answered\");\n            } \n        } \n    }\n}\n\npublic function main() {\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n    twilio:Client twilioClient = new (twilioConfig);\n    \n    \/\/Setting webhook callback details\n    twilio:StatusCallback webhookCallbackInfo = {\n        url: statusCallbackUrl,\n        method: webhook:POST,\n        events: [webhook:COMPLETED]\n    };\n    var details = twilioClient->makeVoiceCall(fromMobile, toMobile, twimlURL, webhookCallbackInfo);\n    if (details is error) {\n        log:printInfo(details.message());\n    }\n\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-twilio", "keywords":["twilio", "sms", "call", "otp", "whatsapp", "webhook"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620236103000, "modules":[{"name":"twilio", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/twilio/0.99.8", "packageUrl":"/ballerinax/twilio/0.99.8"}], "pullCount":421}, {"organization":"ballerinax", "name":"choreo", "version":"0.2.6", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/choreo/0.2.6", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/choreo/0.2.6/ballerinax-choreo-java11-0.2.6.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"## Package Overview\n\nThe Choreo Observability Extension is one of the observability extensions of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\/\"> Ballerina<\/a> language.\n\nIt provides an implementation for publishing traces & metrics to Choreo.\n\n## Enabling Choreo Extension\n\nTo package the Choreo extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax\/choreo as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and connect to Choreo, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nenabled=true\nprovider=\"choreo\"\n```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1622196778000, "modules":[{"name":"choreo", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/choreo/0.2.6", "packageUrl":"/ballerinax/choreo/0.2.6"}], "pullCount":421}, {"organization":"ballerinax", "name":"googleapis.calendar", "version":"0.1.5", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/googleapis.calendar/0.1.5", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.calendar/0.1.5/ballerinax-googleapis.calendar-java11-0.1.5.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"[![Build](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.calendar\/workflows\/CI\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.calendar\/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https:\/\/img.shields.io\/github\/last-commit\/ballerina-platform\/module-ballerinax-googleapis.calendar.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.calendar\/commits\/master)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\n# Ballerina Google Calendar Connector \nConnects to Google Calendar using Ballerina.\n\n# Introduction\n## Google Calendar\n[Google Calendar](https:\/\/developers.google.com\/calendar) is a time-management and scheduling calendar service developed by Google. It lets users to organize their schedule and share events with others. The Google Calendar endpoint allows you to access the Google Calendar API Version v3 through Ballerina.\n\n## Key Features of Google Calendar\n* Manage Events\n* Manage Calendar\n* Listen event changes - [Push Notification](https:\/\/developers.google.com\/calendar\/v3\/push)\n\n## Connector Overview\n\nThe Google Calendar Ballerina Connector allows you to access the Google Calendar API Version V3 through Ballerina. The connector can be used to implement some of the most common use cases of Google Calendar. The connector provides the capability to programmatically manage events and calendar, CRUD operations on event and calendar operations through the connector endpoints and listener for the events created in the calendar.\n\n# Prerequisites\n\n* Java 11 Installed\n  Java Development Kit (JDK) with version 11 is required.\n\n* Download the required Ballerina [distribution](https:\/\/ballerinalang.org\/downloads\/) version\n\n## Compatibility\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha5            |\n| Google Calendar API         |             V3                  |\n| Java Development Kit (JDK)  |             11                  |\n\n### Obtaining Tokens\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the \naccess token and refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. [Enable Calendar API in your app's Cloud Platform project.](https:\/\/developers.google.com\/workspace\/guides\/create-project#enable-api)\n7. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground).\n8. Click the gear icon in the upper right corner and check the box labeled **Use your own OAuth credentials** (if it isn't already checked) and enter the OAuth2 client ID and OAuth2 client secret you obtained above.\n9. Select required Google Calendar scopes, and then click **Authorize APIs**.\n10. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token and access token. \n\n### Add configurations file\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Calendar uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Calendar connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Calendar connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <refreshUrl>\n        }\n    }\n    ```\n* Callback address is additionally required in order to use Google Calendar listener. It is the path of the listener resource function. The time-to-live in seconds for the notification channel is provided in optional parameter expiration time. By default it is 604800 seconds.\n  * Callback address\n  * Expiration time\n\n* Add the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n  ```\n  clientId = \"<client_id\">\n  clientSecret = \"<client_secret>\"\n  refreshToken = \"<refresh_token>\"\n  refreshUrl = \"<refresh_URL>\"\n  address = \"<address>\"\n  ```\n\n\n# Quickstart(s)\n\n## Create an quick add event\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax\/googleapis.calendar` module into the Ballerina project.\n```ballerina\nimport ballerinax\/googleapis.calendar;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,\n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\nNote: Must specify the **Refresh token**, obtained with exchanging the authorization code, the **Client ID** and the \n**Client Secret** obtained in the App creation, when configuring the Calendar connector client.\n\n\n### Step 3: Set up all the data required to create the quick event\nThe `quickAddEvent` remote function creates an event. The `calendarId` represents the calendar where the event has to be created and `title` refers the name of the event.\n\n```ballerina\nstring calendarId = \"primary\";\nstring title = \"Sample Event\";\n```\n\n### Step 4: Create the quick add event\nThe response from `quickAddEvent` is either an Event record or an `error` (if creating the event was unsuccessful).\n\n```ballerina\n\/\/Create new quick add event.\ncalendar:Event|error response = calendarClient->quickAddEvent(calendarId, title);\n\nif (response is calendar:Event) {\n    \/\/ If successful, log event id\n    log:printInfo(response.id);\n} else {\n    \/\/ If unsuccessful\n    log:printError(\"Error: \" + response.toString());\n}\n```\n\n## Create an listener for new event creation\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax\/googleapis.calendar`, `import ballerinax\/googleapis.calendar.'listener as listen` and `import ballerina\/http` modules into the Ballerina project.\n\n```ballerina\nimport ballerinax\/googleapis.calendar;\nimport ballerinax\/googleapis.calendar.'listener as listen;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\n\n### Step 3: Initialize the Calendar Listener\nDefine all the data required to create\n\n```ballerina\nint port = 4567;\nstring calendarId = \"primary\";\nstring address = \"callback_url;\n\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address);\n```\n\n### Step 4: Create the listener service\nIf there is an event created in calendar, log will print the event title\n\n```ballerina\nservice \/calendar on googleListener {\n    remote function onNewEvent(calendar:Event event) returns error? {\n        log:printInfo(\"Created new event : \", event);\n    }\n}\n```\n\n# **Samples**\n\nSamples are available at : https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.calendar\/tree\/main\/samples\nTo run a sample, create a new TOML file with name `Config.toml` in the same directory as the `.bal` file with above-mentioned configurable values. Configurable value port is additionally required in order to use listener.\n\n```\nport = \"<port>\"\n```\nRun this command inside sample directory:\n    ```shell\n    $ bal run \"<ballerina_file>\"\n    ```\n\n\n- #### [Get all calendars](samples\/get_calendars.bal)\n\n    This sample shows how to get all calendars that are available in an authorized user's account. This operation returns stream `Calendar` if successful. Else returns `error`.\n\n- #### [Create a new calendar](samples\/create_calendar.bal)\n\n    This sample shows how to create a new calendar in an authorized user's account. The name of the new calendar is required to do this. This operation will return a `CalenderResource` if successful. Else return an `error`.\n\n- #### [Delete a calendar](samples\/delete_calendar.bal)\n\n    This sample shows how to delete a calendar in an authorized user's account. The calendar id is required to do this operation. This operation returns an error `true` if unsuccessful.\n\n- #### [Create a new event](samples\/create_event.bal)\n\n    This sample shows how to create an event in an authorized user's calendar. The calendar id and input event are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Create a quick add event](samples\/quick_add_event.bal)\n\n    This sample shows how to create a quick add event in an authorized user's calendar. It creates an event based on a simple text string. The calendar id and event title are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Get an event](samples\/get_event.bal)\n\n    This sample shows how to get an event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Get all events](samples\/get_events.bal)\n\n    This sample shows how to get all events that are available in an authorized user's calendar. The calendar id is required to do this operation. This operation returns stream `Event` if successful. Else returns `error`.\n\n- #### [Update an existing event](samples\/update_event.bal)\n\n    This sample shows how to update an existing event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Delete an event](samples\/delete_event.bal)\n\n    This sample shows how to delete an event in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an error `true` if unsuccessful.\n\n- #### [Watch event changes](samples\/watch_event.bal)\n\n    This sample shows how to watch for changes to events in an authorized user's calendar. It is a subscription to receive push notification from Google on events changes.  The calendar id and callback url are required to do this operation. Channel live time can be provided via an optional parameter. By default it is 604800 seconds. This operation returns  `WatchResponse` if successful. Else returns `error`.\n\n- #### [Stop a channel subscription](samples\/stop_channel.bal)\n\n    This sample shows how to stop an existing subscription. The channel id and resource is are required to do this operation. This operation returns an error `true` if unsuccessful.\n\n## Listener\n\n- #### [Trigger for new event](samples\/trigger_create_event.bal)\n\n    This sample shows how to create a trigger on new event. When a new event is occurred, that event details can be captured in this listener.\n\n- #### [Trigger for updated event](samples\/trigger_update_event.bal)\n\n    This sample shows how to create a trigger on an event update. When a new event is updated, that event details can be captured in this listener.\n\n- #### [Trigger for deleted event](samples\/trigger_delete_event.bal)\n\n    This sample shows how to create a trigger on cancelled event. When a new event is cancelled, that event details can be captured in this listener.", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar", "keywords":["google", "calendar"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620278600000, "modules":[{"name":"googleapis.calendar", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/googleapis.calendar/0.1.5", "packageUrl":"/ballerinax/googleapis.calendar/0.1.5"}], "pullCount":370}, {"organization":"ballerinax", "name":"github", "version":"0.99.14", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/github/0.99.14", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/github/0.99.14/ballerinax-github-java11-0.99.14.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina GitHub Endpoint\n\n[![Build Status](https:\/\/travis-ci.org\/ballerina-platform\/module-ballerinax-github.svg?branch=master)](https:\/\/travis-ci.org\/ballerina-platform\/module-ballerinax-github)\n\nConnects to GitHub using Ballerina.\n\n# Introduction\n\n## What is GitHub?\n\n[GitHub](https:\/\/github.com\/) brings together the world's largest community of developers to discover, share, and build better software. From open source projects to private team repositories, GitHub is an all-in-one platform for collaborative development.\n\n## Key Features of GitHub\n\n- Collaboration\n- Integrated issue and bug tracking\n- Code review\n- Project management\n- Team management\n- Documentation\n- Track and assign tasks\n- Propose changes\n\n![Ballerina GitHub Endpoint Overview](..\/docs\/resources\/BallerinaGitHubEndpoint_Overview.jpg)\n\n## Connector Overview\n\nGithub Ballerina Connector is used to connect with the GitHub to perform operations exposed by GitHub GraphQL. Also, it provides easy integration with GitHub webhooks\n\nThe connector provides auto completion and type conversions. The following\nsections explains how to use Ballerina GitHub connector. You can refer the [GitHub GraphQL API v4.0](https:\/\/developer.github.com\/v4\/) and [GitHub Webhooks](https:\/\/developer.github.com\/webhooks\/) to learn more about the APIs.\n\n# Prerequisites\n\n* GitHub Account\n\n* Ballerina Swan Lake Alpha5 Installed\n\n* [Personal Access Token](https:\/\/docs.github.com\/en\/github\/authenticating-to-github\/creating-a-personal-access-token) or [GitHub OAuth App token](https:\/\/docs.github.com\/en\/developers\/apps\/creating-an-oauth-app).\n\n# Supported Versions & Limitations\n\n## Supported Versions\n\n|                                   | Version               |\n|:---------------------------------:|:---------------------:|\n| GitHub GraphQL API                | v4                    |\n| Ballerina Language                | Swan Lake Alpha 5     |\n| Java Development Kit (JDK)        | 11                    |\n\n# Quickstart(s)\n\n## Client Side Operation Example: Get Issue List.\n\nIn an occasion when we need to obtain the list of issues associated with a repository, we can use the `getIssues`\n\n### Step 1: Import the GitHub ballerina library.\nFirst, import the `ballerinax\/github` module into a ballerina project.\n```ballerina\n    import ballerinax\/github;\n```\n\n### Step 2: Initialize the GitHub client.\nYou can now make the connection configuration using the personal access token, or the obtained oAuth app token.\n\n```ballerina\n    configurable string accessToken = ?;\n\n    github:Configuration config = {\n        token: accessToken\n    };\n\n    github:Client githubClient = new (config);\n\n```\n\n### Step 3: Initialize the required parameters\nInitialize variables with suitable values which needs to be passed as arguments to the client remote function.\n\n```ballerina\n    int recordCount = 10; \/\/ number of issues per page.\n    string repositoryOwner = \"\";\n    string repositoryName = \"\";\n```\n\n### Step 4: Invoke the client remote function and obtain the results.\n\n```ballerina\n    var issueList = githubClient->getRepositoryIssueList(repositoryOwner, repositoryName, [github:ISSUE_OPEN], recordCount);\n    if (issueList is github:IssueList) {\n        log:printInfo(string `Issue List: ${issueList.nodes.length()} Issues found`);\n    } else {\n        log:printError(\"Error: \"+ issueList.toString());\n    }\n```\n\n\n## Listener Side Operation Example: On one or more commits are pushed to a repository branch or tag.\n\n### Step 1: Import the GitHub Webhook ballerina library.\nFirst, import the `ballerinax\/github.webhook` module and `ballerina\/websub` module into a ballerina project.\n```ballerina\n    import ballerina\/websub;\n    import ballerinax\/github.webhook as github;\n```\n\n### Step 2: Initialize the GitHub Webhook Listener.\nInitialize the Webhook Listener by providing the port number.\n\n```ballerina\n    listener github:Listener webhookListener = new (9090);\n```\n\n### Step 3: Annotate the service with websub:SubscriberServiceConfig.\nAnnotate the service with `websub:SubscriberServiceConfig` providing necessary properties.\n\n```ballerina\n@websub:SubscriberServiceConfig {\n    target: [github:HUB, githubTopic],\n    secret: githubSecret,\n    callback: githubCallback,\n    httpConfig: {\n        auth: {\n            token: accessToken\n        }\n    }\n}\nservice \/subscriber on webhookListener {\n   \n}\n```\n\n### Step 4: Provide remote functions corresponding to the events which you are interested on.\n\n```ballerina\n    remote function onPush(github:PushEvent event) returns github:Acknowledgement? {\n        log:printInfo(\"Received push-event-message \", eventPayload = event);\n    }\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-github", "keywords":["github", "endpoint", "API"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620298145000, "modules":[{"name":"github", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/github/0.99.14", "packageUrl":"/ballerinax/github/0.99.14"}], "pullCount":352}, {"organization":"ballerinax", "name":"googleapis.sheets", "version":"0.99.8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/googleapis.sheets/0.99.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.sheets/0.99.8/ballerinax-googleapis.sheets-java11-0.99.8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Google Sheets using Ballerina.", "readme":"# Ballerina Google Sheets Module\n\nConnects to Google Sheets using Ballerina.\n\n# Module Overview\n\nThe Google Spreadsheet Ballerina Connector allows you to access the [Google Spreadsheet API Version v4](https:\/\/developers.google.com\/sheets\/api) through Ballerina. The connector can be used to implement some of the most common use cases of Google Spreadsheets. The connector provides the capability to programmatically manage spreadsheets, manage worksheets, do CRUD operations on worksheets, and do column wise, row wise and cell wise operations through the connector endpoints.\n\nThe Google Spreadsheet Ballerina Connector supports spreadsheet management operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet. It also supports worksheet management operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet. The connector also provides capabilities to handle data level operations like setting, getting and clearing a range of data, inserting columns\/rows before and after a given position, creating or updating, getting and deleting columns\/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Compatibility\n\n|                                   | Version               |\n|:---------------------------------:|:---------------------:|\n| Google Sheets API Version         | V4                    |\n| Ballerina Language                | Swan Lake Alpha 5     |\n| Java Development Kit (JDK)        | 11                    |\n\n# Supported Operations\n\n## Spreadsheet Management Operations\nThe `ballerinax\/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nspreadsheet management operations. It includes operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet.\n\n## Worksheet Management Operations\nThe `ballerinax\/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet management operations. It includes operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet.\n\n\n## Worksheet Service Operations\nThe `ballerinax\/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet data level operations. It includes operations like setting, getting and clearing a range of data, inserting columns\/rows before and after a given position, creating or updating, getting and deleting columns\/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Prerequisites:\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https:\/\/ballerinalang.org\/downloads\/)\nBallerina Swan Lake Alpha 5 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Spreadsheet uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Spreadsheet connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Spreadsheet connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <sheets:REFRESH_URL>\n        }\n    }\n    ```\n\n## Obtaining Tokens\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground), select the required Google Spreadsheet scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the access token and refresh token.\n\n## Add project configurations file\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the token obtained in the previous step to the `Config.toml` file.\n\n```\n[ballerinax.googleapis.sheets]\nrefreshToken = \"enter your refresh token here\"\nclientId = \"enter your client id here\"\nclientSecret = \"enter your client secret here\"\ntrustStorePath = \"enter a truststore path if required\"\ntrustStorePassword = \"enter a truststore password if required\"\n\n```\n\n# Quickstart(s):\n\n## Working with GSheets Endpoint Actions\n\n### Step 1: Import the Google Sheets Ballerina Library\nFirst, import the ballerinax\/googleapis.sheets module into the Ballerina project.\n```ballerina\n    import ballerinax\/googleapis.sheets as sheets;\n```\nAll the actions return valid response or error. If the action is a success, then the requested resource will be returned. Else error will be returned.\n\n### Step 2: Initialize the Google Sheets Client\nIn order for you to use the GSheets Endpoint, first you need to create a GSheets Client endpoint.\n```ballerina\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n```\nThen the endpoint actions can be invoked as `var response = spreadsheetClient->actionName(arguments)`.\n\n### Step 3: Initialize the Google Sheets Client with default truststore\n```ballerina\nimport ballerina\/io;\nimport ballerinax\/googleapis.sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n### Step 4: Initialize the Google Sheets Client with custom truststore\n```ballerina\nimport ballerina\/io;\nimport ballerinax\/googleapis.sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    },\n    secureSocketConfig: {\n        trustStore: {\n            path: \"<fullQualifiedPathToTrustStore>\",\n            password: \"<truststorePassword>\"\n        }\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n# Samples\n\n### Create Spreadsheet with given name\nWe must specify the spreadsheet name as a string parameter to the createSpreadsheet remote operation. This is the basic scenario of creating a new spreadsheet with the name “NewSpreadsheet”. It returns a Spreadsheet record type with all the information related to the spreadsheet created on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    string spreadsheetId = \"\";\n    string sheetName = \"\";\n    \n    \/\/ Create Spreadsheet with given name\n    sheets:Spreadsheet|error response = spreadsheetClient->createSpreadsheet(\"NewSpreadsheet\");\n    if (response is sheets:Spreadsheet) {\n        log:printInfo(\"Spreadsheet Details: \" + response.toString());\n        spreadsheetId = response.spreadsheetId;\n    } else {\n        log:printError(\"Error: \" + response.toString());\n    }\n```\n\n### Add a New Worksheet with given name\nWe must specify the spreadsheet ID and the name for the new worksheet as string parameters to the addSheet remote operation. Spreadsheet ID is available in the spreadsheet URL \"https:\/\/docs.google.com\/spreadsheets\/d\/\" + <spreadsheetId> + \"\/edit#gid=\" + <sheetId>. This is the basic scenario of adding a new worksheet  with the name “NewWorksheet” by the spreadsheet ID which is obtained when creating a new spreadsheet. It returns a Sheet record type with all the information related to the worksheet added on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    \/\/ Add a New Worksheet with given name to the Spreadsheet with the given Spreadsheet ID\n    sheets:Sheet|error sheet = spreadsheetClient->addSheet(spreadsheetId, \"NewWorksheet\");\n    if (sheet is sheets:Sheet) {\n        log:printInfo(\"Sheet Details: \" + sheet.toString());\n        sheetName = sheet.properties.title;\n    } else {\n        log:printError(\"Error: \" + sheet.toString());\n    }\n```\nMore Samples are available at \"https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.sheets\/tree\/master\/samples\".", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-googlespreadsheet", "keywords":["sheets", "google", "spreadsheet"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620153574000, "modules":[{"name":"googleapis.sheets", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/googleapis.sheets/0.99.8", "packageUrl":"/ballerinax/googleapis.sheets/0.99.8"}], "pullCount":327}, {"organization":"ballerinax", "name":"googleapis.gmail", "version":"0.99.7", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/googleapis.gmail/0.99.7", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.gmail/0.99.7/ballerinax-googleapis.gmail-java11-0.99.7.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Gmail from Ballerina.", "readme":"Connects to Gmail from Ballerina.\n\n## Module Overview\n\nBallerina Gmail Connector provides the capability to send, read and delete emails through the Gmail REST API. It also provides the ability to read, trash, untrash and delete threads, ability to get the Gmail profile and mailbox history, etc. The connector handles OAuth 2.0 authentication.\n\n## Configurations\n\nInstantiate the connector by giving authentication details in the Gmail client config, which has built-in support for OAuth 2.0. Gmail uses OAuth 2.0 to authenticate and authorize requests. The Gmail connector can be minimally instantiated in the Gmail client config using the Access Token or by using the Client ID, Client Secret and Refresh Token.\n\n**Obtaining Tokens to Run the Sample**\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth Consent Screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create Credentials** and select **OAuth Client ID**.\n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use\n[OAuth 2.0 Playground](https:\/\/developers.google.com\/oauthplayground) to receive the Authorization Code and obtain the\nAccess Token and Refresh Token).\n5. Click **Create**. Your Client ID and Client Secret will appear.\n6. In a separate browser window or tab, visit [OAuth 2.0 Playground](https:\/\/developers.google.com\/oauthplayground). Click on the `OAuth 2.0 Configuration`\n icon in the top right corner and click on `Use your own OAuth credentials` and provide your `OAuth Client ID` and `OAuth Client Secret`.\n7. Select the required Gmail API scopes from the list of API's, and then click **Authorize APIs**.\n8. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token and access token.\n\nYou can now enter the credentials in the Gmail client config.\n\n```ballerina\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: <REFRESH_TOKEN>,\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n    }\n};\n\ngmail:Client gmailClient = new (gmailConfig);\n```\n\n## Compatibility\n\n| Ballerina Language Versions  | Gmail API Version |\n|:----------------------------:|:-----------------:|\n|  Swan Lake Alpha 5           |   v1              |\n\n## Example Code\nThis code sample represents sending a new text message from one Gmail user to another one. Here, the receiver which needs to receive carbon copy is also mentioned.\n```ballerina\nimport ballerina\/io;\nimport ballerinax\/googleapis.gmail as gmail;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: <REFRESH_TOKEN>,\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n    }\n};\n\ngmail:Client gmailClient = new (gmailConfig);\n\npublic function main(string... args) {\n    \n    gmail:MessageRequest messageRequest = {};\n    messageRequest.recipient = \"aa@gmail.com\";\n    messageRequest.sender = \"bb@gmail.com\";\n    messageRequest.cc = \"cc@gmail.com\";\n    messageRequest.subject = \"Email-Subject\";\n    messageRequest.messageBody = \"Email Message Body Text\";\n\n    \/\/ Set the content type of the mail as TEXT_PLAIN or TEXT_HTML.\n    messageRequest.contentType = gmail:TEXT_PLAIN;\n    string userId = \"me\";\n\n    \/\/ Send the message.\n    var sendMessageResponse = gmailClient->sendMessage(userId, messageRequest);\n    if (sendMessageResponse is [string, string]) {\n        \/\/ If successful, print the message ID and thread ID.\n        [string, string] [messageId, threadId] = sendMessageResponse;\n        io:println(\"Sent Message ID: \" + messageId);\n        io:println(\"Sent Thread ID: \" + threadId);\n    } else {\n        \/\/ If unsuccessful, print the error returned.\n        io:println(\"Error: \", sendMessageResponse);\n    }\n}\n```\n# Listener Module\n\nConnects to Gmail Listener using Ballerina.\n\n# Module Overview\n\nThe Gmail Listener Ballerina Connector provides the capability to listen the push notification for changes to Gmail mailboxes. The Gmail Listener Ballerina Connector supports to listen the changes of Gmail mailboxes such as receiving new message, receiving new thread, adding new label to a message, adding star to a message, removing label to a message, removing star to a message and receiving a new attachment with following trigger methods: `onNewEmail`, `onNewThread`, `onNewLabeledEmail`, `onNewStarredEmail`, `onLabelRemovedEmail`,`onStarRemovedEmail`, `onNewAttachment`.\n\n\n# Prerequisites:\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https:\/\/ballerinalang.org\/downloads\/)\nBallerina Swan Lake Alpha 5 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for BasicAuth and OAuth 2.0. Gmail uses OAuth 2.0 to authenticate and authorize requests. The Gmail connector can be minimally instantiated in the HTTP client config using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n\n## Obtaining Tokens\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Library** from the left side menu. In the search bar enter required API\/Service name(Eg: Gmail, Cloud Pub\/Sub). Then select required service and click **Enable** button.\n3. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n4. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n5. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the refresh token). \n6. Click **Create**. Your client ID and client secret appear. \n7. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground), select the required Gmail scopes and `https:\/\/www.googleapis.com\/auth\/pubsub` scope of `Cloud Pub\/Sub API v1`, and then click **Authorize APIs**.\n\n8. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token.\n\n\n## Add project configurations file\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the token obtained in the previous step to the `Config.toml` file.\n\n```\n[ballerinax.googleapis.gmail]\nrefreshToken = \"enter your refresh token here\"\nclientId = \"enter your client id here\"\nclientSecret = \"enter your client secret here\"\nport = \"enter the port where your listener runs\"\ntopicName = \"enter your push topic name\"\nsubscriptionName = \"enter your subscription name\"\nproject = \"enter your project name\"\npushEndpoint = \"Listener endpoint\"\n\n```\n\n# Compatibility\n\n| Ballerina Language Versions  | Gmail API Version |\n|:----------------------------:|:-----------------:|\n|  Swan Lake Alpha 5           |   v1              |\n\n# Quickstart(s):\n\n## Working with Gmail Listener\n\n### Step 1: Import Gmail and Gmail Listener Ballerina Library\nFirst, import the ballerinax\/googleapis.gmail and ballerinax\/googleapis.gmail.'listener module into the Ballerina project.\n```ballerina\n    import ballerinax\/googleapis.gmail as gmail;\n    import ballerinax\/googleapis.gmail.'listener as gmailListener;\n```\n\n### Step 2: Initialize the Gmail Listener\nIn order for you to use the Gmail Listener Endpoint, first you need to create a Gmail Listener endpoint.\n```ballerina\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\n\n\n```\n### Step 3: Write service with required trigger \nThe Listener triggers can be invoked by using a service.\n```ballerina\nservice \/ on gmailEventListener {\n   remote function onNewEmail(gmail:Message message) returns error? {\n           \/\/ You can write your logic here. \n   }   \n}\n```\n\n\n# Samples\n\n### On New Email\n\nTriggers when a new e-mail appears in the mail inbox.\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/googleapis.gmail as gmail;\nimport ballerinax\/googleapis.gmail.'listener as gmailListener;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n};\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\nservice \/ on gmailEventListener {\n   remote function onNewEmail(gmail:Message message) returns error? {\n           log:printInfo(\"New Email : \" , message);\n   }   \n}\n\n```\n\n### On New Labeled Email\n\nTriggers when you label an email.\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/googleapis.gmail as gmail;\nimport ballerinax\/googleapis.gmail.'listener as gmailListener;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n};\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\nservice \/ on gmailEventListener {\n   remote function onNewLabeledEmail(gmailListener:ChangedLabel changedLabeldMsg) returns error? {\n           log:printInfo(\"Labeled : \" , changedLabeldMsg);\n   }   \n}\n\n```\nMore samples are available at \"https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.gmail\/tree\/master\/samples\/listener\".", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-googleapis.gmail", "keywords":["gmail", "email", "google", "mail"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620227368000, "modules":[{"name":"googleapis.gmail", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/googleapis.gmail/0.99.7", "packageUrl":"/ballerinax/googleapis.gmail/0.99.7"}], "pullCount":295}, {"organization":"ballerinax", "name":"sfdc", "version":"2.1.8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/sfdc/2.1.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/sfdc/2.1.8/ballerinax-sfdc-java11-2.1.8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Salesforce from Ballerina.", "readme":"Connects to Salesforce from Ballerina.\n\n## Module Overview\n\nThe Salesforce connector allows users to perform CRUD operations for SObjects, query using SOQL, search using SOSL, and describe SObjects and organizational data through the Salesforce REST API. Also, it supports adding bulk data jobs and batches of types JSON, XML, and CSV via the Salesforce Bulk API. Apart from these functionalities Ballerina Salesforce Connector includes a listener module to capture events. This connector follows OAuth 2.0 authentication for secure access. \n\n\n## Compatibility\n|                     |    Version                  |\n|:-------------------:|:---------------------------:|\n| Ballerina Language  | swan-lake-Alpha5            |\n| Salesforce API      | v48.0                       |\n| Salesforce Bulk API | v1                          |\n\n\n## Supported Operations\n\n### REST API Operations\n\nREST API provides a powerful, convenient, and simple Web services API for interacting with Salesforce Lightning Platform providing access to all the Salesforce functionalities through REST resources and HTTP methods. Ballerina Salesforce Connector utilizes the REST API for Salesforce Object (SObject) operations and for searching and querying data. At the same time, the connector provides users to get SObject details and organizational data using the REST API. \n\n#### SObject Operations\n\nThe `ballerinax\/sfdc` module contains operations related to standard and customized SObjects such as Account, Contact, Opportunity, Lead etc. It facilitates users to create SObjects and get, update and delete records by SObject Id. \n\n#### SOQL & SOSL Operations\n\nThe `ballerinax\/sfdc` module contains operations, which query using Salesforce Object Query Language (SOQL) and search using Salesforce Object Search Language (SOSL). This allows complex operations using SObjects relationships.\n\n### Bulk API Operations\n\nSalesforce Bulk API is a specialized asynchronous RESTful API for loading and querying bulk of data at once.  The `ballerinax\/sfdc` module supports bulk data operations for CSV, JSON, and XML data types. \n\n### Event Listener\n\nThe Salesforce Streaming API let users push a stream of notification from Salesforce to client apps based push topics. Push topics are SObjects that contain criterias for the events that users want to listen to such as data changes for a particular SObject.  \n\nThe `ballerinax\/sfdc` module includes a Listener that would capture events on PushTopics defined in a Salesforce instance. PushTopic events provide a way to receive notifications for changes to Salesforce data that match an SOQL query.\n\n\n# Prerequisites\n\n1. Salesforce Organization  \n\n    You can simply setup the Salesforce Developer Edition Organization for testing purposes through the following link [developer.salesforce.com\/signup](https:\/\/developer.salesforce.com\/signup). \n\n2. Verify API Enabled permission in your Salesforce Organization\n3. Download and install [Ballerina](https:\/\/ballerina.io\/downloads\/). \n4. Install java and set up environment \n\n\n# Quickstart(s)\n\n## Step 1: Import Ballerina Salesforce module\n\nFirst, import the `ballerinax\/sfdc` module into the Ballerina project.\n\n```ballerina\nimport ballerinax\/sfdc;\n```\n\nInstantiate the connector by giving authentication details in the HTTP client config, which has built-in support for OAuth 2.0 to authenticate and authorize requests. The Salesforce connector can be instantiated in the HTTP client config using the access token or using the client ID, client secret, and refresh token.\n\n\n## Step 2: Obtain Tokens for authentication\n\n1. Visit [Salesforce](https:\/\/www.salesforce.com\/) and create a Salesforce Account.\n2. Create a connected app and obtain the following credentials:\n    *   Base URL (Endpoint)\n    *   Access Token\n    *   Client ID\n    *   Client Secret\n    *   Refresh Token\n    *   Refresh Token URL\n3. When you are setting up the connected app, select the following scopes under Selected OAuth Scopes:\n    *   Access and manage your data (api)\n    *   Perform requests on your behalf at any time (refresh_token, offline_access)\n    *   Provide access to your data via the Web (web)\n4. Provide the client ID and client secret to obtain the refresh token and access token. For more information on obtaining OAuth2 credentials, go to [Salesforce documentation](https:\/\/help.salesforce.com\/articleView?id=remoteaccess_authenticate_overview.htm).\n\n\n## Step 3: Create the Salesforce client\n\nThe Ballerina Salesforce connector has allowed users to create the client using the [direct token configuration](https:\/\/ballerina.io\/learn\/by-example\/secured-client-with-oauth2-direct-token-type.html) and as well as [bearer token configuration](https:\/\/ballerina.io\/learn\/by-example\/secured-client-with-bearer-token-auth.html). \n\nUsers are recommended to use direct-token config when initializing the Salesforce client for continuous access by providing the Salesfoce account's domain URL as the `baseURL` and the `client id`, `client secret`, `refresh token` obtained in the step two and `https:\/\/login.salesforce.com\/services\/oauth2\/token` as `refreshUrl` in general scenarios. \n\n```ballerina\n\/\/ Create Salesforce client configuration by reading from config file.\n\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     clientId: <\"CLIENT_ID\">,\n     clientSecret: <\"CLIENT_SECRET\">,\n     refreshToken: <\"REFRESH_TOKEN\">,\n     refreshUrl: <\"REFRESH_URL\"> \n   }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\nIf the user already owns a valid access token he can initialize the client using bearer-token configuration providing the access token as a bearer token for quick API calls. \n\n```ballerina\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     token: <\"ACCESS_TOKEN\">\n   }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\nThis access token will expire in 7200 seconds in general scenarios and the expiration time of the access token can be different from organization to organization. In such cases users have to get the new access token and update the configuration. \n\nIf you want to add your own key store to define the `secureSocketConfig`, change the Salesforce configuration as mentioned below.\n\n\n```ballerina\n\/\/ Create Salesforce client configuration by reading from config file.\n\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     clientId: <\"CLIENT_ID\">,\n     clientSecret: <\"CLIENT_SECRET\">,\n     refreshToken: <\"REFRESH_TOKEN\">,\n     refreshUrl: <\"REFRESH_URL\"> \n   },\n   secureSocketConfig: {\n     trustStore: {\n       path: <\"TRUSTSTORE_PATH\"\">,\n       password: <\"TRUSTSTORE_PASSWORD\">\n      }\n    }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\n\n## Step 4: Implement Operations\n\n\n### SObject Operations\n\nAs described earlier Ballerina Salesforce connector facilitates users to perform CRUD operations on SObject through remote method invocations. \n\n\n#### Create Record\n\nThe `createRecord` remote function of the baseclient can be used to create SObject records for a given SObject type. Users need to pass SObject name and the SObject record in json format to the `createRecord` function and it will return newly created record Id as a string at the success and will return an error at the failure. \n\n\n```ballerina\njson accountRecord = {\n   Name: \"John Keells Holdings\",\n   BillingCity: \"Colombo 3\"\n };\n\nstring|sdfc:Error recordId = baseClient->createRecord(ACCOUNT, accountRecord);\n```\n\n#### Get Record\n\nThe `getRecord` remote function of the baseclient can be used to get SObject record by SObject Id. Users need to pass the path to the SObject including the SObject Id to the `getRecord` function and it will return the record in json at the success and will return an error at the failure. \n\n\n```ballerina\nstring testRecordId = \"001xa000003DIlo\";\nstring path = \"\/services\/data\/v48.0\/sobjects\/Account\/\" + testRecordId;\njson|Error response = baseClient->getRecord(path);\n```\n\n#### Update Record\n\nThe `updateRecord` remote function of the baseclient can be used to update SObject records for a given SObject type. Users need to pass SObject name, SObject Id and the SObject record in json format to the updateRecord’ function and it will return `true` at the success and will return an error at the failure. \n\n\n```ballerina\njson account = {\n       Name: \"WSO2 Inc\",\n       BillingCity: \"Jaffna\",\n       Phone: \"+94110000000\"\n   };\nboolean|sfdc:Error isSuccess = baseClient->updateRecord(ACCOUNT, testRecordId, account);\n```\n\n#### Delete Record\n\nThe Ballerina Salesforce connector facilitates users to delete SObject records by the SObject Id. Users need to pass SObject Name and the SObject record id as parameters and the function will return true at successful completion. \n\n\n```ballerina\nstring testRecordId = \"001xa000003DIlo\";\nboolean|sfdc:Error isDeleted = baseClient->deleteRecord(ACCOUNT, testRecordId);\n```\n\n### Convenient CRUD Operations for Common SObjects\n\nApart from the common CRUD operations that can be used with any SObject, the Ballerina Salesforce Connector provides customized CRUD operations for pre-identified, most commonly used SObjects. They are **Account**, **Lead**, **Contact**, **Opportunity** and **Product**. \n\nFollowing are the sample codes for Account’s CRUD operations and the other above mentioned SObjects follow the same implementation and only the Id should be changed according to the SObject type. \n\n\n#### Create Account\n\n`createAccount` remote function accepts an account record in json as an argument and returns Id of the account created at success. \n\n\n```ballerina\njson accountRecord = {\n   Name: \"John Keells Holdings\",\n   BillingCity: \"Colombo 3\"\n };\n\nstring|sdfc:Error accountId = baseClient->createAccount(accountRecord);\n```\n\n\n#### Get Account by Id\n\nUser needs to pass the Id of the account and the names of the fields needed parameters for the `getAccountById` remote function. Function will return the record in json format at success. \n\n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\n\njson|sfdc:Error account = baseClient->getAccountById(accountId, Name, BillingCity);\n```\n\n\n#### Update Account\n\n`updateAccount` remote function accepts account id and the account record needed to update in json as arguments and returns true at success. \n\n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\njson account = {\n       Name: \"WSO2 Inc\",\n       BillingCity: \"Jaffna\",\n       Phone: \"+94110000000\"\n   };\nboolean|sfdc:Error isSuccess = baseClient->updateRecord(accountId, account);\n```\n\n#### Delete Account\n\nUser needs to pass the Id of the account he needs to delete for the `deleteAccount` remote function. Function will return true at success. \n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\nboolean|sfdc:Error isDeleted = baseClient->deleteAccount(accountId);\n```\n\n## Query Operations\n\nThe `getQueryResult` remote function executes a SOQL query that returns all the results in a single response or if it exceeds the maximum record limit, it returns part of the results and an identifier that can be used to retrieve the remaining results.\n\n\n```ballerina\nstring sampleQuery = \"SELECT name FROM Account\";\nSoqlResult|Error res = baseClient->getQueryResult(sampleQuery);\n```\n\n\nThe response from `getQueryResult` is either a `SoqlResult` record with total size, execution status, resulting records, and URL to get the next record set (if query execution was successful) or Error (if the query execution was unsuccessful).\n\n\n```ballerina\nif (response is sfdc:SoqlResult) {\n    io:println(\"TotalSize:  \", response.totalSize.toString());\n    io:println(\"Done:  \", response.done.toString());\n    io:println(\"Records: \", response.records.toString());\n} else {\n    io:println(\"Error: \", response.message());\n}\n```\n\nIf response has exceeded the maximum record limit, response will contain a key named ‘nextRecordsUrl’ and then the user can call `getNextQueryResult` remote function to get the next record set. \n\n\n```ballerina\nsfdc:SoqlResult|sfdc:Error resp = baseClient->getNextQueryResult(<@untainted>nextRecordsUrl);\n```\n\n## Search Operations\n\nThe `searchSOSLString` remote function allows users to search using a string and returns all the occurrences of the string back to the user. SOSL searches are faster and can return more relevant results.\n\n\n```\nstring searchString = \"FIND {WSO2 Inc}\";\nsfdc:SoslResult|Error res = baseClient->searchSOSLString(searchString);\n```\n## Operations to get SObject Metadata\n\nBallerina Salesforce Connector facilitates users to retrieve SObject related information and metadata through Salesforce REST API. Following are the remote functions available for retrieving SObject metadata. \n\n\n<table>\n  <tr>\n   <td><strong>Remote Function<\/strong>\n   <\/td>\n   <td><strong>Description<\/strong>\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>describeAvailableObjects\n   <\/td>\n   <td>Lists the available objects and their metadata for your organization and available to the logged-in user\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>getSObjectBasicInfo\n   <\/td>\n   <td>Returns metadata of the specified SObject\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>describeSObject\n   <\/td>\n   <td>Returns  metadata at all levels for the specified object including the fields, URLs, and child relationships\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>sObjectPlatformAction\n   <\/td>\n   <td>Query for actions displayed in the UI, given a user, a context, device format, and a record ID\n   <\/td>\n  <\/tr>\n<\/table>\n\n\n## Operations to get Organizational Data\n\nApart from the main SObject related functions Ballerina Salesforce Connector facilitates users to get information about their organization. Following are the remote functions available for retrieving organizational data. \n\n\n<table>\n  <tr>\n   <td><strong>Remote Function<\/strong>\n   <\/td>\n   <td><strong>Description<\/strong>\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>getAvailableApiVersions\n   <\/td>\n   <td>Use the <a href=\"https:\/\/developer.salesforce.com\/docs\/atlas.en-us.api_rest.meta\/api_rest\/resources_versions.htm\">Versions<\/a> resource to list summary information about each REST API version currently available, including the version, label, and a link to each version's root\n   <\/td>\n  <\/tr>\n  <tr>\n   <td>getResourcesByApiVersion\n   <\/td>\n   <td>Use the <a href=\"https:\/\/developer.salesforce.com\/docs\/atlas.en-us.api_rest.meta\/api_rest\/resources_discoveryresource.htm\">Resources by Version<\/a> resource to list the resources available for the specified API version. This provides the name and URI of each additional resource. Users need to provide API Version as a parameter to the function. \n   <\/td>\n  <\/tr>\n  <tr>\n   <td>getOrganizationLimits\n   <\/td>\n   <td>Use the <a href=\"https:\/\/developer.salesforce.com\/docs\/atlas.en-us.api_rest.meta\/api_rest\/resources_limits.htm\">Limits resource<\/a> to list your org limits. \n   <\/td>\n  <\/tr>\n<\/table>\n\n\n\n## Bulk Operations \n\nUsing the `createJob` remote function of the base client, we can create any type of job and of the data type JSON, XML and CSV. `createJob` remote function has four parameters.\n\n\n1. Operation - INSERT, UPDATE, DELETE, UPSERT or QUERY\n2. SObject type - Account, Contact, Opportunity etc.\n3. Content Type - JSON, XML or CSV\n4. ExternalIdFieldName (optional) - Field name of the external ID incase of an Upsert operation\n\nStep by step implementation of an `insert` bulk operation has described below. Follow the same process for other operation types too. \n\n```ballerina\nerror|sfdc:BulkJob insertJob = baseClient->creatJob(\"insert\", \"Contact\", \"JSON\");\n```\n\nUsing the created job object, we can add a batch to it, get information about the batch and get all the batches of the job.\n\n\n```ballerina\n   json contacts = [\n        {\n            description: \"Created_from_Ballerina_Sf_Bulk_API\",\n            FirstName: \"Morne\",\n            LastName: \"Morkel\",\n            Title: \"Professor Grade 03\",\n            Phone: \"0442226670\",\n            Email: \"morne89@gmail.com\"\n        }\n    ];\n```\n\n```ballerina\n    \/\/Add json content.\n    error|sfdc:BatchInfo batch = baseClient->addBatch(insertJob, contacts);\n```\n\n```ballerina\n    \/\/Get batch info.\n    error|sfdc:BatchInfo batchInfo = baseClient->getBatchInfo(insertJob, batch.id);\n```\n\n```ballerina\n    \/\/Get all batches.\n    error|sfdc:BatchInfo[] batchInfoList = baseClient->getAllBatches(insertJob);\n```\n\n```ballerina\n    \/\/Get the batch request.\n    var batchRequest = baseClient->getBatchRequest(insertJob, batchId);\n```\n\n```ballerina\n    \/\/Get the batch result.\n    error|sdfc:Result[] batchResult = baseClient->getBatchResult(insertJob, batchId);\n```\n\n\nThe `getJobInfo` remote function retrieves all details of an existing job.\n\n\n```ballerina\n   error|sfdc:JobInfo jobInfo = baseClient->getJobInfo(insertJob);\n```\n\n\nThe `closeJob` and the `abortJob` remote functions close and abort the bulk job respectively. When a job is closed, no more batches can be added. When a job is aborted, no more records are processed. If changes to data have already been committed, they aren’t rolled back.\n\n\n```ballerina\n  error|sfdc:JobInfo closedJob = baseClient->closeJob(insertJob);\n```\n\n\n## Event Listener\n\nThe Listener which can be used to capture events on PushTopics defined in a Salesforce instance is configured as below.\n\n\n```ballerina\nsfdc:ListenerConfiguration listenerConfig = {\n   username: config:getAsString(\"SF_USERNAME\"),\n   password: config:getAsString(\"SF_PASSWORD\")\n};\nlistener sfdc:Listener eventListener = new (listenerConfig);\n```\n\nIn the above configuration, the password should be the concatenation of the user's Salesforce password and his secret key.\n\nNow, a service has to be defined on the ‘eventListener’ like the following.\n\n\n```ballerina\n  @sfdc:ServiceConfig {\n      topic:\"\/topic\/QuoteUpdate\"\n  }\n  service quoteUpdate on eventListener {\n      resource function onEvent(json quoteUpdate) { \n          \/\/convert JSON string to JSON     \n          io:StringReader sr = new(quoteUpdate.toJsonString());\n          json|error quote = sr.readJson();\n          if (quote is json) {\n              io:println(\"Quote Status : \", quote.sobject.Status);\n          }\n      }\n  }\n```\n\n\nThe above service is listening to the PushTopic `QuoteUpdate` defined in the Salesforce like the following.\n\n\n```ballerina\n   PushTopic pushTopic = new PushTopic();\n   pushTopic.Name = 'QuoteUpdate';\n   pushTopic.Query = 'SELECT Id, Name, AccountId, OpportunityId, Status,GrandTotal  FROM Quote';\n   pushTopic.ApiVersion = 48.0;\n   pushTopic.NotifyForOperationUpdate = true;\n   pushTopic.NotifyForFields = 'Referenced';\n   insert pushTopic;\n```\n# Samples\n\nPlease find the samples for above mentioned use cases through following links.\n\n## [Samples for Salesforce REST API use cases](samples\/rest_api_usecases)  \n\nThese samples demonstrate the employment of Ballerina Salesforce Connector in Salesforce REST API related operations. The samples can be further divided as following\n* Samples that can be used with any SObject's CRUD operations\n* Samples for convenient access of Account, Contact, Product, Opportunity and Target SObjects's CRUD operations\n* Samples for SOSL and SOQL related operations\n* Samples for retrieving Organization and SObject metadata\n\n\n## [Samples for Salesforce Bulk API use cases](samples\/bulk_api_usecases)\n\nThese samples demonstrate the employment of Ballerina Salesforce Connector in Salesforce BULK API related operations. Examples for bulk insert, bulk insert through files, bulk update, bulk upsert and bulk delete using json, csv or xml data sets are given here.\n\n## [Samples for Event Listener](samples\/event_listener_usecases)\n\nThis sample demonstrates on capturing events using the Event Listener of Ballerina Salesforce Connector. As mentioned above to listen to a certin event users need to publish a pushtopic related to that event in his\/her Salesforce instance. \n\n# References\n\nTrailhead Salesforce Documentation -\n\n[https:\/\/trailhead.salesforce.com\/en\/content\/learn\/modules\/api_basics\/api_basics_overview](https:\/\/trailhead.salesforce.com\/en\/content\/learn\/modules\/api_basics\/api_basics_overview)\n\nSalesforce REST API Documentation -\n\n[https:\/\/developer.salesforce.com\/docs\/atlas.en-us.api_rest.meta\/api_rest](https:\/\/developer.salesforce.com\/docs\/atlas.en-us.api_rest.meta\/api_rest)", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-sfdc", "keywords":["sfdc", "salesforce"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620199287000, "modules":[{"name":"sfdc", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/sfdc/2.1.8", "packageUrl":"/ballerinax/sfdc/2.1.8"}], "pullCount":162}, {"organization":"ballerinax", "name":"netsuite", "version":"0.9.5", "platform":"any", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/netsuite/0.9.5", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/netsuite/0.9.5/ballerinax-netsuite-any-0.9.5.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"based on SOAP webservice", "readme":"# Ballerina NetSuite Connector\nbased on SOAP webservice\n\n[![CI](https:\/\/github.com\/ballerina-platform\/module-ballerinax-netsuite\/actions\/workflows\/ci.yml\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-netsuite\/actions\/workflows\/ci.yml)\n![GitHub release (latest by date including pre-releases)](https:\/\/img.shields.io\/github\/v\/release\/ballerina-platform\/module-ballerinax-netsuite?color=green&include_prereleases&label=latest%20release)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n# Introduction\n\nThis module allows you to access the NetSuite's SuiteTalk REST Web services API though Ballerina. NetSuite is used for \nEnterprise Resource Planning (ERP) and to manage inventory, track their financials, host e-commerce stores, and maintain \nCustomer Relationship Management (CRM) systems. The NetSuite connector can execute CRUD (create, read, update, delete) \nand search operations to perform business processing on NetSuite records and to navigate dynamically between records.\n\nThe following sections provide you details on how to use the NetSuite connector.\n\n- [Compatibility](#compatibility)\n- [Feature Overview](#feature-overview)\n- [Getting Started](#getting-started)\n\n## Compatibility\n\n|                             |           Version                    |\n|:---------------------------:|:------------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha5                 |\n| NetSuite SOAP API           |     SOAP 1.1                         |\n| WSDL version                |     2020.2.0                         |\n\n## Feature Overview\n- A single client is used across all network operations which supports the netsuite token based authentication mechanism.\n- The NetSuite module has modelled the existing standard NetSuite entities\/records in to Ballerina record types with\n widely used set of fields.\n\n## Getting Started\n\n### Prerequisites\nDownload and install [Ballerina](https:\/\/ballerinalang.org\/downloads\/).\n\n### Supported Operations\n* Get\n* GetAll \n* Get List of Records\n* Get SavedSearch\n* Search\n* Add Records\n* Delete Records\n* Update Records\n\n### Pull the Module\nExecute the below command to pull the NetSuite module from Ballerina Central:\n```ballerina\n$ ballerina pull ballerinax\/netsuite\n```\n## Sample\n\nInstantiate the connector by giving authentication details in the HTTP client config, which has built-in support for \nTBA . NetSuite uses TBA to authenticate and authorize requests. The NetSuite connector can be instantiated \nin the HTTP client config using the access token or using the client ID, client secret, access token and access token secret.\n\n**Obtaining Tokens**\n\n1. Visit [NetSuite](https:\/\/www.netsuite.com) and create an Account.\n2. Enable the SuiteTalk Webservice features of the account (Setup->Company->Enable Features).\n3. Obtain the SuiteTalk Base URL, which contains the account ID under the company URLs (Setup->Company->Company\n Information).\n    E.g., https:\/\/<ACCOUNT_ID>.suitetalk.api.netsuite.com\n4. Create an integration application (Setup->Integration->New), enable TBA code grant and scope, and obtain the \nfollowing credentials: \n    * Client ID\n    * Client Secret\n5. Obtain the below credentials by following the token based authorization in the [NetSuite documentation](https:\/\/system.na0.netsuite.com\/app\/help\/helpcenter.nl?fid=book_1559132836.html&vid=_BLm3ruuApc_9HXr&chrole=17&ck=9Ie2K7uuApI_9PHO&cktime=175797&promocode=&promocodeaction=overwrite&sj=7bfNB5rzdVQdIKGhDJFE6knJf%3B1590725099%3B165665000). \n    * Access Token\n    * Access Token Secret\n\n**Create the NetSuite client**\n\n```ballerina\n\/\/ Create a NetSuite client configuration by reading from the config file.\n\/\/ Import the connector\nimport ballerina\/io;\nimport ballerinax\/netsuite;\nnetsuite:NetsuiteConfiguration nsConfig = {\n    accountId: <accountId>,\n    consumerId: <consumerId>,\n    consmerSecret: <consmerSecret>,\n    token: <token>,\n    tokenSecret: <tokenSecret>,\n    baseURL: <baseURL>\n};\n\nnetsuite:Client nsClient = check new(nsConfig);\n```\n\n**Perform NetSuite operations**\n\nThe following sample shows how to retrieve NetSuite `Currency` records by GetAll operation.\n\n```ballerina\npublic function main() {\n    json[]|error output = nsClient->getAll(\"currency\");\n    if (output is json[]) {\n        log:print(output.toString());\n    } else {\n        log:printError(output.message());\n    }\n}\n```\n**More samples are available [here](https:\/\/github.com\/SanduDS\/Netsuite\/tree\/Netsuite_Alpha4\/samples).**", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-netsuite", "keywords":["NetSuite", "Finance", "Integration"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620201385000, "modules":[{"name":"netsuite", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/netsuite/0.9.5", "packageUrl":"/ballerinax/netsuite/0.9.5"}], "pullCount":113}, {"organization":"ballerinax", "name":"googleapis.drive", "version":"0.1.3", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/googleapis.drive/0.1.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.drive/0.1.3/ballerinax-googleapis.drive-java11-0.1.3.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Google Drive Connector\n\n[![Build](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive\/workflows\/CI\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive\/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https:\/\/img.shields.io\/github\/last-commit\/ballerina-platform\/module-ballerinax-googleapis.drive.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive\/commits\/master)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\nConnects to Google Drive using Ballerina.\n\n<!-- TOC -->\n\n- [Google Drive Connecter](#markdown-navigation)\n    - [Introduction](#introduction)\n        - [What is Google drive](#what-is-google-drive-?)\n        - [Key features of Google Drive](#key-features-of-google-drive)\n        - [Connector Overview](#connector-overview)\n    - [Prerequisites](#prerequisites)\n        - [Obtaining tokens](#obtaining-tokens)\n        - [Add project configurations file](#add-project-configurations-file)\n    - [Supported versions & limitations](#supported-versions-&-limitations)\n    - [Quickstart](#quickstart)\n    - [Samples](#samples)\n    - [Building from the Source](#building-from-the-source)\n    - [Contributing to Ballerina](#contributing-to-ballerina)\n    - [Code of Conduct](#code-of-conduct)\n    - [Useful Links](#useful-links)\n    - [How you can contribute](#how-you-can-contribute)\n\n<!-- \/TOC -->\n\n# Introduction\n\n## What is Google drive?\n\n[Google Drive](https:\/\/developers.google.com\/drive\/api) allows users to store files on their servers, \nsynchronize files across devices, and share files. Google Drive encompasses Google Docs, Google Sheets, and Google \nSlides, which are a part of the Google Docs Editors office suite that permits the collaborative editing of documents, \nspreadsheets, presentations, drawings, forms, and more. Files created and edited through the Google Docs suite are saved in Google Drive.\n\n![alt text](\/docs\/images\/drive_overview.png?raw=true)\n\n## Key features of Google Drive\n\n* Easy and secure access to all of your content.\n* Store, share and collaborate on files and folders from any mobile device, tablet or computer.\n* Cloud-native collaboration apps to supercharge teamwork.\n* Drive integrates seamlessly with Docs, Sheets, and Slides, cloud-native apps that enable your team to collaborate effectively in real-time.\n* Integration with the tools and apps your team is already using.\n* Drive integrates with and complements your team’s existing technology. \n* Drive works on all major platforms, enabling you to work seamlessly across your browser, mobile device, tablet and computer.\n\n## Connector Overview\n\nThe Google Drive Ballerina Connector allows you to access the \n[Google Drive API Version v3](https:\/\/developers.google.com\/drive\/api) through Ballerina. The connector can be used to implement some of the most common use cases of Google Drive. The connector provides the capability to programmatically manage files & folders in the drive.\n\nThe Google Drive Ballerina Connector supports file and folder management operations related to creating, deleting, \nupdating and retrieving.\n\n![alt text](\/docs\/images\/connecter_overview.png?raw=true)\n\n# Prerequisites\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https:\/\/ballerinalang.org\/downloads\/)\nBallerina Swan Lake Alpha 5  is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for BasicAuth and OAuth 2.0. Google Drive uses OAuth 2.0 to authenticate and authorize requests. The Google Drive connector can be minimally instantiated in the HTTP client config using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n\n## Obtaining tokens\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and \nfollow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (\n    enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the access token and refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground), \nselect the required Google Calendar scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the \nrefresh token and access token. \n\n## Add project configurations file\n\nAdd the project configuration file by creating a `Config. toml` file under the root path of the project structure.\nThis file should have the following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n#### Config.toml\n```ballerina\n[ballerinax.googleapis.drive]\nclientId = \"<client_id\">\nclientSecret = \"<client_secret>\"\nrefreshToken = \"<refresh_token>\"\n```\n\n# Supported versions & limitations\n\n## Supported Versions\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha 5           |\n| Google Drive API            |             V3                  |\n\n## Limitations\n\nGoogle API v3 supports resource types - Files, Permissions, Changes, Replies, Revisions, Drives and Channels. Currently, \nGoogle drive connecter supports operations related to Files, Channels and Changes only. .It doesn't support admin related operations like creatin new shared drives.\n\n# Quickstart\n\n## Working with Google Drive Endpoint Actions\n\nYou must follow the following steps in order to obtain the tokens needed for the configuration of the Ballerina Connector.\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground), select the required Google Drive scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token.\n\n### Step 1: Import the Google Drive Ballerina Library\nFirst, import the ballerinax\/googleapis.drive module into the Ballerina project.\n```ballerina\nimport ballerinax\/googleapis.drive as drive;\n```\nAll the actions return a valid response or error. If the action is a success, then the requested resource will be returned. Else error will be returned.\n\n### Step 2: Initialize the Google Drive Client\nIn order for you to use the Drive Endpoint, first, you need to create a Google Drive Client endpoint.\n```ballerina\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshUrl = drive:REFRESH_URL;\n\ndrive:Configuration config = {\n    clientConfig: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: refreshUrl,\n        refreshToken: refreshToken\n    }\n};\n\ndrive:Client driveClient = new (config);\n```\nThen the endpoint actions can be invoked as `var response = driveClient->actionName(arguments)`.\n\n#### How to get an id from a file or folder in Google drive\n1. Go to Google drive https:\/\/drive.google.com\/drive\/u\/0\/my-drive\n2. Right-click on a folder or file.\n3. Click 'Get link'. Then copy the link.\n4. You can find the ID in the link copied or You can get the id directly from the browser URL after clicking on the file\n![alt text](\/docs\/images\/file_id.jpeg?raw=true)\n\n## Example code\n\nCreating a drive:driveClient by giving the HTTP client config details. \n\n```ballerina\n    import ballerina\/config;   \n    import ballerinax\/googleapis.drive as drive;\n\n    configurable string clientId = ?;\n    configurable string clientSecret = ?;\n    configurable string refreshToken = ?;\n    configurable string refreshUrl = drive:REFRESH_URL;\n\n    Configuration config = {\n        clientConfig: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshUrl: refreshUrl,\n            refreshToken: refreshToken\n        }\n    };\n\n    drive:Client driveClient = check new (config);\n```\nThere is support for providing configuration using access token also.\n\n```\nConfiguration config = {\n    clientConfig: {\n        token: os:getEnv(\"ACCESS_TOKEN\")\n    }\n};\n```\n\n# Samples\n\n### Get file by id\n```ballerina\n    File|error response = driveClient->getFile(fileId);\n```\n### Copy File\n```ballerina\n    File|error response = driveClient->copyFile(sourceFileId);\n    File|error response = driveClient->copyFile(sourceFileId, destinationFolderId);\n    File|error response = driveClient->copyFile(sourceFileId, destinationFolderId, newFileName);\n```\n### Move File\n```ballerina\n    File|error response = driveClient->moveFile(sourceFileId, destinationFolderId);\n```\n### Rename File\n```ballerina\n    File|error response = driveClient->renameFile(fileId, newFileName);\n```\n### Create folder\n```ballerina\n    File|error response = driveClient->createFolder(folderName);\n    File|error response = driveClient->createFolder(folderName, parentFolderId);\n```\n### Create file\n```ballerina\n    File|error response = driveClient->createFile(fileName);\n    File|error response = driveClient->createFile(fileName, mimeType);\n    File|error response = driveClient->createFile(fileName, mimeType, parentFolderId);\n```\n\n### Search files by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFilesByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFilesByName(\"ballerina\", \"createdTime\");\n```\n### Search folders by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFoldersByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFoldersByName(\"ballerina\", \"createdTime\");\n```\n\n### Filter files\n```ballerina\n    stream<File>|error response = driveClient->filterFiles(filterString);\n    stream<File>|error response = driveClient->filterFiles(filterString, \"createdTime\");\n```\n\n| What you want to query                                               |    Example                                                             |\n| ---------------------------------------------------------------------|------------------------------------------------------------------------|\n|Files with the name \"hello\"                                           |     name = 'hello'                                                     |\n|Files with a name containing the words \"hello\" and \"goodbye\"          |     name contains 'hello' and name contains 'goodbye'                  |\n|Files with a name that does not contain the word \"hello\"              |     not name contains 'hello'                                          |   \n|Folders that are Google apps or have the folder MIME type             |     mimeType = 'application\/vnd.google-apps.folder'                    |\n|Files that are not folders                                            |     mimeType != 'application\/vnd.google-apps.folder'                   |\n|Files that contain the text \"important\" and in the trash              |     fullText contains 'important' and trashed = true                   |\n|Files that contain the word \"hello\"                                   |     fullText contains 'hello'                                          |\n|Files that do not have the word \"hello\"                               |     not fullText contains 'hello'                                      |\n|Files that contain the exact phrase \"hello world\"                     |     fullText contains '\"hello world\"'                                  |\n|Files with a query that contains the \"\" character (e.g., \"\\authors\")  |     fullText contains '\\\\authors'                                      |\n|Files with ID within a collection, e.g. parents collection            |     '1234567' in parents                                               |\n|Files in an Application data folder in a collection                   |     'appDataFolder' in parents                                         |\n|Files for which user \"test@example.org\" has write permission          |     'test@example.org' in writers                                      |\n|Files modified after a given date                                     |      modifiedTime > '2012-06-04T12:00:00' \/\/ default time zone is UTC  |\n|Files shared with the authorized user with \"hello\" in the name        |      sharedWithMe and name contains 'hello'                            |\n\n### Get All files\n```ballerina\n    drive:stream<File>|error res = driveClient->getAllFiles();\n```\n\n## Workspace related functions\n### Get All Google spreadsheets\n```ballerina\n    stream<File>|error response = driveClient->getAllSpreadsheets();\n     if (response is stream<File>){\n        error? e = response.forEach(isolated function (File response) {\n            log:printInfo(response?.id.toString());\n        });\n    } else {\n        log:printError(response.message());\n    }\n```\n### Search Google spreadsheets by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getSpreadsheetsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getSpreadsheetsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google documents by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getDocumentsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getDocumentsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google forms by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFormsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFormsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google slides by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getSlidesByName(\"ballerina\");\n    stream<File>|error response = driveClient->getSlidesByName(\"ballerina\", \"createdTime\");\n```\n### Update metadata in a file\n```ballerina\n    UpdateFileMetadataOptional optionalsFileMetadata = {\n        addParents : parentFolder\n    };\n    File payloadFileMetadata = {\n        name : \"test\"\n    };\n    File|error res = driveClient->updateFileMetadataById(fileId, optionalsFileMetadata, payloadFileMetadata);\n```\n### Download file\n```ballerina\n    string|error response = driveClient->downloadFile(fileId);\n```\n### Delete File by id\n```ballerina\n    boolean|error response = driveClient->deleteFile(fileId);\n```\n### Create folder with metadata\nMore details : https:\/\/developers.google.com\/drive\/api\/v3\/reference\/files\/update\n```ballerina\n    CreateFileOptional optionals_create_folder = {\n        ignoreDefaultVisibility : false\n    };\n    File payload_create_folder = {\n        mimeType : \"application\/vnd.google-apps.folder\",\n        name : \"folderInTheRoot\"\n    };\n    File|error res = driveClient->createMetaDataFile(optionals_create_folder, payload_create_folder);\n```\n### Upload file\n```ballerina\n    File|error response = driveClient->uploadFile(localFilePath);\n    File|error response = driveClient->uploadFile(localFilePath, fileName);\n    File|error response = driveClient->uploadFile(localFilePath, fileName, parentFolderId);\n```\n### Upload file using a byte array\n```ballerina\n    byte[] byteArray = [116,101,115,116,45,115,116,114,105,110,103];\n    File|error response = driveClient->uploadFileUsingByteArray(byteArray, fileName);\n    File|error response = driveClient->uploadFileUsingByteArray(byteArray, fileName, parentFolderId);\n```\n\n# Building from the Source\n\n### Setting Up the Prerequisites\n\n1. Download and install Java SE Development Kit (JDK) version 11 (from one of the following locations).\n\n   * [Oracle](https:\/\/www.oracle.com\/java\/technologies\/javase-jdk11-downloads.html)\n\n   * [OpenJDK](https:\/\/adoptopenjdk.net\/)\n\n        > **Note:** Set the JAVA_HOME environment variable to the path name of the directory into which you installed JDK.\n\n2. Download and install [Ballerina Alpha 5 ](https:\/\/ballerina.io\/). \n\n### Building the Source\n\nExecute the commands below to build from the source after installing Ballerina Alpha 5  version.\n\n1. To clone the repository:\nClone this repository using the following command:\n```shell\n    git clone https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive\n```\nExecute the commands below to build from the source after installing Ballerina SLP8 version.\n\n2. To build the library:\nRun this command from the module-ballerinax-googleapis.drive root directory:\n```shell script\n    bal build\n```\n\n3. To build the module without the tests:\n```shell script\n    bal build -c --skip-tests\n```\n\n## Contributing to Ballerina\n\nAs an open-source project, Ballerina welcomes contributions from the community. \n\nFor more information, go to the [contribution guidelines](https:\/\/github.com\/ballerina-platform\/ballerina-lang\/blob\/master\/CONTRIBUTING.md).\n\n## Code of Conduct\n\nAll the contributors are encouraged to read the [Ballerina Code of Conduct](https:\/\/ballerina.io\/code-of-conduct).\n\n## Useful Links\n\n* Discuss the code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n* Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n* Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag.\n\n## How you can contribute\n\nClone the repository by running the following command\n`git clone https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive.git`\n\nAs an open-source project, we welcome contributions from the community. Check the [issue tracker](https:\/\/github.com\/ballerina-platform\/module-ballerinax-googleapis.drive\/issues) for open issues that interest you. We look forward to receiving your contributions.", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-googleapis.drive", "keywords":["google", "drive", "storage"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620235106000, "modules":[{"name":"googleapis.drive", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/googleapis.drive/0.1.3", "packageUrl":"/ballerinax/googleapis.drive/0.1.3"}], "pullCount":105}, {"organization":"ballerinax", "name":"slack", "version":"0.9.8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/slack/0.9.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/slack/0.9.8/ballerinax-slack-java11-0.9.8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"[![Build](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/workflows\/CI\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https:\/\/img.shields.io\/github\/last-commit\/ballerina-platform\/module-ballerinax-slack.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/commits\/master)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\n# Ballerina Slack Connector \nConnects to Slack using Ballerina\n\n# Introduction\n## Slack\n[Slack](https:\/\/api.slack.com\/) is a channel-based messaging platform. With Slack, people can work together more effectively, connect all their software tools and services, and find the information they need to do their best work — all within a secure, enterprise-grade environment.\n\n## Connector Overview\nThe Ballerina Slack Connector allows you to access the Slack Web API and Slack Events API through Ballerina. This \nconnector can be used to implement some of the most common use cases of Slack. This connector provides the capability\nto query information from and perform some actions in a Slack workspace. This connector also allows you to listen to\nSlack Events.\n\n## Prerequisites\n* Slack Account https:\/\/slack.com\/get-started#\/createnew\n\n* Java 11 Installed - Java Development Kit (JDK) with version 11 is required.\n\n* Ballerina SL Alpha 5 Installed - Ballerina Swan Lake Alpha 5 is required. \n\n## Supported Versions\n|                             |           Version           |\n|:---------------------------:|:---------------------------:|\n| Ballerina Language          |        Swan Lake Alpha 5    |\n\n## Obtaining Slack Token\n1. Visit https:\/\/api.slack.com\/apps and create a Slack App.\n2. In the \"Add features and functionality\" section, Click permissions.\n3. Go to the Scopes section and add necessary OAuth scopes for User Token. (\"channels:write\", \"chat:write\", \"files:read\",\n   \"files:write\", \"users:read\")\n4. Install the app to the workspace.\n5. Get your User OAuth token from the OAuth & Permissions section of your Slack App.\n\n## Module Overview - `ballerinax\/slack`\n\nThe `ballerinax\/slack` module provides a Slack client, which allows you to access the Slack Web API through Ballerina.\n\nThe following sections provide you details on how to use the Slack connector.\n\n- [Feature Overview](#feature-overview)\n- [Quickstart](#quickstart)\n- [Samples](#samples)\n\n## Feature Overview\n\n1. Conducting messaging-related operations. For example, post messages on slack, delete messages, \nsend attachments, etc.\n2. Executing `conversations\/channels`-related operations. For example, create conversations,\njoin a conversation, add users to a conversation, archive\/unarchive conversations, etc.\n3. Conducting `users\/user groups`-related operations. For example, get user information etc.\n4. Performing file-related operations in Slack. For example, upload files, delete files, get file information, etc.\n\n# Quickstart\n\n### Pull the Module\nExecute the below command to pull the Slack module from Ballerina Central:\n```ballerina\n$ ballerina pull ballerinax\/slack\n```\n\n### Slack Client Sample\nThe Slack Client Connector can be used to interact with the Slack Web API.\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack;\nimport ballerina\/os;\n\nslack:Configuration slackConfig = {\n    bearerTokenConfig: {\n        token: os:getEnv(\"SLACK_TOKEN\")\n    }\n};\n\npublic function main() returns error? {\n    slack:Client slackClient = check new(slackConfig);\n\n    slack:Message messageParams = {\n        channelName: \"channelName\",\n        text: \"Hello\"\n    };\n\n    \/\/ Post a message to a channel.\n    var postResponse = slackClient->postMessage(messageParams);\n    if (postResponse is string) {\n        log:printInfo(\"Message sent\");\n    } else {\n        log:printError(postResponse.toString());\n    }\n\n    \/\/ List all the conversations.\n    var listConvResponse = slackClient->listConversations();\n    if (listConvResponse is error) {\n        log:printError(listConvResponse.toString());\n    } else {\n        log:printInfo(listConvResponse.toString());\n    }\n\n    \/\/ Upload a file to a channel.\n    var fileResponse = slackClient->uploadFile(\"filePath\", \"channelName\");\n    if (fileResponse is error) {\n        log:printError(fileResponse.toString());\n    } else {\n        log:printInfo(\"Uploaded file \" + fileResponse.id);\n    }\n\n    \/\/ Get user information.\n    var userResponse = slackClient->getUserInfo(\"userName\");\n    if (userResponse is error) {\n        log:printError(userResponse.toString());\n    } else {\n        log:printInfo(\"Found user information of the user \", userResponse.name);\n    }\n}\n```\n## Please check the [Samples directory](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/tree\/master\/samples) for more examples.\n\n\n## Module Overview - `ballerinax\/slack.'listener`\n\nThe `ballerinax\/slack.'listener` module provides a Listener to grasp event triggers from your Slack App. This functionality is provided by [Slack Event API](https:\/\/api.slack.com\/apis\/connections\/events-api). \n\n## Listener Feature Overview\n1. Receive event triggers and event related data from Slack\n2. Validate Slack requests using the Verification token issued and automatic response to Slack API when needed.\n\n## Supported Trigger Types\n1. \"onAppMention\" - Subscribe to only the message events that mention your app or bot\n2. \"onChannelCreated\" - A channel was created\n3. \"onEmojiChanged\" - A custom emoji has been added or changed\n4. \"onFileShared\" - A file was shared\n5. \"onMemberJoinedChannel\" - A user joined a public or private channel\n6. \"onMessage\" - A message was sent to a channel\n7. \"onReactionAdded\" - A member has added an emoji reaction to an item\n8. \"onTeamJoin\" - A new member has joined\n\n## Quickstart\n\n### Prerequisites\n1. Create your own slack app and enable Event Subscription in your slack app settings. \n2. Subscribe to the events that you are planning to listen and save changes.\n3. Obtain verification token from the Basic Information section of your Slack App.\n4. Download and install [Ballerina](https:\/\/ballerinalang.org\/downloads\/).\n5. Install npm and setup the [ngrok](https:\/\/ngrok.com\/download).\n\n### Pull the Module\nExecute the below command to pull the Slack Listener module from Ballerina Central:\n```ballerina\n$ ballerina pull ballerinax\/slack.'listener\n```\n\n### Implementation of the listener\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack.'listener as slack;\n\nslack:ListenerConfiguration configuration = {\n    port: 9090,\n    verificationToken: \"VERIFICATION_TOKEN\"\n};\n\nlistener slack:Listener slackListener = new (configuration);\n\nservice \/slack on slackListener {\n    isolated remote function onMessage(slack:SlackEvent eventInfo) returns error? {\n        log:printInfo(\"New Message\");\n        log:printInfo(eventInfo.toString());\n    }\n}\n```\n\n* Write a remote function to receive particular event type. Implement your logic within that function.\n\n* \"onAppMention\", \"onChannelCreated\", \"onEmojiChanged\", \"onFileShared\", \"onMemberJoinedChannel\", \"onMessage\",\n\"onReactionAdded\", \"onTeamJoin\" are the supported event types.\n\n### Register the Request URL\n1. Run your ballerina service (similar to below sample) on prefered port.\n2. Start ngok on same port using the command ``` .\/ngrok http 9090 ```\n3. In Event Subscriptions section of your Slack App settings, paste the URL issued by ngrok following with your service path (eg : ```https:\/\/365fc542d344.ngrok.io\/slack\/events```) \n4. Slack Event API will send a url_verification event containing the token and challenge key value pairs.\n5. Slack Listener will automatically verify the URL by comparing the token and send the required response back to slack \n6. Check whether your Request URL displayed as verified in your Slack.\n7. Subscribe to the events that you are planning to listen and click save changes.\n\n### Receiving events\n* After successful verification of Request URL your ballerina service will receive events. \n\n## Samples\n\n### Slack Listener Sample\n* Following sample code is written to receive triggered event data from Slack Event API.\n* Name of the remote functions written within the service must be one of the supported trigger type.\n   Example: \"onAppMention\", \"onChannelCreated\", \"onEmojiChanged\", \"onFileShared\", \"onMemberJoinedChannel\", \"onMessage\",\n   \"onReactionAdded\", \"onTeamJoin\"\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack.'listener as slack;\n\nslack:ListenerConfiguration configuration = {\n    port: 9090,\n    verificationToken: \"VERIFICATION_TOKEN\"\n};\n\nlistener slack:Listener slackListener = new (configuration);\n\nservice \/slack on slackListener {\n    isolated remote function onMessage(slack:SlackEvent eventInfo) returns error? {\n        log:printInfo(\"New Message\");\n        log:printInfo(eventInfo.toString());\n    }\n}\n```\n\n## Please check the [Samples directory](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/tree\/master\/samples) for more examples.", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-slack", "keywords":["slack"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620303086000, "modules":[{"name":"slack", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/slack/0.9.8", "packageUrl":"/ballerinax/slack/0.9.8"}], "pullCount":77}, {"organization":"ballerina", "name":"websub", "version":"1.2.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/websub/1.2.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/websub/1.2.0-alpha8/ballerina-websub-java11-1.2.0-alpha8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"## Package Overview\n\nThis package contains an implementation of the W3C [**WebSub**](https:\/\/www.w3.org\/TR\/websub\/) recommendation, which facilitates a push-based content delivery\/notification mechanism between publishers and subscribers.\n\nThis implementation supports introducing WebSub Subscriber, A party interested in receiving update notifications for particular topics.\n### Basic flow with WebSub\n1. The subscriber discovers from the publisher, the topic it needs to subscribe to and the hub(s) that deliver notifications on updates of the topic.\n\n2. The subscriber sends a subscription request to one or more discovered hub(s) specifying the discovered topic along \n with other subscription parameters such as:\n    - The callback URL to which content is expected to be delivered.\n    - (Optional) The lease period (in seconds) the subscriber wants the subscription to stay active.\n    - (Optional) A secret to use for [authenticated content distribution](https:\/\/www.w3.org\/TR\/websub\/#signing-content).\n  \n3. The hub sends an intent verification request to the specified callback URL. If the response indicates \nverification\n (by echoing a challenge specified in the request) by the subscriber, the subscription is added for the topic at the \n hub.\n   \n4. The publisher notifies the hub of updates to the topic and the content to deliver is identified.\n\n5. The hub delivers the identified content to the subscribers of the topic.\n\n### Features\n\n#### Subscriber\n\nThis package allows introducing a WebSub Subscriber Service with `onSubscriptionVerification`, which accepts HTTP GET requests for intent verification, `onSubscriptionValidationDenied` which accepts subscription denied response from hub and `onEventNotification`, which accepts HTTP POST requests for notifications. The WebSub Subscriber Service provides the following capabilities:\n - When the service is started a subscription request is sent for a hub\/topic combination, either specified as annotations or discovered based on the resource URL specified as an annotation.\n - If `onSubscriptionVerification` is not specified, intent verification will be done automatically against the topic specified as an annotation or discovered based on the resource URL specified as an annotation.\n - If `onSubscriptionValidationDenied` is not specified, subscriber service will respond to the incoming request automatically.\n - If `target` is not specified the initial subscription will not happen on service startup.\n - If a `secret` is specified for the subscription, signature validation will be done for authenticated content distribution.\n\n    ```ballerina\n    websub:ListenerConfiguration listenerConfigs = {\n        secureSocket: {\n            key: {\n                certFile: \"..\/resource\/path\/to\/public.crt\",\n                keyFile: \"..\/resource\/path\/to\/private.key\"\n            }\n        }\n    };\n\n    listener websub:Listener sslEnabledListener = new(9095, listenerConfigs);\n\n    @websub:SubscriberServiceConfig {\n        target: [\"<HUB_URL>\", \"<TOPIC_URL>\"], \n        leaseSeconds: 36000,\n        secret: \"<SECRET>\"\n    } \n    service \/subscriber on sslEnabledListener {\n        remote function onSubscriptionValidationDenied(websub:SubscriptionDeniedError msg) returns websub:Acknowledgement? {\n            \/\/ implement subscription validation denied logic here\n            return websub:ACKNOWLEDGEMENT;\n        }\n\n        remote function onSubscriptionVerification(websub:SubscriptionVerification msg)\n                        returns websub:SubscriptionVerificationSuccess|websub:SubscriptionVerificationError {\n            \/\/ implement subscription intent verification logic here\n            return websub:SUBSCRIPTION_VERIFICATION_SUCCESS;\n        }\n\n        remote function onEventNotification(websub:ContentDistributionMessage event) \n                        returns websub:Acknowledgement|websub:SubscriptionDeletedError? {\n            \/\/ implement on event notification logic here\n            return websub:ACKNOWLEDGEMENT;\n        }\n    }\n    ```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1621866443000, "modules":[{"name":"websub", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerina/websub/1.2.0-alpha8", "packageUrl":"/ballerina/websub/1.2.0-alpha8"}], "pullCount":58}, {"organization":"ballerinax", "name":"aws.sqs", "version":"0.99.3", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/aws.sqs/0.99.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/aws.sqs/0.99.3/ballerinax-aws.sqs-java11-0.99.3.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Amazon SQS Connector\n\nAmazon SQS Connector allows you to connect to the Amazon Simple Queue Service (SQS) via REST API from Ballerina.\n\n## Compatibility\n| Ballerina Language Versions | Amazon SQS API version  |\n| --------------------------- | ----------------------  |\n|     Swan Lake Alpha 5       |        2012-11-05       |\n\nThe following sections provide you with information on how to use the Ballerina Amazon SQS connector.\n\n- [Contribute To Develop](#contribute-to-develop)\n- [Working with Amazon SQS Connector Actions](#Working-with-AWS-SQS-Connector)\n- [Sample](#sample)\n\n### Contribute to development\n\nClone the repository by running the following command \n```shell\ngit clone git@github.com:ballerina-platform\/module-amazonsqs.git\n```\n\n### Working with AWS SQS Connector\n\nFirst, import the `ballerinax\/aws.sqs` module into the Ballerina project.\n\n```ballerina\nimport ballerinax\/aws.sqs;\n```\n\nIn order for you to use the AWS SQS Connector, first you need to create an AWS SQS Client.\n\nBallerina provides a [config module](https:\/\/ballerina.io\/v1-1\/learn\/by-example\/config-api.html) to obtain parameters from the configuration file. Specify the configuration object and create the client as follows.\n\n```ballerina\nsqs:Configuration configuration = {\n    accessKey: config:getAsString(\"ACCESS_KEY_ID\"),\n    secretKey: config:getAsString(\"SECRET_ACCESS_KEY\"),\n    region: config:getAsString(\"REGION\"),\n    accountNumber: config:getAsString(\"ACCOUNT_NUMBER\")\n};\n\nsqs:Client sqsClient = new(configuration);\n```\n\n##### Sample\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.sqs;\n\n\/\/ Add the SQS credentials as the Configuration\nsqs:Configuration configuration = {\n    accessKey: \"<ACCESS_KEY>\",\n    secretKey: \"<SECRET_ACCESS>\",\n    region: \"<REGION>\",\n    accountNumber: \"<ACCOUNT_NUMBER>\"\n};\n\nsqs:Client sqsClient = new(configuration);\n\npublic function main(string... args) {\n\n    \/\/ Create a new SQS Standard queue named \"newQueue\"\n    map<string> attributes = {};\n    string|error response = sqsClient->createQueue(\"newQueue\", attributes);\n    if (response is string) {\n        log:printInfo(\"Created queue URL: \" + response);\n    } else {\n        log:printInfo(\"Error while creating a queue\");\n    }\n\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-aws.sqs", "keywords":["aws.sqs", "Amazon", "SQS", "Ballerina", "connector", "client"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620298815000, "modules":[{"name":"aws.sqs", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/aws.sqs/0.99.3", "packageUrl":"/ballerinax/aws.sqs/0.99.3"}], "pullCount":51}, {"organization":"ballerinax", "name":"aws.s3", "version":"0.99.4", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/aws.s3/0.99.4", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/aws.s3/0.99.4/ballerinax-aws.s3-java11-0.99.4.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Amazon S3 using Ballerina.", "readme":"# Ballerina Amazon S3 Connector \nConnects to Amazon S3 using Ballerina.\n\n# Introduction\n## Amazon S3\n[Amazon Simple Storage Service (Amazon S3)](https:\/\/aws.amazon.com\/s3\/) is an object storage service that offers industry-leading scalability, data availability, security, and performance.This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. \n\n## Key Features of Amazon S3\n* Manage buckets\n* Manage objects \n\n## Connector Overview\n\nThe Amazon S3 Connector allows you to access the Amazon S3 REST API through Ballerina. The following sections provide the details on client operations.\n\n**Buckets operations** - \nConnector contains operations that list the existing buckets, create a bucket, delete a bucket, and list objects in a bucket.\n\n**Objects operations** - \nConnector contains operations that create an object, delete an object, and retrieve an object.\n\n\n## Compatibility\n|                    |    Version                  |  \n|:------------------:|:---------------------------:|\n| Ballerina Language |   Swan Lake Alpha5          |\n|   Amazon S3 API    |   2006-03-01                |\n\n\n\n\n## Before you Begin\n\nYou need to get credentials such as **Access Key** and **Secret Access Key (API Secret)** from Amazon S3.\n\n#### Obtaining Access Keys\n\n 1. Create an Amazon account by visiting <https:\/\/aws.amazon.com\/s3\/>\n 2. Create a new access key, which includes a new secret access key.\n    - To create a new secret access key for your root account, use the [security credentials](https:\/\/console.aws.amazon.com\/iam\/home?#security_credential) page. Expand the Access Keys section, and then click **Create New Root Key**.\n    - To create a new secret access key for an IAM user, open the [IAM console](https:\/\/console.aws.amazon.com\/iam\/home?region=us-east-1#home). Click **Users** in the **Details** pane, click the appropriate IAM user, and then click **Create Access Key** on the **Security Credentials** tab.\n3. Download the newly created credentials, when prompted to do so in the key creation wizard.\n\nIn the directory where you have your sample, create a `Config.toml` file and add the details you obtained above within the quotes. region, trustStorePath and trustStorePassword are optionals.\n\n**Ballerina Config.toml file**\n\n```\naccessKeyId = \"\"\nsecretAccessKey = \"\"\nregion = \"\"\n```\n\n# Quickstart\n\n## Create a bucket\n### Step 1: Import the AWS S3 module\nFirst, import the `ballerinax\/aws.s3` module into the Ballerina project.\n```ballerina\nimport ballerinax\/aws.s3;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the S3 client config.\n```ballerina\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: <ACCESS_KEY_ID>,\n    secretAccessKey: <SECRET_ACCESS_KEY>,\n    region: <REGION>\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n```\n\n### Step 3: Set up all the data required to create the bucket\nThe `createBucket` remote function creates a bucket. The `bucketName` represents the name of the bucket that has to be created. This operation returns an `error` if unsuccessful. \n\n```ballerina\nstring bucketName = \"name\";\n```\n\n### Step 4: Create bucket\nThe response from `createBucket` is an `error` if creating the bucket was unsuccessful.\n\n```ballerina\n\/\/Create new bucket.\nerror? createBucketResponse = amazonS3Client->createBucket(bucketName);\nif (createBucketResponse is error) {\n    \/\/ If unsuccessful\n    log:printError(\"Error: \" + createBucketResponse.toString());\n} else {\n    \/\/ If successful\n    log:printInfo(\"Bucket Creation Status: Success\");\n}\n```\n\n# Samples\n\nSamples are available at : https:\/\/github.com\/ballerina-platform\/module-ballerinax-aws.s3\/tree\/master\/samples. To run a sample, create a new TOML file with name `Config.toml` in the same directory as the `.bal` file with above-mentioned configurable values.\n\n### Create a new bucket\n\nThis sample shows how to create a new bucket in AWS. The bucket name is required to do this operation. This operation returns an `error` if unsuccessful. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    s3:CannedACL cannedACL = s3:ACL_PRIVATE;\n    error? createBucketResponse = amazonS3Client->createBucket(bucketName, cannedACL);\n    if (createBucketResponse is error) {\n        log:printError(\"Error: \" + createBucketResponse.toString());\n    } else {\n        log:printInfo(\"Bucket Creation Status: Success\");\n    }\n}\n```\n\n### List all buckets\n\nThis sample shows how to list all buckets that are available in an authorized user's account. This operation returns array of `Bucket` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    var listBucketResponse = amazonS3Client->listBuckets();\n    if (listBucketResponse is s3:Bucket[]) {\n        log:printInfo(\"Listing all buckets: \");\n        foreach var bucket in listBucketResponse {\n            log:printInfo(\"Bucket Name: \" + bucket.name);\n        }\n    } else {\n        log:printError(\"Error: \" + listBucketResponse.toString());\n    }\n}\n```\n\n### Create a new object\n\nThis sample shows how to create a new object in a bucket. The bucket name, object name and file content are required to do this operation. This operation returns an `error` if unsuccessful. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    error? createObjectResponse = amazonS3Client->createObject(bucketName, \"test.txt\", \"Sample content\");\n    if (createObjectResponse is error) {\n        log:printError(\"Error: \"+ createObjectResponse.toString());\n    } else {\n        log:printInfo(\"Object created successfully\");\n    }\n}\n```\n\n### List all objects\n\nThis sample shows how to list all objects that are available in a bucket. This operation returns array of `S3Object` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() returns error? {\n    var listObjectsResponse = amazonS3Client->listObjects(bucketName);\n    if (listObjectsResponse is s3:S3Object[]) {\n        log:printInfo(\"Listing all object: \");\n        foreach var s3Object in listObjectsResponse {\n            log:printInfo(\"---------------------------------\");\n            log:printInfo(\"Object Name: \" + s3Object[\"objectName\"].toString());\n            log:printInfo(\"Object Size: \" + s3Object[\"objectSize\"].toString());\n        }\n    } else {\n        log:printError(\"Error: \" + listObjectsResponse.toString());\n    }\n}\n```\n\n### Get an object\n\nThis sample shows how to get an object that is available in a bucket. The bucket name and object name are required to do this operation. This operation returns a `S3Object` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerina\/lang.'string as strings;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() returns error? {\n    var getObjectResponse = amazonS3Client->getObject(bucketName, \"test.txt\");\n    if (getObjectResponse is s3:S3Object) {\n        log:printInfo(getObjectResponse.toString());\n        byte[]? byteArray = getObjectResponse[\"content\"];\n        if (byteArray is byte[]) {\n            string content = check strings:fromBytes(byteArray);\n            log:printInfo(\"Object content: \" + content);\n        }\n    } else {\n        log:printError(\"Error: \" + getObjectResponse.toString());\n    }\n}\n```\n\n### Delete an object\n\nThis sample shows how to delete an object that is available in a bucket. The bucket name and object name are required to do this operation. This operation returns an `error` if unsuccessful\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new(amazonS3Config);\n\npublic function main() {\n    error? deleteObjectResponse = amazonS3Client->deleteObject(bucketName, \"test.txt\");\n    if (deleteObjectResponse is error) {\n        log:printError(\"Error: \" + deleteObjectResponse.toString());\n    } else {\n        log:printInfo(\"Successfully deleted object\");\n    }\n}\n```\n\n### Delete a bucket\n\nThis sample shows how to delete a bucket that is available in an user's account. The bucket name is required to do this operation. This operation returns an `error` if unsuccessful\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    error? deleteBucketResponse = amazonS3Client->deleteBucket(bucketName);\n    if (deleteBucketResponse is error) {\n        log:printError(\"Error: \" + deleteBucketResponse.toString());\n    } else {\n        log:printInfo(\"Successfully deleted bucket\");\n    }\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-amazons3", "keywords":["ballerina", "aws.s3", "amazon", "client", "connector"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620299340000, "modules":[{"name":"aws.s3", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/aws.s3/0.99.4", "packageUrl":"/ballerinax/aws.s3/0.99.4"}], "pullCount":44}, {"organization":"ballerinax", "name":"azure_eventhub", "version":"0.1.3", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/azure_eventhub/0.1.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/azure_eventhub/0.1.3/ballerinax-azure_eventhub-java11-0.1.3.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Azure Event Hubs Module\n\nConnects to Microsoft Azure Event Hubs using Ballerina.\n\n# Module Overview\n\nAzure Event Hubs Ballerina Connector is used to connect with the Azure Event Hubs to ingest millions of events per \nsecond so that you can process and analyze the massive amounts of data produced by your connected devices and \napplications. Once data is collected into an Event Hub, it can be transformed and stored using any real-time \nanalytics provider or batching\/storage adapters.\n\nAzure Event Hub Ballerina connector supports Event hub service operations like sending an event, sending batch events, \nsending partition events and sending events with partition ID. It also supports Event hub management operations like \ncreating a new event hub, getting an event hub, updating an event hub, listing event hubs, deleting event hubs, \ncreating a new consumer group, getting consumer groups, listing consumer groups, listing partitions, getting partitions, \ndeleting consumer groups. The connector also provides the capability to handle publisher policy operations like getting \nrevoked publishers, revoking a publisher, and resume publishers.\n\nThe connector will only be focusing on sending events to the event hub. The event hub connector will invoke the \nREST APIs exposed via the Azure Event Hub. https:\/\/docs.microsoft.com\/en-us\/rest\/api\/eventhub\/.\n\nThe REST APIs fall into the following categories:\n* Azure Resource Manager: APIs that perform resource manager operations, and have \/providers\/Microsoft.EventHub\/ as part \n  of the request URI.\n* Event Hubs service: APIs that enable operations directly on the Event Hubs service, and have \n  <namespace>.servicebus.windows.net\/ in the request URI. The Event Hubs service API is focused on this implementation.\n\n# Compatibility\n|                     |    Version          |\n|:-------------------:|:-------------------:|\n| Ballerina Language  | Swan-Lake-Alpha5    |\n\n# Supported Operations\n\n## Azure Event Hubs Service Operations\nThe `ballerinax\/azure_eventhub` module contains operations related to accessing the Event Hubs service to perform \noperations on event hubs. It includes operations to send event, send event with broker properties and user properties, \nsend event with partition key, send partition event, send batch events, send events with partition key, send batch \nevent with publisher ID. \n\n## Azure Event Hubs Management Operations\nThe `ballerinax\/azure_eventhub` module contains operations related to accessing the Event Hubs service to performing \nmanagement operations on Event Hubs. It includes operations to create new event hub, get an event hub, \nupdate an event hub, list event hubs, delete an event hub, create a new consumer group, get consumer group, \nlist consumer groups, list partitions, get partition, delete a consumer group. \n\n## Azure Event Hubs Publisher Policy Operations\nThe `ballerinax\/azure_eventhub` module contains operations related to performing publisher policy operations on \nevent hubs. It includes operations to revoke publisher, get revoked publishers, resume upblisher.\n\n# Prerequisites:\n\n* Azure Account to Access Azure Portal https:\/\/docs.microsoft.com\/en-us\/learn\/modules\/create-an-azure-account\/\n\n* A Resource Group https:\/\/docs.microsoft.com\/en-us\/azure\/event-hubs\/event-hubs-create#create-a-resource-group\n\n* An Event Hubs Namespace https:\/\/docs.microsoft.com\/en-us\/azure\/event-hubs\/event-hubs-create#create-an-event-hubs-namespace\n\n* An Event Hub https:\/\/docs.microsoft.com\/en-us\/azure\/event-hubs\/event-hubs-create#create-an-event-hub \n\n* Connection String of the Event Hub Namespace\nWe need management credentials to communicate with the Event Hubs. These credentials are available in the connection \nstring of the Event Hub namespace. Obtain the connection string for the Event Hubs namespace by following the \ninstructions given below.\nhttps:\/\/docs.microsoft.com\/en-us\/azure\/event-hubs\/event-hubs-get-connection-string#get-connection-string-from-the-portal\n\n* Shared Access Signature (SAS) Authentication Credentials\nYou need to extract the Shared Access Key Name, Shared Access Key, Resource URI to the Event Hub Namespace separately \nfrom the connection string.\n    * Shared Access Key Name, \n    * Shared Access Key, \n    * Resource URI to the Event Hub Namespace.\n\n# Quickstart(s):\n\n## Publish Events to an Azure Event Hub \n\nThis is the simplest scenario to send events to an Azure Event Hub. You need to obtain a connection string of the \nname space of the event hub you want to send events. \n\n### Step 1: Import the Azure Event Hub Ballerina Library\nFirst, import the ballerinax\/azure_eventhub module into the Ballerina project.\n```ballerina\n    import ballerinax\/azure_eventhub;\n```\n\n### Step 2: Initialize the Azure Event Hub PublisherClient\nYou can now make the connection configuration using the shared access key name, shared access key, and the resource \nURI to the event hub namespace.\n```ballerina\n    configurable string sasKeyName = ?;\n    configurable string sasKey = ?;\n    configurable string resourceUri = ?;\n\n    azure_eventhub:ClientEndpointConfiguration config = {\n        sasKeyName: sasKeyName,\n        sasKey: sasKey,\n        resourceUri: resourceUri \n    };\n    azure_eventhub:Client publisherClient = checkpanic new (config);\n```\nNote:\nYou must specify the SAS key name, SAS key and the resource URI when configuring the Azure Event Hub Client connector.\n\n### Step 3: Specify the (Optional) Broker Properties and User Properties\nYou can now define the optional broker properties and user properties to be sent with the event using a map.\n```ballerina\n    map<string> brokerProps = {CorrelationId: \"34\", CorrelationId2: \"83\"};\n    map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n```\n\n### Step 4: Send an event to the Azure Event Hub\nYou can now send an event to the Azure event hub by giving the event hub name, and the event hub data with the broker \nproperties and user properties. You can also give a partition key to send events to the same partition with the given \npartition key name. Here we have sent an event with the string data “eventData” to the event hub named “mytesthub” with \nthe partition key “groupName”.\n```ballerina\n    var sendResult = publisherClient->send(\"mytesthub\", \"eventData\", userProps, brokerProps, partitionKey = \"groupName\");\n    if (sendResult is error) {\n            log:printError(sendResult.message());\n    } else {\n            log:printInfo(\"Successfully Send Event to Event Hub!\");\n    }\n```\nNote:\nYou can specify the event hub path and the event data as parameters of the send method.\nThis operation will return a ballerina error if the operation failed.\n\n\n## Entity Management in an Azure Event Hub \nThis is the simplest scenario to manage entities related to azure event hubs. You need to obtain a connection string of \nthe name space of the event hub you want to send events. \n\n### Step 1: Import the Azure Event Hub Ballerina Library\nFirst, import the ballerinax\/azure_eventhub module into the Ballerina project.\n```ballerina\n    import ballerinax\/azure_eventhub;\n```\n\n### Step 2: Initialize the Azure Event Hub ManagementClient\nYou can now make the connection configuration using the shared access key name, shared access key, and the resource URI \nto the event hub namespace.\n```ballerina\n    configurable string sasKeyName = ?;\n    configurable string sasKey = ?;\n    configurable string resourceUri = ?;\n\n    azure_eventhub:ClientEndpointConfiguration config = {\n        sasKeyName: sasKeyName,\n        sasKey: sasKey,\n        resourceUri: resourceUri \n    };\n    azure_eventhub:Client managementClient = checkpanic new (config);\n```\nNote:\nYou must specify the SAS key name, SAS key and the resource URI when configuring the Azure Event Hub Client connector.\n\n### Step 3: Create a new event hub\nYou need to specify the event hub name as a parameter to create a new event hub. Here we are creating an event hub \nnamed “mytesthub”. \n```ballerina\n    var createResult = managementClient->createEventHub(\"mytesthub\");\n    if (createResult is error) {\n        log:printError(createResult.message());\n    }\n    if (createResult is azure_eventhub:EventHub) {\n        log:printInfo(createResult.toString());\n        log:printInfo(\"Successfully Created Event Hub!\");\n    }\n\n```\nNote:\nYou can specify the event hub path as a parameter of the createEventHub method.\nThis operation will return a ballerina error if the operation failed.\n\n\n### Step 4: Get an event hub \nYou need to specify the event hub name as a parameter to get all the metadata associated with the specified event hub. \nHere we are getting all the metadata associated with the event hub named “mytesthub”.\n```ballerina\n    var getEventHubResult = managementClient->getEventHub(\"mytesthub\");\n    if (getEventHubResult is error) {\n        log:printError(getEventHubResult.message());\n    }\n    if (getEventHubResult is azure_eventhub:EventHub) {\n        log:printInfo(getEventHubResult.toString());\n        log:printInfo(\"Successfully Get Event Hub!\");\n    }\n```\nNote:\nYou can specify the event hub path as a parameter of the getEventHub method.\nThis operation will return a ballerina error if the operation failed.\n\n### Step 5: Update an event hub \nYou need to specify the event hub name as a parameter and EventHubDecsriptionToUpdate record with message retention in \ndays property to update the properties of the event hub. Here we are updating the properties associated with the event \nhub named “mytesthub”.\n```ballerina\n    azure_eventhub:EventHubDescriptionToUpdate eventHubDescriptionToUpdate = {\n        MessageRetentionInDays: 5\n    };\n    var updateResult = managementClient->updateEventHub(\"mytesthub\", eventHubDescriptionToUpdate);\n    if (updateResult is error) {\n        log:printError(updateResult.message());\n    }\n    if (updateResult is azure_eventhub:EventHub) {       \n        log:printInfo(updateResult.toString());\n        log:printInfo(\"Successfully Updated Event Hub!\");\n    }\n```\nNote:\nYou can specify the event hub path and event hub description of  record type EventHubDescriptionToUpdate as a parameter \nof the updateEventHub method.\nThis operation will return a ballerina error if the operation failed.\n\n### Step 6: List event hubs\nYou need to specify the event hub name as a parameter to get all the metadata associated with the specified event hubs \nin the namespace. Here we are getting all the metadata associated with the event hubs in the specified namespace.\n```ballerina\n    var listResult = managementClient->listEventHubs();\n    if (listResult is error) {\n        log:printError(listResult.message());\n    }\n    if (listResult is stream<azure_eventhub:EventHub>) {\n        _ = listResult.forEach(isolated function (azure_eventhub:EventHub eventHub) {\n                log:printInfo(eventHub.toString());\n            });\n        log:printInfo(\"Successfully Listed Event Hubs!\");\n    }\n```\nNote:\nThis operation will return a ballerina error if the operation failed.\n\n### Step 7: Delete a event hub\nYou need to specify the event hub name as a parameter to delete an event hub. This is the basic scenario of deleting \nan event hub named “mytesthub”. \n```ballerina\n    var deleteResult = managementClient->deleteEventHub(\"mytesthub\");\n    if (deleteResult is error) {\n        log:printError(msg = deleteResult.message());\n    } else {\n        log:printInfo(\"Successfully Deleted Event Hub!\");\n    }\n```\nNote:\nYou can specify the event hub path as a parameter of the deleteEventHub method.\nThis operation will return a ballerina error if the operation failed.\n\n# Samples:\n\n1. Sending an event.\n\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->send(\"myhub\", \"eventData\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_event.bal\n\n2. Sending an event with broker properties and user properties.\n\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {\"CorrelationId\": \"32119834\", \"CorrelationId2\": \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n   var result = eventHubClient->send(\"myhub\", \"eventData\", userProps, brokerProps);\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_event_with_broker_and_user_properties.bal\n\n3. Sending an event with broker properties, user properties & partition key.\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {PartitionKey: \"groupName1\", CorrelationId: \"32119834\";\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n   var result = eventHubClient->send(\"myhub\", \"data\", userProps, brokerProps, partitionKey = \"groupName\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_event_with_partition_key.bal\n\n4. Sending an event with broker properties, user properties & partition id.\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {CorrelationId: \"32119834\", CorrelationId2: \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n   var result = eventHubClient->send(\"myhub\", \"data\", userProps, brokerProps, partitionId = 1);\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_partition_event.bal\n\n5. Sending a batch event.\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {CorrelationId: \"32119834\", CorrelationId2: \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n    eventhub:BatchEvent batchEvent = {\n        events: [\n            {data: \"Message1\"},\n            {data: \"Message2\", brokerProperties: brokerProps},\n            {data: \"Message3\", brokerProperties: brokerProps, userProperties: userProps}\n        ]\n    };\n    var result = eventHubClient->sendBatch(\"myhub\", batchEvent);\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_batch_event.bal\n\n6. Sending a batch event with partition key.\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {PartitionKey: \"groupName\", CorrelationId: \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n    eventhub:BatchEvent batchEvent = {\n        events: [\n            {data: \"Message1\"},\n            {data: \"Message2\", brokerProperties: brokerProps},\n            {data: \"Message3\", brokerProperties: brokerProps, userProperties: userProps}\n        ]\n    };\n    var result = eventHubClient->sendBatch(\"myhub\", batchEvent, partitionKey = \"groupName\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_batch_event_with_partition_key.bal\n\n7. Sending a batch event to partition.\n```ballerina\nimport ballerinax\/azure_eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {CorrelationId: \"32119834\", CorrelationId2: \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n    eventhub:BatchEvent batchEvent = {\n        events: [\n            {data: \"Message1\"},\n            {data: \"Message2\", brokerProperties: brokerProps},\n            {data: \"Message3\", brokerProperties: brokerProps, userProperties: userProps}\n        ]\n    };\n    var result = eventHubClient->sendBatch(\"myhub\", batchEvent, partitionId = 1);\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_batch_event_to_partition.bal\n\n8. Sending a batch event with publisher id\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   map<string> brokerProps = {CorrelationId: \"32119834\", CorrelationId2: \"32119834\"};\n   map<string> userProps = {Alert: \"windy\", warning: \"true\"};\n\n    eventhub:BatchEvent batchEvent = {\n        events: [\n            {data: \"Message1\"},\n            {data: \"Message2\", brokerProperties: brokerProps},\n            {data: \"Message3\", brokerProperties: brokerProps, userProperties: userProps}\n        ]\n    };\n    var result = eventHubClient->sendBatch(\"myhub\", batchEvent, publisherId = \"device-1\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/send_batch_event_with_publisherId.bal\n\n9. Create a new event hub\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->createEventHub(\"myhub\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/create_event_hub.bal\n\n10. Get an event hub\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->getEventHub(\"myhub\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/get_event_hub.bal\n\n\n11. Delete a event hub\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->deleteEventHub(\"myhub\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/delete_event_hub.bal\n\n12. Create a new consumer group\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->createConsumerGroup(\"myhub\", \"groupName\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/create_consumer_group.bal\n\n13. Get consumer group\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->getConsumerGroup(\"myhub\", \"groupName\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/get_consumer_group.bal\n\n\n14. Delete a consumer group\n```ballerina\nimport ballerinax\/azure.eventhub as eventhub;\n\npublic function main() {\n   eventhub:ClientEndpointConfiguration config = {\n       sasKeyName: \"<sas_key_name>\",\n       sasKey: \"<sas_key>\",\n       resourceUri: \"<resource_uri>\"\n   };\n   eventhub:Client eventHubClient = checkpanic new (config);\n   var result = eventHubClient->deleteConsumerGroup(\"myhub\", \"groupName\");\n}\n```\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure.eventhub\/blob\/master\/samples\/delete_consumer_groups.bal", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-azure.eventhub", "keywords":["Azure", "Eventhub"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620276506000, "modules":[{"name":"azure_eventhub", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/azure_eventhub/0.1.3", "packageUrl":"/ballerinax/azure_eventhub/0.1.3"}], "pullCount":41}, {"organization":"ballerinax", "name":"mongodb", "version":"2.0.7", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/mongodb/2.0.7", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/mongodb/2.0.7/ballerinax-mongodb-java11-2.0.7.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to MongoDB from ballerina ", "readme":"# Ballerina MongoDB Connector\n\nConnects to MongoDB from ballerina \n\n## Module Overview\n\nThe Mongo DB connector allows you to connect to a Mongo DB from Ballerina and perform various operations such as `getDatabaseNames`, `getCollectionNames`, `count`, `listIndices`, `find`, `insert`, `update`, and `delete`.\n\n## Prerequisites\n\n* A mongodb with username and password\n\n* Java 11 Installed <br\/> Java Development Kit (JDK) with version 11 is required.\n\n* Ballerina SLAlpha5 Installed <br\/> Ballerina Swan Lake Alpha 5 is required.\n\n## Compatibility\n\n|                             |       Version               |\n|:---------------------------:|:---------------------------:|\n| Ballerina Language          | Swan Lake Alpha 5           |\n| Mongo DB                    | V4.2.0                      |\n\n\n## Quickstart(s)\n\n## Insert a document\n\n### Step 1: Import the Mongo DB module\nFirst, import the `ballerinax\/mongodb` module into the Ballerina project.\n```ballerina\nimport ballerinax\/mongodb;\n```\n### Step 2: Set up configurable values\nYou can add required variables as configurable values in the ballerina file and can add those values in `Config.toml` file. \n1. In Ballerina file \n```ballerina\nconfigurable string host = ?;\nconfigurable int port = ?;\nconfigurable string username = ?;\nconfigurable string password = ?;\nconfigurable string database = ?;\nconfigurable string collection = ?;\n```\n2. In Config.toml\n\n```\nhost = \"<YOUR_HOST_NAME>\"\"\nport = <PORT>\nusername = \"<DB_USERNAME>\"\npassword = \"<DB_PASSWORD>\"\n\ndatabase = \"<DATABASE_NAME>\"\ncollection = \"<COLLECTION_NAME>\"\n```\n\n### Step 3: Initialize the Mongodb Client giving necessary credentials\n\nYou can now enter the credentials in the mongo client config. If you use this client for a particular database then you can pass the database name along with config during client initialization(It is optional). Otherwise you can pass the database name for each remote method call. This is not recommended unless you need to connect more than one database using a client. You need to set the database using atleast one of these methods.\n```ballerina\nmongodb:ClientConfig mongoConfig = {\n        host: host,\n        port: port,\n        username: username,\n        password: password,\n        options: {sslEnabled: false, serverSelectionTimeout: 5000}\n    };\n\n    mongodb:Client mongoClient = checkpanic new (mongoConfig, database);\n```\n### Step 4: Insert the document\nYou can invoke the remote method `insert` to insert the document.\n```ballerina\nmap<json> doc = { \"name\": \"Gmail\", \"version\": \"0.99.1\", \"type\" : \"Service\" };\n\n    checkpanic  mongoClient->insert(doc, collection);\n```\n### Step 5: Close the db client connection. \n\n```ballerina\nmongoClient->close();\n```\n\n## Sample\n\nYou can find samples here : https:\/\/github.com\/ballerina-platform\/module-ballerinax-mongodb\/blob\/master\/mongodb\/samples\/\n\n### All operations in a single sample\n\nFirst, import the `ballerinax\/mongodb` module into the Ballerina project.\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/mongodb;\n\npublic function main() {\n\n    mongodb:ClientConfig mongoConfig = {\n        host: \"localhost\",\n        port: 27017,\n        username: \"admin\",\n        password: \"admin\",\n        options: {sslEnabled: false, serverSelectionTimeout: 5000}\n    };\n\n    mongodb:Client mongoClient = checkpanic new (mongoConfig, \"Ballerina\");\n\n    map<json> doc1 = { \"name\": \"ballerina\", \"type\": \"src\" };\n    map<json> doc2 = { \"name\": \"connectors\", \"type\": \"artifacts\" };\n    map<json> doc3 = { \"name\": \"docerina\", \"type\": \"src\" };\n    map<json> doc4 = { \"name\": \"test\", \"type\": \"artifacts\" };\n\n    log:printInfo(\"------------------ Inserting Data -------------------\");\n    checkpanic mongoClient->insert(doc1,\"projects\");\n    checkpanic mongoClient->insert(doc2,\"projects\");\n    checkpanic mongoClient->insert(doc3,\"projects\");\n    checkpanic mongoClient->insert(doc4,\"projects\");\n  \n    log:printInfo(\"------------------ Counting Data -------------------\");\n    int count = checkpanic mongoClient->countDocuments(\"projects\",());\n    log:printInfo(\"Count of the documents '\" + count.toString() + \"'.\");\n\n\n    log:printInfo(\"------------------ Querying Data -------------------\");\n    map<json>[] jsonRet = checkpanic mongoClient->find(\"projects\",(),());\n    log:printInfo(\"Returned documents '\" + jsonRet.toString() + \"'.\");\n\n    map<json> queryString = {\"name\": \"connectors\" };\n    jsonRet = checkpanic mongoClient->find(\"projects\", (), queryString);\n    log:printInfo(\"Returned Filtered documents '\" + jsonRet.toString() + \"'.\");\n\n\n    log:printInfo(\"------------------ Updating Data -------------------\");\n    map<json> replaceFilter = { \"type\": \"artifacts\" };\n    map<json> replaceDoc = { \"name\": \"main\", \"type\": \"artifacts\" };\n\n    int response = checkpanic mongoClient->update(replaceDoc,\"projects\", (), replaceFilter, true);\n    if (response > 0 ) {\n        log:printInfo(\"Modified count: '\" + response.toString() + \"'.\") ;\n    } else {\n        log:printInfo(\"Error in replacing data\");\n    }\n\n   log:printInfo(\"------------------ Deleting Data -------------------\");\n   map<json> deleteFilter = { \"name\": \"ballerina\" };\n   int deleteRet = checkpanic mongoClient->delete(\"projects\", (), deleteFilter, true);\n   if (deleteRet > 0 ) {\n       log:printInfo(\"Delete count: '\" + deleteRet.toString() + \"'.\") ;\n   } else {\n       log:printInfo(\"Error in deleting data\");\n   }\n\n     mongoClient->close();\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-mongodb", "keywords":["MongoDB", "NoSQL"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620191987000, "modules":[{"name":"mongodb", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/mongodb/2.0.7", "packageUrl":"/ballerinax/mongodb/2.0.7"}], "pullCount":40}, {"organization":"ballerinax", "name":"googleapis.people", "version":"0.1.1", "platform":"any", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/googleapis.people/0.1.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.people/0.1.1/ballerinax-googleapis.people-any-0.1.1.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Google People using Ballerina.", "readme":"# Ballerina Google People Connector \nConnects to Google People using Ballerina.\n\n# Introduction\n## Google People\n[Google People](https:\/\/developers.google.com\/people) is a contact-management service developed by Google. It lets users to organize their schedule and share events with others. The Google People endpoint allows you to access the Google People API Version v1 through Ballerina.\n\n## Key Features of Google People\n* Manage Contacts\n* Manage Contact Groups\n\n## Connector Overview\n\nThe Google People Ballerina Connector allows you to access the Google People API Version V1 through Ballerina. The connector can be used to implement some of the most common use cases of Google People. The connector provides the capability to programmatically manage contacts and contact groups, CRUD operations on contacts and contact groups operations through the connector endpoints and listener for the events created in the contacts.\n\n# Prerequisites\n\n* Java 11 Installed\n  Java Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https:\/\/ballerinalang.org\/downloads\/) SLAlpha5\n  Ballerina Swan Lake Alpha Version 5 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for BasicAuth and OAuth 2.0. Google People uses OAuth 2.0 to authenticate and authorize requests. \n  * The Google People connector can be minimally instantiated in the HTTP client config using client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n  * In order to use listener address, resource id and channel id are additionally required. Address URL is url path of the listener. Channel id and resource id will be provided when channel is registered using watch operation.\n    * Address URL\n    * Resource ID\n    * Channel ID\n\n## Compatibility\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n|    Ballerina Language       |       Swan Lake Alpha 5         |\n|     Google People API       |               V1                |\n\n\nInstantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for OAuth 2.0. Google People uses OAuth 2.0 to authenticate and authorize requests. The Google People connector can be minimally instantiated in the HTTP client config using client ID, client secret, and refresh token.\n\n**Obtaining Tokens to Run the Sample**\n\n1. Visit [Google API Console](https:\/\/console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https:\/\/developers.google.com\/oauthplayground if you want to use \n[OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https:\/\/developers.google.com\/oauthplayground), select the required Google People API scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token. \n\n**Add project configurations file**\n\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n#### For client operations\n```\n[ballerinax.googleapis.people]\nclientId = \"<client_id\">\nclientSecret = \"<client_secret>\"\nrefreshToken = \"<refresh_token>\"\nrefreshUrl = \"<refresh_URL>\"\n\n```\n```\n# **Samples**\n\n### Create a Contact\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n    \/\/ Create Person\/Contact with given name\n    contacts:Person person = {\n        \"emailAddresses\": [],\n        \"names\": [{\n            \"familyName\": \"Hardy\",\n            \"givenName\": \"Jason\",\n            \"unstructuredName\": \"Jason Hardy\"\n        }]\n    };\n    contacts:FieldMask[] personFields = [contacts:NAME, contacts:PHONE_NUMBER, contacts:EMAIL_ADDRESS];\n    contacts:PersonResponse|error createContact = googleContactClient->createContact(person, personFields);\n    if (createContact is contacts:PersonResponse) {\n        log:printInfo(\"Person\/Contacts Details: \" + createContact.toString());\n        log:printInfo(createContact.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + createContact.toString());\n    }\n}\n```\n### Fetch a Contact\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n    string contactResourceName = \"\";\n    contacts:Person person = {\n        \"emailAddresses\": [],\n        \"names\": [{\n            \"familyName\": \"Hardy\",\n            \"givenName\": \"Jason\",\n            \"unstructuredName\": \"Jason Hardy\"\n        }]\n    };\n    contacts:FieldMask[] personFields = [contacts:NAME, contacts:PHONE_NUMBER, contacts:EMAIL_ADDRESS];\n    contacts:PersonResponse|error createContact = googleContactClient->createContact(person, personFields);\n    if (createContact is contacts:PersonResponse) {\n        contactResourceName = <@untainted>createContact.resourceName;\n        log:printInfo(\"Person\/Contacts Details: \" + createContact.toString());\n        log:printInfo(createContact.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + createContact.toString());\n    }\n\n    \/\/ Fetch information about Person\/Contact\n    contacts:FieldMask[] getPersonFields = [NAME, PHONE_NUMBER, EMAIL_ADDRESS];\n    contacts:PersonResponse|error getResponse = googleContactClient->getPeople(contactResourceName, getPersonFields);\n    if (getResponse is contacts:PersonResponse) {\n        log:printInfo(\"Person\/Contacts Details: \" + getResponse.toString());\n        log:printInfo(getResponse.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + getResponse.toString());\n    }\n}\n```\n### Search a Contact using a string value\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n    \/\/ Search a Person\/Contact with a string\n    contacts:FieldMask[] readMasks = [contacts:NAME, contacts:PHONE_NUMBER, contacts:EMAIL_ADDRESS];\n    contacts:PersonResponse[]|error response = googleContactClient->searchContacts(\"Test\");\n    if (response is contacts:PersonResponse[]) {\n        log:printInfo(\"Person\/Contacts Details: \" + response.toString());\n    } else {\n        log:printError(\"Error: \" + response.toString());\n    }\n}\n```\n\n### Delete a Contact\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n\n    string contactResourceName = \"\";\n\n    contacts:Person person = {\n        \"emailAddresses\": [],\n        \"names\": [{\n            \"familyName\": \"Hardy\",\n            \"givenName\": \"Jason\",\n            \"unstructuredName\": \"Jason Hardy\"\n        }]\n    };\n    contacts:FieldMask[] personFields = [contacts:NAME, contacts:PHONE_NUMBER, contacts:EMAIL_ADDRESS];\n    contacts:PersonResponse|error createContact = googleContactClient->createContact(person, personFields);\n    if (createContact is contacts:PersonResponse) {\n        contactResourceName = <@untainted>createContact.resourceName;\n        log:printInfo(\"Person\/Contacts Details: \" + createContact.toString());\n        log:printInfo(createContact.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + createContact.toString());\n    }\n\n    \/\/ Delete a contact\n    var deleteContact = googleContactClient->deleteContact(contactResourceName);\n    if (deleteContact is ()) {\n        log:printInfo(\"Deleted a Contact\");\n    } else {\n        log:printError(deleteContact.toString());\n    }\n}\n```\n\n### Create a Contact Group\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n    \/\/ Create Contact Group with given name\n    var createContactGroup = googleContactClient->createContactGroup(\"TestContactGroup\");\n    if (createContactGroup is contacts:ContactGroup) {\n        log:printInfo(\"Contact Group Details: \" + createContactGroup.toString());\n        log:printInfo(createContactGroup.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + createContactGroup.toString());\n    }\n}\n```\n### Fetch a Contact Group\n```ballerina\nimport ballerinax\/googleapis.people as contacts;\nimport ballerina\/log;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\ncontacts:GoogleContactsConfiguration googleContactConfig = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: contacts:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\ncontacts:Client googleContactClient = checkpanic new (googleContactConfig);\n\npublic function main() {\n    string contactGroupResourceName = \"\";\n    \/\/ Create Contact Group with given name\n    var createContactGroup = googleContactClient->createContactGroup(\"TestContactGroup\");\n    if (createContactGroup is contacts:ContactGroup) {\n        log:printInfo(\"Contact Group Details: \" + createContactGroup.toString());\n        contactGroupResourceName = createContactGroup.resourceName;\n        log:printInfo(createContactGroup.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + createContactGroup.toString());\n    }\n\n    \/\/ Fetch information about Contact Group  \n    contacts:ContactGroup|error getResponse = googleContactClient->getContactGroup(contactGroupResourceName, 10);\n    if (getResponse is contacts:ContactGroup) {\n        log:printInfo(\"Contact Group Details: \" + getResponse.toString());\n        log:printInfo(getResponse.resourceName.toString());\n    } else {\n        log:printError(\"Error: \" + getResponse.toString());\n    }\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-googleapis.people", "keywords":["google", "people", "contact"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620152982000, "modules":[{"name":"googleapis.people", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/googleapis.people/0.1.1", "packageUrl":"/ballerinax/googleapis.people/0.1.1"}], "pullCount":37}]
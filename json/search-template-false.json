{"packages":[{"organization":"ballerinax", "name":"choreo", "version":"0.2.4", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/choreo/0.2.4", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/choreo/0.2.4/ballerinax-choreo-java11-0.2.4.bala", "summary":"", "readme":"## Package Overview\n\nThe Choreo Observability Extension is one of the observability extensions of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\/\"> Ballerina<\/a> language.\n\nIt provides an implementation for publishing traces & metrics to Choreo.\n\n## Enabling Choreo Extension\n\nTo package the Choreo extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax\/choreo as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and connect to Choreo, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nenabled=true\nprovider=\"choreo\"\n```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619702325000, "modules":[], "pullCount":1672}, {"organization":"ballerina", "name":"io", "version":"0.6.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/io/0.6.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/io/0.6.0-alpha8/ballerina-io-java11-0.6.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThe following diagram depicts the overview architecture of the I\/O package.\n\n![architecture](.\/resources\/package-architecture.svg)\n\nThe I\/O package allows you to read from the console or a file. \nFurther, the file I\/O operations can be categorized based on serialization and deserialization types such as:\n- Bytes I\/O\n- Strings I\/O\n- CSV I\/O\n- JSON I\/O\n- XML I\/O\n\n\n### Console I\/O\nThe console I\/O APIs, which help the user to read from the console as well as write to the console are as follows.\n- print\n- println\n- readln\n\n### Bytes I\/O\nThe bytes I\/O APIs provide the reading and writing APIs in both streaming and non-streaming ways. Those APIs are,\n- `io:fileReadBytes`\n- `io:fileReadBlocksAsStream`\n- `io:fileWriteBytes`\n- `io:fileWriteBlocksFromStream`\n\nTo learn how to use bytes read and write APIs, see the [Read\/Write Bytes example](https:\/\/ballerina.io\/learn\/by-example\/bytes-io.html).\n\n### Strings I\/O\nThe strings I\/O APIs provide the reading and writing APIs in 3 different ways:\n1. Read the whole file content as a string and write a given string to a file\n1. Read the whole file content as a set of lines and write a given set of lines to a file\n1. Read the whole file content as a stream of lines and write a given stream of lines to a file\n\nThe strings I\/O APIs are as follows:\n- `io:fileReadString`\n- `io:fileReadLines`\n- `io:fileReadLinesAsStream`\n- `io:fileWriteLines`\n- `io:fileWriteLinesFromStream`\n\nTo learn how to use strings read and write APIs, see the  [Read\/Write Strings example](https:\/\/ballerina.io\/learn\/by-example\/strings-io.html).\n\n### CSV I\/O\nThe CSV I\/O APIs provide the reading and writing APIs in both streaming and non-streaming ways. Those APIs are,\n- `io:fileReadCsv`\n- `io:fileReadCsvAsStream`\n- `io:fileWriteCsv`\n- `io:fileWriteCsvFromStream`\n\nTo learn how to use CSV read and write APIs, see the [Read\/Write CSV example](https:\/\/ballerina.io\/learn\/by-example\/csv-io.html).\n\n### JSON I\/O\nThe JSON I\/O APIs provide the reading and writing APIs for JSON content. Those APIs are,\n- `io:fileReadJson`\n- `io:fileWriteJson`\n\nTo learn how to use JSON read and write APIs, see the [Read\/Write JSON example](https:\/\/ballerina.io\/learn\/by-example\/json-io.html).\n\n### XML I\/O\nThe XML I\/O APIs provide the reading and writing APIs for XML content. Those APIs are,\n- `io:fileReadXml`\n- `io:fileWriteXml`\n\nTo learn how to use XML read and write APIs, see the [Read\/Write XML example](https:\/\/ballerina.io\/learn\/by-example\/json-io.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190248000, "modules":[], "pullCount":1122}, {"organization":"ballerina", "name":"time", "version":"2.0.0-alpha9", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/time/2.0.0-alpha9", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/time/2.0.0-alpha9/ballerina-time-java11-2.0.0-alpha9.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides implementations related to the UTC and localized time. In the world of cloud computing, the most essential type of time is UTC. \nTherefore, the more focus on this module is to give the most precise UTC and also handle some complex use cases such as leap seconds and daylight time-saving.\n\n### UTC Time\nThe `time:Utc` is the tuple representation of the UTC. The UTC represents the number of seconds from a\nspecified epoch. Here, the epoch is the UNIX epoch of 1970-01-01T00:00:00Z.\n\nUse the following API to get the current epoch time:\n```ballerina\ntime:Utc utc = time:utcNow();\n```\n\n### Monotonic Time\nThe monotonic time represents the number of seconds from an unspecified epoch.\n\nUse the following API to get the monotonic time from an unspecified topic:\n```ballerina\ndecimal seconds = time:monotonicNow();\n```\n\n### Civil Time\nThe localized time represents using `time:Civil` record. It includes the following details:\n- date\n- time\n- timezone information\n- daylight time-saving information\n\n### APIs\nParallel to the aforementioned time representations, this package includes a set of APIs to facilitate time conversions\nand manipulations using a set of high-level APIs. Those conversion APIs can be listed as follows.\n\n### The String Representations of UTC\n```ballerina\n\/\/ Converts from RFC 3339 timestamp to UTC\ntime:Utc utc = check time:utcFromString(\"2007-12-0310:15:30.00Z\");\n\n\/\/ Converts a given time:Utc time to a RFC 3339 timestamp\nstring utcString = time:utcToString(utc);\n```\n\n### The String Representations of Civil\n```ballerina\n\/\/ Converts from RFC 3339 timestamp to a civil record\ntime:Civil civil2 = check time:civilFromString(\"2007-12-03T10:15:30.00Z\");\n\n\/\/ Converts a given time:Civil time to a RFC 3339 timestamp\nstring civilString = check time:civilToString(civil);\n```\n\n### UTC Value Manipulation\n```ballerina\n\/\/ Returns the UTC time that occurs seconds after the given UTC\ntime:Utc utc = time:utcAddSeconds(time:utcNow(), 20.900);\n\n\/\/ Returns difference in seconds between two given UTC time values\ntime:Utc utc1 = time:utcNow();\ntime:Utc utc2 = check time:utcFromString(\"2021-04-12T23:20:50.520Z\");\ntime:Seconds seconds = time:utcDiffSeconds(utc1, utc2);\n```\n\n### UTC vs Civil\n```ballerina\n\/\/ Converts a given UTC to a Civil\ntime:Civil civil = time:utcToCivil(utc);\n\n\/\/ Converts a given Civil to an UTC\ntime:Utc utc = time:utcFromCivil(civil);\n```\n\nTo learn more about these APIs, see the [time example](https:\/\/ballerina.io\/learn\/by-example\/time.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190193000, "modules":[], "pullCount":620}, {"organization":"ballerina", "name":"log", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/log/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/log/1.1.0-alpha8/ballerina-log-java11-1.1.0-alpha8.bala", "summary":"This package provides a basic API for logging.", "readme":"## Package Overview\n\nThis package provides a basic API for logging.\n\n### Log record \n\nA log record contains the timestamp, log level, module name, and the log message.\nUsers can pass any number of key\/value pairs which needs to be displayed in the log message.\nThese can be of `anydata` type including int, string and boolean.\n\nA sample log record logged from the `foo` module would look as follows:\n```bash\ntime = 2020-12-16 11:22:44,029 level = ERROR module = myorg\/foo message = \"Something went wrong.\"\n```\n\n### Log Output\n\nLogs are written to the `stderr` stream (i.e., the console) by default in order to make the logs more container friendly.\n\nTo publish the logs to a file, redirect the `stderr` stream to a file.\n```bash\n$ ballerina run program.bal 2> b7a-user.log\n```\n\nTo set the output format to JSON, place the entry given below in the `Config.toml` file.\n\n```\n[ballerina.log]\nformat = \"json\"\n```\n\n### Log Levels\n\nThis package provides functions to log at four levels, which are `DEBUG`, `ERROR`, `INFO`, and `WARN`. By default, all log messages are  logged to the console at the `INFO` level. \n\nThe log level can be configured via a Ballerina configuration file.\nTo set the global log level, place the entry given below in the Config.toml file:\n\n```\n[ballerina.log]\nlevel = \"[LOG_LEVEL]\"\n```\n\nEach module can also be assigned its own log level. To assign a log level to a module, provide the following entry in the Config.toml file:\n\n```\n[[ballerina.log.modules]]\nname = \"[ORG_NAME]\/[MODULE_NAME]\"\nlevel = \"[LOG_LEVEL]\"\n```\n\nFor information on the operation, which you can perform with this package, see the below Function. For examples on the usage of the operation, see [Log Api](https:\/\/ballerina.io\/learn\/by-example\/log-api.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190505000, "modules":[], "pullCount":416}, {"organization":"ballerina", "name":"http", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/http/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/http/1.1.0-alpha8/ballerina-http-java11-1.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides an implementation for connecting and interacting with HTTP and HTTP2 endpoints. The package facilitates two types of network entry points as ‘Client’ and ‘Listener’.\n\n### Client\n\nThe `Client` is used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. The `Client` activates connection eviction after a given idle period and also supports follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n\nThe `Client` handles resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n\nLoad balancing is used in the round robin or failover manner.\n\nWhen a failure occurs in the remote service, the client connections might wait for some time before a timeout occurs. Awaiting requests consume resources in the system. Circuit Breakers are used to trip after a certain number of failed requests to the remote service. Once a circuit breaker trips, it does not allow the client to send requests to the remote service for a period of time.\n\nThe Ballerina circuit breaker supports tripping on HTTP error status codes and I\/O errors. Failure thresholds can be configured based on a sliding window (e.g., 5 failures within 10 seconds). `Client` endpoints also support a retry mechanism that allows a client to resend failed requests periodically for a given number of times.\n\nThe `Client` supports Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL\/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression\/decompression, and authentication\/authorization.\n\nA `Client` can be defined using the URL of the remote service that the client needs to connect with, as shown below:\n\n``` ballerina\nhttp:Client|http:ClientError clientEndpoint = new(\"https:\/\/my-simple-backend.com\");\n```\nThe defined `Client` endpoint can be used to call a remote service as follows:\n\n``` ballerina\n\/\/ Send a GET request to the specified endpoint.\nhttp:Response|http:ClientError response = clientEndpoint->get(\"\/get?id=123\");\n```\n\nFor more information, see the following.\n* [Client Endpoint Example](https:\/\/ballerina.io\/learn\/by-example\/http-client-endpoint.html)\n* [Circuit Breaker Example](https:\/\/ballerina.io\/learn\/by-example\/http-circuit-breaker.html)\n* [HTTP Redirects Example](https:\/\/ballerina.io\/learn\/by-example\/http-redirects.html)\n* [HTTP Cookies](https:\/\/ballerina.io\/learn\/by-example\/http-cookies.html)\n\n### Listener\n\nA `Service` represents a collection of network-accessible entry points and can be exposed via a `Listener` endpoint. A resource represents one such entry point and can have its own path, HTTP methods, body format, 'consumes' and 'produces' content types, CORS headers, etc. In resources, `http:caller` and `http:Request` are mandatory parameters while `path` and `body` are optional.\n\nWhen a `Service` receives a request, it is dispatched to the best-matched resource.\n\nA `Listener` endpoint can be defined as follows:\n\n```ballerina\n\/\/ Attributes associated with the `Listener` endpoint are defined here.\nlistener http:Listener helloWorldEP = new(9090);\n```\n\nThen a `Service` can be defined and attached to the above `Listener` endpoint as shown below:\n\n```ballerina\n\/\/ By default, Ballerina assumes that the service is to be exposed via HTTP\/1.1.\nservice \/helloWorld on helloWorldEP {\n\n   resource function post [string name](@http:Payload string message) returns string {\n       \/\/ Sends the response back to the client along with a string payload.\n       return \"Hello, World! I’m \" + name + \". \" + message;\n   }\n}\n```\n\nSee the following.\n* [HTTPS Listener Example](https:\/\/ballerina.io\/learn\/by-example\/https-listener.html)\n* [HTTP CORS Example](https:\/\/ballerina.io\/learn\/by-example\/http-cors.html)\n* [HTTP Failover Example](https:\/\/ballerina.io\/learn\/by-example\/http-failover.html)\n* [HTTP Load Balancer Example](https:\/\/ballerina.io\/learn\/by-example\/http-load-balancer.html)\n\n`Listener` endpoints can be exposed via SSL. They support Mutual SSL, Hostname Verification, and Application Layer Protocol Negotiation (ALPN) for HTTP2. `Listener` endpoints also support Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), OCSP Stapling, HTTP2, keep-alive, chunking, HTTP caching, data compression\/decompression, and authentication\/authorization.\n\nFor more information, see [Mutual SSL Example](https:\/\/ballerina.io\/learn\/by-example\/mutual-ssl.html).\n\nFor more information, see [Caching Example](https:\/\/ballerina.io\/learn\/by-example\/cache.html), [HTTP Disable Chunking Example](https:\/\/ballerina.io\/learn\/by-example\/http-disable-chunking.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619192849000, "modules":[], "pullCount":400}, {"organization":"ballerina", "name":"task", "version":"2.0.0-alpha9", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/task/2.0.0-alpha9", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/task/2.0.0-alpha9/ballerina-task-java11-2.0.0-alpha9.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides the functionality to schedule a Ballerina job and manages the execution of Ballerina jobs either once or periodically.\n\n### Jobs and Scheduling\n\nEvery scheduled job in Ballerina is represented by a Job object. You need to create a jobs class with custom logic to execute it when the task is triggered.\n\nThe Task package has the following two scheduling systems to schedule the job:\n\n- One-time Job Execution\n- Frequency-based Job Execution \n\n#### One-time Job Execution\n\nThis API provides the functionality to schedule a job at a specified date.\n\nThe following code snippet shows how to schedule a one-time job.\n\n\n```ballerina\nclass Job {\n\n    *task:Job;\n    string msg;\n\n    public function execute() {\n        io:println(self.msg);\n    }\n\n    isolated function init(string msg) {\n        self.msg = msg;\n    }\n}\n\ntime:ZoneOffset zoneOffset = {\n    hours: 5,\n    minutes: 30,\n    seconds: <decimal>0.0\n};\ntime:Civil time = {\n    year: 2021,\n    month: 4,\n    day: 13,\n    hour: 4,\n    minute: 50,\n    second: 50.52,\n    timeAbbrev: \"Asia\/Colombo\",\n    utcOffset: zoneOffset\n};\n\ntask:Error|task:JobId result = task:scheduleOneTimeJob(new Job(\"Hi\"), time);\n```\nFor an example on the usage of the `scheduleOneTimeJob`, see the [Task One-time Job Execution Example](https:\/\/ballerina.io\/learn\/by-example\/task-one-time-job-execution.html).\n\n##### Frequency-based Job Execution\n\nThis API provides the functionality to schedule jobs on a specific interval either once or periodically with an optional start time, end time, and maximum count.\n\nThe following code snippet shows how to schedule a recurrence job by using this API.\n\n```ballerina\nclass Job {\n\n    *task:Job;\n    string msg;\n\n    public function execute() {\n        io:println(self.msg);\n    }\n\n    isolated function init(string msg) {\n        self.msg = msg;\n    }\n}\n\ntime:ZoneOffset zoneOffset = {\n    hours: 5,\n    minutes: 30\n};\ntime:Civil time = {\n    year: 2021,\n    month: 3,\n    day: 31,\n    hour: 4,\n    minute: 50,\n    second: 50.52,\n    timeAbbrev: \"Asia\/Colombo\",\n    utcOffset: zoneOffset\n};\n\ntask:Error|task:JobId result = task:scheduleJobRecurByFrequency(new Job(\"Hi\"), 2.5, maxCount = 10, startTime = time);\n```\nFor an example on the usage of the `scheduleJobRecurByFrequency`, see the [Task Frequency Job Execution Example](https:\/\/ballerina.io\/learn\/by-example\/task-frequency-job-execution.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190620000, "modules":[], "pullCount":384}, {"organization":"ballerina", "name":"regex", "version":"0.7.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/regex/0.7.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/regex/0.7.0-alpha8/ballerina-regex-java11-0.7.0-alpha8.bala", "summary":"", "readme":"## Package overview\n\nThis package provides the following regex utility functions. \n\n* `matches` - Checks whether a string matches a given regex.\n* `replaceAll` - Replaces every occurrence of a substring that matches a given regex in a string, with another string provided.\n* `replaceFirst` - Replaces the first occurrence of a substring that matches a given regex in a string, with another string provided.\n* `split` - Splits a string using a given regex delimiter and returns an array of the split elements.                     ", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190176000, "modules":[], "pullCount":369}, {"organization":"ballerina", "name":"crypto", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/crypto/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/crypto/1.1.0-alpha8/ballerina-crypto-java11-1.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides the necessary utilities that are required to hash content using different hashing mechanisms and algorithms. \n\nFor information on the operations, which you can perform with this package, see the below **Functions**. For an example on the usage of the operations, see the [Cryptographic Operations Example](https:\/\/ballerina.io\/learn\/by-example\/crypto.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190418000, "modules":[], "pullCount":368}, {"organization":"ballerina", "name":"file", "version":"0.7.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/file/0.7.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/file/0.7.0-alpha8/ballerina-file-java11-0.7.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package contains functions to perform file system based operations such as create, delete, rename the\nfile\/directory, and retrieve metadata of the file.\n\nFor an example on the usage of the operations, see the [File Example](https:\/\/ballerina.io\/learn\/by-example\/file.html).\n\n## Directory Listener \n\nThe `Directory Listener` is used to listen to a directory in the local file system. It notifies when new files are created in the directory or when the existing files are deleted or modified.\n\nFor an example on the usage of the operations, see the [Directory Listener Example](https:\/\/ballerina.io\/learn\/by-example\/directory-listener.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190760000, "modules":[], "pullCount":368}, {"organization":"ballerina", "name":"os", "version":"0.8.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/os/0.8.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/os/0.8.0-alpha8/ballerina-os-java11-0.8.0-alpha8.bala", "summary":"", "readme":"## Package overview\n\nThis package provides functions to retrieve information about the operating system and the current users of the operating system.\n\nFor information on the operations, which you can perform with the os package, see the below **Functions**.", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190405000, "modules":[], "pullCount":365}, {"organization":"ballerina", "name":"mime", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/mime/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/mime/1.1.0-alpha8/ballerina-mime-java11-1.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides functions to encapsulate multiple body parts such as attachments into a single message. The\n communication of such messages follow the MIME (Multipurpose Internet Mail Extensions) specification as specified in\n  the [RFC 2045 standard](https:\/\/www.ietf.org\/rfc\/rfc2045.txt).\n\n> Entity refers to the header fields and the content of a message or a part of the body in a multipart entity. \n\n### Modify and retrieve the data in an entity\nThis package provides functions to set and get an entity body from different kinds of message types such as XML, text, JSON, byte[], and body parts. Headers can be modified through functions such as `addHeader()`, `setHeader()`, `removeHeader()`, etc. \n\nFor information on the operations, which you can perform with this package, see the below **Functions**. For examples on the usage of the operations, see the [Request with multiparts Example](https:\/\/ballerina.io\/learn\/by-example\/request-with-multiparts.html) and [Response with multiparts Example](https:\/\/ballerina.io\/learn\/by-example\/response-with-multiparts.html).", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190761000, "modules":[], "pullCount":348}, {"organization":"ballerina", "name":"cache", "version":"2.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/cache/2.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/cache/2.1.0-alpha8/ballerina-cache-java11-2.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides APIs for handle caching in Ballerina. It consists of a default implementation based on the LRU eviction algorithm.\n\nThe `cache:AbstractCache` object has the common APIs for the caching functionalities. Custom implementations of the cache can be done with different data storages like file, database, etc. with the structural equivalency to the `cache:AbstractCacheObject` object.\n\n```ballerina\npublic type AbstractCache object {\n    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n    public function get(string key) returns any|Error;\n    public function invalidate(string key) returns Error?;\n    public function invalidateAll() returns Error?;\n    public function hasKey(string key) returns boolean;\n    public function keys() returns string[];\n    public function size() returns int;\n    public function capacity() returns int;\n};\n```\n\nThe Ballerina Cache package provides the `cache:Cache` class, which is a `map` data structure based implementation of the `cache:AbstractCache` object. It is not recommended to insert `()` as the value of the cache since it doesn't make sense to cache a nil.\n\nWhile initializing the `cache:Cache`, you need to pass the following parameters as the cache configurations.\n- `capacity` - Maximum number of entries allowed for the cache\n- `evictionFactor` - The factor by which the entries will be evicted once the cache is full\n- `evictionPolicy` - The policy which is used to evict entries once the cache is full\n- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the\n`maxAgeInSeconds` property when inserting an entry to the cache. '-1' means the entries are valid forever.\n- `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries\nThis is an optional parameter.\n\nFor a better user experience, the above-mentioned configuration is initialized with the below default values:\n\n```ballerina\npublic type CacheConfig record {|\n    int capacity = 100;\n    float evictionFactor = 0.25;\n    EvictionPolicy evictionPolicy = LRU;\n    int defaultMaxAgeInSeconds = -1;\n    int cleanupIntervalInSeconds?;\n|};\n```\n\nThere are 2 mandatory scenarios and 1 optional scenario in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.\n\n1. When using the `get` API, if the returning cache entry has expired, it gets removed.\n2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the 'eviction policy' and the 'eviction factor'.\n3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n\nThe main benefit of using the `cleanupIntervalInSeconds` (optional) property is that the developer can optimize the memory usage while adding some additional CPU costs and vice versa. The default behaviour is the CPU-optimized method.\n\nFor information on the operations, which you can perform with the cache package, see the below __Functions__. For examples on the usage of the operations, see [Cache Example](https:\/\/ballerina.io\/learn\/by-example\/cache.html)", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619190771000, "modules":[], "pullCount":346}, {"organization":"ballerina", "name":"oauth2", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/oauth2/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/oauth2/1.1.0-alpha8/ballerina-oauth2-java11-1.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides a listener OAuth2 authentication provider, which can be used to authenticate the provided credentials against an introspection endpoint, and a client OAuth2 authentication provider, which can be used to authenticate against an external endpoint.\n\nFor information on the operations, which you can perform with this package, see the below **Functions**. For examples on the usage of the operations, see the following.\n* [HTTP Service with OAuth2 Example](https:\/\/ballerina.io\/learn\/by-example\/http-service-with-oauth2.html)\n* [HTTP Client with OAuth2 Client Credentials Grant Type](https:\/\/ballerina.io\/learn\/by-example\/http-client-with-oauth2-client-credentials-grant-type.html)\n* [HTTP Client with OAuth2 Password Grant Type](https:\/\/ballerina.io\/learn\/by-example\/http-client-with-oauth2-password-grant-type.html)\n* [HTTP Client with OAuth2 Direct Token Type](https:\/\/ballerina.io\/learn\/by-example\/http-client-with-oauth2-direct-token-type.html)", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619191202000, "modules":[], "pullCount":346}, {"organization":"ballerina", "name":"auth", "version":"1.1.0-alpha8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerina/auth/1.1.0-alpha8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerina/auth/1.1.0-alpha8/ballerina-auth-java11-1.1.0-alpha8.bala", "summary":"", "readme":"## Package Overview\n\nThis package provides listener Basic authentication providers, which can be used to authenticate the provided credentials against a file user store or an LDAP user store, and a client Basic authentication provider, which can be used to authenticate against an external endpoint.\n\nFor information on the operations, which you can perform with this package, see the below **Functions**. For examples on the usage of the operations, see the following.\n* [HTTP Service with Basic Auth File User Store](https:\/\/ballerina.io\/learn\/by-example\/http-service-with-basic-auth-file-user-store.html)\n* [HTTP Service with Basic Auth LDAP User Store](https:\/\/ballerina.io\/learn\/by-example\/http-service-with-basic-auth-ldap-user-store.html)\n* [HTTP Client with Basic Auth Example](https:\/\/ballerina.io\/learn\/by-example\/http-client-with-basic-auth.html)", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha5", "createdDate":1619191025000, "modules":[], "pullCount":342}, {"organization":"ballerinax", "name":"java.arrays", "version":"0.10.0-alpha4", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/java.arrays/0.10.0-alpha4", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/java.arrays/0.10.0-alpha4/ballerinax-java.arrays-java11-0.10.0-alpha4.bala", "summary":"", "readme":"", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slalpha2", "createdDate":1613803181000, "modules":[], "pullCount":331}], "count":212, "offset":0, "limit":15}
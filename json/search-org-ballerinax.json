{"packages":[{"organization":"ballerinax", "name":"jaeger", "version":"0.2.3", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/jaeger/0.2.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/jaeger/0.2.3/ballerinax-jaeger-java11-0.2.3.bala", "digest":"sha-256=06542eeebba0b7e87d6c9ddaf5a49d890ec3c4d52a6cd01c52d27a487b3109b3", "summary":"", "readme":"## Package Overview\n\nThe Jaeger Observability Extension is one of the tracing extensions of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\/\"> Ballerina<\/a> language.\n\nIt provides an implementation for tracing and publishing traces to a Jaeger Agent.\n\n## Enabling Jaeger Extension\n\nTo package the Jaeger extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax\/jaeger as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and publish traces to Jaeger, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\ntracingEnabled=true\ntracingProvider=\"jaeger\"\n\n[ballerinax.jaeger]\nagentHostname=\"127.0.0.1\"  # Optional Configuration. Default value is localhost\nagentPort=55680             # Optional Configuration. Default value is 55680\n```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622737487000, "modules":[{"name":"jaeger", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/jaeger/0.2.3", "packageUrl":"/ballerinax/jaeger/0.2.3"}], "pullCount":3}, {"organization":"ballerinax", "name":"choreo", "version":"0.2.7", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/choreo/0.2.7", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/choreo/0.2.7/ballerinax-choreo-java11-0.2.7.bala", "digest":"sha-256=e8bf2467d7198ca7c4aa004cef437041ac0cebe7d8d9f527f65c80e00c94b9d0", "summary":"", "readme":"## Package Overview\n\nThe Choreo Observability Extension is one of the observability extensions of the [Ballerina](https:\/\/ballerina.io\/) language.\n\nIt provides an implementation for publishing traces & metrics to Choreo.\n\n## Enabling Choreo Extension\n\nTo package the Choreo extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax\/choreo as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and connect to Choreo, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nenabled=true\nprovider=\"choreo\"\n```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622737198000, "modules":[{"name":"choreo", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/choreo/0.2.7", "packageUrl":"/ballerinax/choreo/0.2.7"}], "pullCount":2}, {"organization":"ballerinax", "name":"prometheus", "version":"0.1.8", "platform":"any", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/prometheus/0.1.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/prometheus/0.1.8/ballerinax-prometheus-any-0.1.8.bala", "digest":"sha-256=195c763d60161af0e641c865477dc93aa54d8d48a2f8aafaab677fc95c5644ab", "summary":"", "readme":"## Package Overview\n\nThe Prometheus Observability Extension is one of the metrics extensions of the <a target=\"_blank\" href=\"https:\/\/ballerina.io\/\">Ballerina<\/a> language.\n\nIt provides an implementation for exporting metrics to a Prometheus Server.\n\n### Enabling Prometheus Extension\n\nTo package the Prometheus extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax\/prometheus as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and export metrics to Prometheus, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\n\n[ballerinax.prometheus]\nhost=\"127.0.0.1\"  # Optional Configuration. Default value is localhost\nport=9797         # Optional Configuration. Default value is 9797\n```", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622737081000, "modules":[{"name":"prometheus", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/prometheus/0.1.8", "packageUrl":"/ballerinax/prometheus/0.1.8"}], "pullCount":4}, {"organization":"ballerinax", "name":"java.jdbc", "version":"0.6.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/java.jdbc/0.6.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/java.jdbc/0.6.0-beta.1/ballerinax-java.jdbc-java11-0.6.0-beta.1.bala", "digest":"sha-256=0c8349c0a285a79e1f02ca62171189a31f05b4fb89cd9226be1a77252917d871", "summary":"", "readme":"## Package Overview\n\nThe `jdbc` library is one of the external library packages of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\/\"> Ballerina<\/a> language. This external package is maintained by the Ballerina team.\n\nIt provides the functionality required to access and manipulate data stored in any type of relational database\nthat is accessible via Java Database Connectivity (JDBC).\n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina Standard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n- Discuss code changes of the Ballerina project in ballerina-dev@googlegroups.com.\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622649980000, "modules":[{"name":"java.jdbc", "summary":"", "readme":"## Overview\n\nThis module provides the functionality that is required to access and manipulate data stored in any type of relational database,\nwhich is accessible via Java Database Connectivity (JDBC).\n\n**Prerequisite:** Add the JDBC driver corresponding to the database you are trying to interact with\nas a native library dependency in your Ballerina project. Then, once you build the project by executing the `ballerina build`\ncommand, you should be able to run the resultant by executing the `ballerina run` command.\n\nE.g., The `Ballerina.toml` content for an H2 database will be as follows.\nChange the path to the JDBC driver appropriately.\n\n```toml\n[package]\norg = \"sample\"\nname = \"jdbc\"\nversion= \"0.1.0\"\n\n[[platform.java11.dependency]]\nartifactId = \"h2\"\nversion = \"1.4.200\"\npath = \"\/path\/to\/com.h2database.h2-1.4.200.jar\"\ngroupId = \"com.h2database\"\n``` \n\n### Client\nTo access a database, you must first create a\n[jdbc:Client](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/clients\/Client) object.\nThe examples for creating a JDBC client can be found below.\n\n#### Creating a Client\nThis example shows the different ways of creating the `jdbc:Client`. The client can be created by passing\nthe JDBC URL, which is a mandatory property and all other fields are optional.\n\nThe `dbClient` receives only the database URL.\n\nE.g., The DB client creation for an H2 database will be as follows.\n```ballerina\njdbc:Client|sql:Error dbClient = new (\"jdbc:h2:~\/path\/to\/database\");\n```\n\nThe `dbClient` receives the username and password in addition to the URL.\nIf the properties are passed in the same order as they are defined in the `jdbc:Client`, you can pass them\nwithout named params.\n\nE.g., The DB client creation for an H2 database will be as follows.\n```ballerina\njdbc:Client|sql:Error dbClient = new (\"jdbc:h2:~\/path\/to\/database\", \n                            \"root\", \"root\");\n```\n\nThe `dbClient` uses the named params to pass all the attributes and provides the `options` property in the type of\n[jdbc:Options](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/records\/Options),\nand also uses the unshared connection pool in the type of\n[sql:ConnectionPool](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/records\/ConnectionPool).\nFor more information about connection pooling, see the [`sql` module](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest).\n\nE.g., The DB client creation for an H2 database will be as follows.\n```ballerina\njdbc:Client|sql:Error dbClient = new (url =  \"jdbc:h2:~\/path\/to\/database\",\n                             user = \"root\", password = \"root\",\n                             options = {\n                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n                             },\n                             connectionPool = {\n                                 maxOpenConnections: 5\n                             });\n```\n\nThe `dbClient` receives some custom properties within the\n[jdbc:Options](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/records\/Options),   \nand those properties will be used by the defined `datasourceName`.\nAs per the provided example, the `org.h2.jdbcx.JdbcDataSource` datasource  will be configured with a `loginTimeout`\nof `2000` milliseconds.\n\nE.g., The DB client creation for an H2 database will be as follows.\n```ballerina\njdbc:Client|sql:Error dbClient = new (url =  \"jdbc:h2:~\/path\/to\/database\", \n                             user = \"root\", password = \"root\",\n                             options = {\n                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n                                properties: {\"loginTimeout\": \"2000\"}\n                             });                          \n```\n\nYou can find more details about each property in the\n[jdbc:Client](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/clients\/Client) constructor.\n\nThe [jdbc:Client](https:\/\/docs.central.ballerina.io\/ballerinax\/java.jdbc\/latest\/clients\/Client) references\n[sql:Client](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/clients\/Client) and\nall the operations defined by the `sql:Client` will be supported by the `jdbc:Client` as well.\n\n#### Connection Pool Handling\n\nAll ballerina database modules share the same connection pooling concept and there are three possible scenarios for\nconnection pool handling.  For its properties and possible values, see the [`sql:ConnectionPool`](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/records\/ConnectionPool).\n\n1. Global shareable default connection pool\n\n   If you do not provide the `poolOptions` field when creating the database client, a globally-shareable pool will be\n   created for your database unless a connection pool matching with the properties you provided already exists.\n   The JDBC module example below shows how the global connection pool is used.\n\n   E.g., The DB client creation for an H2 database is as follows.\n   ```ballerina\n    jdbc:Client|sql:Error dbClient = \n                               new (\"jdbc:h2:~\/path\/to\/database\", \n                                \"root\", \"root\");\n    ```\n\n2. Client owned, unsharable connection pool\n\n   If you define the `connectionPool` field inline when creating the database client with the `sql:ConnectionPool` type,\n   an unsharable connection pool will be created. The JDBC module example below shows how the global\n   connection pool is used.\n\n   E.g., The DB client creation for an H2 database is as follows.\n    ```ballerina\n    jdbc:Client|sql:Error dbClient = \n                               new (url = \"jdbc:h2:~\/path\/to\/database\", \n                               connectionPool = { maxOpenConnections: 5 });\n    ```\n\n3. Local, shareable connection pool\n\n   If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients,\n   for each set of clients that connects to the same database instance with the same set of properties, a shared\n   connection pool will be created. The JDBC module example below shows how the global connection pool is used.\n\n   E.g., The DB client creation for an H2 database is as follows.\n    ```ballerina\n    sql:ConnectionPool connPool = {maxOpenConnections: 5};\n    \n    jdbc:Client|sql:Error dbClient1 =       \n                               new (url = \"jdbc:h2:~\/path\/to\/database\",\n                               connectionPool = connPool);\n    jdbc:Client|sql:Error dbClient2 = \n                               new (url = \"jdbc:h2:~\/path\/to\/database\",\n                               connectionPool = connPool);\n    jdbc:Client|sql:Error dbClient3 = \n                               new (url = \"jdbc:h2:~\/path\/to\/database\",\n                               connectionPool = connPool);\n    ```\n   \n#### Closing the Client\n\nOnce all the database operations are performed, you can close the database client you have created by invoking the `close()`\noperation. This will close the corresponding connection pool if it is not shared by any other database clients. \n\n```ballerina\nerror? e = dbClient.close();\n```\nOr\n```ballerina\ncheck dbClient.close();\n```\n\n### Database Operations\n\nOnce the client is created, database operations can be executed through that client. This module defines the interface\nand common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting,\nupdating, and batch updating data.\n\n#### Creating Tables\n\nThis sample creates a table with two columns. One column is of type `int` and the other is of type `varchar`.\nThe `CREATE` statement is executed via the `execute` remote function of the client.\n\n```ballerina\n\/\/ Create the ‘Students’ table with the  ‘id’, 'name', and ‘age’ fields.\nsql:ExecutionResult ret = check dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n\/\/A value of the sql:ExecutionResult type is returned for 'ret'. \n```\n\n#### Inserting Data\n\nThis sample shows three examples of data insertion by executing an `INSERT` statement using the `execute` remote function\nof the client.\n\nIn the first example, the query parameter values are passed directly into the query statement of the `execute`\nremote function.\n\n```ballerina\nsql:ExecutionResult ret = check dbClient->execute(\"INSERT INTO student(age, name) \" +\n                         \"values (23, 'john')\");\n```\n\nIn the second example, the parameter values, which are in local variables are used to parameterize the SQL query in\nthe `execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type\nlike `string`, `int`, `float`, or `boolean` and in that case, the corresponding SQL type of the parameter is derived\nfrom the type of the Ballerina variable that is passed in.\n\n```ballerina\nstring name = \"Anne\";\nint age = 8;\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResult ret = check dbClient->execute(query);\n```\n\nIn the third example, the parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use the\ncorresponding subtype of the `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc., when you need to\nprovide more details such as the exact SQL type of the parameter.\n\n```ballerina\nsql:VarcharValue name = new (\"James\");\nsql:IntegerValue age = new (10);\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResult ret = check dbClient->execute(query);\n```\n\n#### Inserting Data With Auto-generated Keys\n\nThis example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the\n`execute` remote function to execute the `INSERT` statement.\n\n```ballerina\nint age = 31;\nstring name = \"Kate\";\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResultret = check dbClient->execute(query);\n\/\/Number of rows affected by the execution of the query.\nint? count = ret.affectedRowCount;\n\/\/The integer or string generated by the database in response to a query execution.\nstring|int? generatedKey = ret.lastInsertId;\n}\n```\n\n#### Querying Data\n\nThis sample shows three examples to demonstrate the different usages of the `query` operation and query the\ndatabase table and obtain the results.\n\nThis example demonstrates querying data from a table in a database.\nFirst, a type is created to represent the returned result set. Note that the mapping of the database column\nto the returned record's property is case-insensitive (i.e., the `ID` column in the result can be mapped to the `id`\nproperty in the record). Next, the `SELECT` query is executed via the `query` remote function of the client by passing that\nresult set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream`\nreturned by the select operation holds a pointer to the actual data in the database and it loads data from the table\nonly when it is accessed. This stream can be iterated only once.\n\n```ballerina\n\/\/ Define a type to represent the results.\ntype Student record {\n    int id;\n    int age;\n    string name;\n};\n\n\/\/ Select the data from the database table. The query parameters are passed \n\/\/ directly. Similar to the `execute` examples, parameters can be passed as\n\/\/ sub types of `sql:TypedValue` as well.\nint id = 10;\nint age = 12;\nsql:ParameterizedQuery query = `SELECT * FROM students\n                                WHERE id < ${id} AND age > ${age}`;\nstream<Student, sql:Error> resultStream = \n        <stream<Student, sql:Error>> dbClient->query(query, Student);\n\n\/\/ Iterating the returned table.\nerror? e = resultStream.forEach(function(Student student) {\n   \/\/Can perform any operations using 'student' and can access any fields in the returned record of type Student.\n});\n```\n\nDefining the return type is optional and you can query the database without providing the result type. Hence,\nthe above example can be modified as follows with an open record type as the return type. The property name in the open record\ntype will be the same as how the column is defined in the database.\n\n```ballerina\n\/\/ Select the data from the database table. The query parameters are passed \n\/\/ directly. Similar to the `execute` examples, parameters can be passed as \n\/\/ sub types of `sql:TypedValue` as well.\nint id = 10;\nint age = 12;\nsql:ParameterizedQuery query = `SELECT * FROM students\n                                WHERE id < ${id} AND age > ${age}`;\nstream<record{}, sql:Error> resultStream = dbClient->query(query);\n\n\/\/ Iterating the returned table.\nerror? e = resultStream.forEach(function(record{} student) {\n    \/\/Can perform any operations using 'student' and can access any fields in the returned record.\n});\n```\n\nThere are situations in which you may not want to iterate through the database and in that case, you may decide\nto only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\nresult stream will not be closed and you have to explicitly invoke the `close` operation on the\n`sql:Client` to release the connection resources and avoid a connection leak as shown below.\n\n```ballerina\nstream<record{}, sql:Error> resultStream = \n            dbClient->query(\"SELECT count(*) as total FROM students\");\n\nrecord {|record {} value;|}|error? result = resultStream.next();\n\nif result is record {|record {} value;|} {\n    \/\/valid result is returned.\n} else if result is error {\n    \/\/ An error is returned as the result.\n} else {\n    \/\/ Student table must be empty.\n}\n\nerror? e = resultStream.close();\n```\n\n#### Updating Data\n\nThis example demonstrates modifying data by executing an `UPDATE` statement via the `execute` remote function of\nthe client.\n\n```ballerina\nint age = 23;\nsql:ParameterizedQuery query = `UPDATE students SET name = 'John' \n                                WHERE age = ${age}`;\nsql:ExecutionResult|sql:Error ret = check dbClient->execute(query);\n```\n\n#### Deleting Data\n\nThis example demonstrates deleting data by executing a `DELETE` statement via the `execute` remote function of\nthe client.\n\n```ballerina\nstring name = \"John\";\nsql:ParameterizedQuery query = `DELETE from students WHERE name = ${name}`;\nsql:ExecutionResult|sql:Error ret = check dbClient->execute(query);\n```\n\n#### Batch Updating Data\n\nThis example demonstrates how to insert multiple records with a single `INSERT` statement that is executed via the\n`batchExecute` remote function of the client. This is done by creating a `table` with multiple records and\nparameterized SQL query as same as the  above `execute` operations.\n\n```ballerina\n\/\/ Create the table with the records that need to be inserted.\nvar data = [\n  { name: \"John\", age: 25  },\n  { name: \"Peter\", age: 24 },\n  { name: \"jane\", age: 22 }\n];\n\n\/\/ Do the batch update by passing the batches.\nsql:ParameterizedQuery[] batch = from var row in data\n                                 select `INSERT INTO students ('name', 'age')\n                                 VALUES (${row.name}, ${row.age})`;\nsql:ExecutionResult[] ret = check dbClient->batchExecute(batch);\n```\n\n#### Execute SQL Stored Procedures\n\nThis example demonstrates how to execute a stored procedure with a single `INSERT` statement that is executed via the\n`call` remote function of the client.\n\n```ballerina\nint uid = 10;\nsql:IntegerOutParameter insertId = new;\n\nsql:ProcedureCallResult|sql:Error ret = dbClient->call(`call InsertPerson(${uid}, ${insertId})`);\nif ret is error {\n    \/\/An error returned\n} else {\n    stream<record{}, sql:Error>? resultStr = ret.queryResult;\n    if resultStr is stream<record{}, sql:Error> {\n        sql:Error? e = resultStr.forEach(function(record{} result) {\n        \/\/can perform operations using 'result'.\n      });\n    }\n    check ret.close();\n}\n```\nNote that you have to explicitly invoke the close operation on the `sql:ProcedureCallResult` to release the connection resources and avoid a connection leak as shown above.\n\n>**Note:** The default thread pool size used in Ballerina is: [the number of processors available * 2]. You can configure\nthe thread pool size by using the `BALLERINA_MAX_POOL_SIZE` environment variable.", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/java.jdbc/0.6.0-beta.1", "packageUrl":"/ballerinax/java.jdbc/0.6.0-beta.1"}], "pullCount":7}, {"organization":"ballerinax", "name":"mysql", "version":"0.7.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/mysql/0.7.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/mysql/0.7.0-beta.1/ballerinax-mysql-java11-0.7.0-beta.1.bala", "digest":"sha-256=ee6538d4b412e5c55260ea2916661936568dcfce0ab36ea4304db7fd550cd39f", "summary":"", "readme":"## Package overview\n\nThe `mysql` library is one of the external library packages of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\/\"> Ballerina<\/a> language.  This external package is maintained by the Ballerina team.\n\nThis provides the functionality required to access and manipulate data stored in a MySQL database.\n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina Standard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n- Discuss code changes of the Ballerina project in ballerina-dev@googlegroups.com.\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622649953000, "modules":[{"name":"mysql", "summary":"", "readme":"## Overview\n\nThis module provides the functionality required to access and manipulate data stored in a MySQL database.\n\n**Prerequisite:** Add the MySQL driver JAR as a native library dependency in your Ballerina project.\nThis module uses the database properties from the MySQL version 8.0.13 onwards. Therefore, it is recommended to use a\nMySQL driver version greater than 8.0.13. Then, once you build the project by executing the `ballerina build`\ncommand, you should be able to run the resultant by executing the `ballerina run` command.\n\nE.g., The `Ballerina.toml` content.\nChange the path to the JDBC driver appropriately.\n\n```toml\n[package]\norg = \"sample\"\nname = \"mysql\"\nversion= \"0.1.0\"\n\n[[platform.java11.dependency]]\nartifactId = \"mysql-connector-java\"\nversion = \"8.0.17\"\npath = \"\/path\/to\/mysql-connector-java-8.0.17.jar\"\ngroupId = \"mysql\"\n``` \n\n### Client\nTo access a database, you must first create a\n[mysql:Client](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/clients\/Client) object.\nThe examples for creating a MySQL client can be found below.\n\n#### Creating a Client\nThis example shows the different ways of creating the `mysql:Client`.\n\nThe client can be created with an empty constructor, and thereby, the client will be initialized with the default properties.\n\n```ballerina\nmysql:Client|sql:Error dbClient = new ();\n```\n\nThe `dbClient` receives the host, username, and password. Since the properties are passed in the same order as they are defined\nin the `jdbc:Client`, you can pass them without named params.\n\n```ballerina\nmysql:Client|sql:Error dbClient = new (\"localhost\", \"rootUser\", \"rooPass\", \n                              \"information_schema\", 3306);\n```\n\nThe `dbClient` uses the named params to pass the attributes since it is skipping some params in the constructor.\nFurther, the [`mysql:Options`](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/records\/Options)\nproperty is passed to configure the SSL and connection timeout in the MySQL client.\n\n```ballerina\nmysql:Options mysqlOptions = {\n  ssl: {\n    mode: mysql:SSL_PREFERRED\n  },\n  connectTimeout: 10\n};\nmysql:Client|sql:Error dbClient = new (user = \"rootUser\", password = \"rootPass\",\n                              options = mysqlOptions);\n```\n\nSimilarly, the `dbClient` uses the named params and it provides an unshared connection pool of the type of\n[sql:ConnectionPool](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/records\/ConnectionPool)\nto be used within the client.\nFor more details about connection pooling, see the [`sql` Module](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest).\n\n```ballerina\nmysql:Client|sql:Error dbClient = new (user = \"rootUser\", password = \"rootPass\",\n                              connectionPool = {maxOpenConnections: 5});\n```\n\n#### Using SSL\nTo connect the MySQL database using an SSL connection, you must add the SSL configurations to the `mysql:Options` when creating the `dbClient`.\nFor the SSL Mode, you can select one of the modes: `mysql:SSL_PREFERRED`, `mysql:SSL_REQUIRED`, `mysql:SSL_VERIFY_CA`, or `mysql:SSL_VERIFY_IDENTITY` according to the requirement.\nFor the key and cert files, you must provide the files in the `.p12` format.\n\n```ballerina\nstring clientStorePath = \"\/path\/to\/keystore.p12\";\nstring turstStorePath = \"\/path\/to\/truststore.p12\";\n\nmysql:Options mysqlOptions = {\n  ssl: {\n    mode: mysql:SSL_PREFERRED,\n    key: {\n        path: clientStorePath,\n        password: \"password\"\n    },\n    cert: {\n        path: turstStorePath,\n        password: \"password\"\n    }\n  }\n};\n```\n#### Connection Pool Handling\n\nAll database modules share the same connection pooling concept and there are three possible scenarios for \nconnection pool handling.  For its properties and possible values, see the [`sql:ConnectionPool`](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/records\/ConnectionPool).\n\n1. Global, shareable, default connection pool\n\n    If you do not provide the `poolOptions` field when creating the database client, a globally-shareable pool will be \n    created for your database unless a connection pool matching with the properties you provided already exists. \n    The JDBC module example below shows how the global connection pool is used. \n\n    ```ballerina\n    jdbc:Client|sql:Error dbClient = \n                               new (\"jdbc:mysql:\/\/localhost:3306\/testdb\", \n                                \"root\", \"root\");\n    ```\n\n2. Client owned, unsharable connection pool\n\n    If you define the `connectionPool` field inline when creating the database client with the `sql:ConnectionPool` type, \n    an unsharable connection pool will be created. The JDBC module example below shows how the global \n    connection pool is used.\n\n    ```ballerina\n    jdbc:Client|sql:Error dbClient = \n                               new (url = \"jdbc:mysql:\/\/localhost:3306\/testdb\", \n                               connectionPool = { maxOpenConnections: 5 });\n    ```\n\n3. Local, shareable connection pool\n\n    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n    for each set of clients that connects to the same database instance with the same set of properties, a shared \n    connection pool will be created. The JDBC module example below shows how the global connection pool is used.\n\n    ```ballerina\n    sql:ConnectionPool connPool = {maxOpenConnections: 5};\n    \n    jdbc:Client|sql:Error dbClient1 =       \n                               new (url = \"jdbc:mysql:\/\/localhost:3306\/testdb\",\n                               connectionPool = connPool);\n    jdbc:Client|sql:Error dbClient2 = \n                               new (url = \"jdbc:mysql:\/\/localhost:3306\/testdb\",\n                               connectionPool = connPool);\n    jdbc:Client|sql:Error dbClient3 = \n                               new (url = \"jdbc:mysql:\/\/localhost:3306\/testdb\",\n                               connectionPool = connPool);\n    ```\n   \nFor more details about each property, see the [`mysql:Client`](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/clients\/Client) constructor.\n\nThe [mysql:Client](https:\/\/docs.central.ballerina.io\/ballerinax\/mysql\/latest\/clients\/Client) references\n[sql:Client](https:\/\/docs.central.ballerina.io\/ballerina\/sql\/latest\/clients\/Client) and all the operations\ndefined by the `sql:Client` will be supported by the `mysql:Client` as well.\n \n#### Closing the Client\n\nOnce all the database operations are performed, you can close the database client you have created by invoking the `close()`\noperation. This will close the corresponding connection pool if it is not shared by any other database clients. \n\n```ballerina\nerror? e = dbClient.close();\n```\nor\n```ballerina\ncheck dbClient.close();\n```\n\n### Database Operations\n\nOnce the client is created, database operations can be executed through that client. This module defines the interface \nand common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \nupdating, and batch updating data.  \n\n#### Creating Tables\n\nThis sample creates a table with two columns. One column is of type `int` and the other is of type `varchar`.\nThe `CREATE` statement is executed via the `execute` remote function of the client.\n\n```ballerina\n\/\/ Create the ‘Students’ table with the  ‘id’, 'name', and ‘age’ fields.\nsql:ExecutionResult ret = check dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n\/\/A value of the`sql:ExecutionResult` type is returned for 'ret'. \n```\n\n#### Inserting Data\n\nThis sample shows three examples of data insertion by executing an `INSERT` statement using the `execute` remote function \nof the client.\n\nIn the first example, the query parameter values are passed directly into the query statement of the `execute` \nremote function.\n\n```ballerina\nsql:ExecutionResult ret = check dbClient->execute(\"INSERT INTO student(age, name) \" +\n                         \"values (23, 'john')\");\n```\n\nIn the second example, the parameter values, which are in local variables are used to parameterize the SQL query in \nthe `execute` remote function. This type of a parameterized SQL query can be used with any primitive Ballerina type \nlike `string`, `int`, `float`, or `boolean` and in that case, the corresponding SQL type of the parameter is derived \nfrom the type of the Ballerina variable that is passed in. \n\n```ballerina\nstring name = \"Anne\";\nint age = 8;\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResult ret = check dbClient->execute(query);\n```\n\nIn the third example, the parameter values are passed as an `sql:TypedValue` to the `execute` remote function. Use the \ncorresponding subtype of the `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc. when you need to \nprovide more details such as the exact SQL type of the parameter.\n\n```ballerina\nsql:VarcharValue name = new (\"James\");\nsql:IntegerValue age = new (10);\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResult ret = check dbClient->execute(query);\n```\n\n#### Inserting Data With Auto-generated Keys\n\nThis example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n`execute` remote function to execute the `INSERT` statement.\n\n```ballerina\nint age = 31;\nstring name = \"Kate\";\n\nsql:ParameterizedQuery query = `INSERT INTO student(age, name)\n                                values (${age}, ${name})`;\nsql:ExecutionResultret = check dbClient->execute(query);\n\/\/Number of rows affected by the execution of the query.\nint? count = ret.affectedRowCount;\n\/\/The integer or string generated by the database in response to a query execution.\nstring|int? generatedKey = ret.lastInsertId;\n}\n```\n\n#### Querying Data\n\nThis sample shows three examples to demonstrate the different usages of the `query` operation to query the\ndatabase table and obtain the results. \n\nThis example demonstrates querying data from a table in a database. \nFirst, a type is created to represent the returned result set. Note the mapping of the database column \nto the returned record's property is case-insensitive (i.e., the `ID` column in the result can be mapped to the `id` \nproperty in the record). Next, the `SELECT` query is executed via the `query` remote function of the client by passing that \nresult set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \nreturned by the `SELECT` operation holds a pointer to the actual data in the database and it loads data from the table \nonly when it is accessed. This stream can be iterated only once. \n\n```ballerina\n\/\/ Define a type to represent the results.\ntype Student record {\n    int id;\n    int age;\n    string name;\n};\n\n\/\/ Select the data from the database table. The query parameters are passed \n\/\/ directly. Similar to the `execute` examples, parameters can be passed as\n\/\/ sub types of `sql:TypedValue` as well.\nint id = 10;\nint age = 12;\nsql:ParameterizedQuery query = `SELECT * FROM students\n                                WHERE id < ${id} AND age > ${age}`;\nstream<Student, sql:Error> resultStream = \n        <stream<Student, sql:Error>> dbClient->query(query, Student);\n\n\/\/ Iterating the returned table.\nerror? e = resultStream.forEach(function(Student student) {\n   \/\/Can perform any operations using 'student' and can access any fields in the returned record of type `Student`.\n});\n```\n\nDefining the return type is optional and you can query the database without providing the result type. Hence, \nthe above example can be modified as follows with an open record type as the return type. The property name in the open record \ntype will be the same as how the column is defined in the database. \n\n```ballerina\n\/\/ Select the data from the database table. The query parameters are passed \n\/\/ directly. Similar to the `execute` examples, parameters can be passed as \n\/\/ sub types of `sql:TypedValue` as well.\nint id = 10;\nint age = 12;\nsql:ParameterizedQuery query = `SELECT * FROM students\n                                WHERE id < ${id} AND age > ${age}`;\nstream<record{}, sql:Error> resultStream = dbClient->query(query);\n\n\/\/ Iterating the returned table.\nerror? e = resultStream.forEach(function(record{} student) {\n    \/\/Can perform any operations using 'student' and can access any fields in the returned record.\n});\n```\n\nThere are situations in which you may not want to iterate through the database and in that case, you may decide\nto only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\nresult stream will not be closed and you have to invoke the `close` operation explicitly on the \n`sql:Client` to release the connection resources and avoid a connection leak as shown below.\n\n```ballerina\nstream<record{}, sql:Error> resultStream = \n            dbClient->query(\"SELECT count(*) as total FROM students\");\n\nrecord {|record {} value;|}|error? result = resultStream.next();\n\nif result is record {|record {} value;|} {\n    \/\/A valid result is returned.\n} else if result is error {\n    \/\/ An error is returned as the result.\n} else {\n    \/\/ The `Student` table must be empty.\n}\n\nerror? e = resultStream.close();\n```\n\n#### Updating Data\n\nThis example demonstrates modifying data by executing an `UPDATE` statement via the `execute` remote function of \nthe client.\n\n```ballerina\nint age = 23;\nsql:ParameterizedQuery query = `UPDATE students SET name = 'John' \n                                WHERE age = ${age}`;\nsql:ExecutionResult|sql:Error ret = check dbClient->execute(query);\n```\n\n#### Deleting Data\n\nThis example demonstrates deleting data by executing a `DELETE` statement via the `execute` remote function of \nthe client.\n\n```ballerina\nstring name = \"John\";\nsql:ParameterizedQuery query = `DELETE from students WHERE name = ${name}`;\nsql:ExecutionResult|sql:Error ret = check dbClient->execute(query);\n```\n\n#### Batch Updating Data\n\nThis example demonstrates how to insert multiple records with a single `INSERT` statement that is executed via the \n`batchExecute` remote function of the client. This is done by creating a `table` with multiple records and \nparameterized SQL query as same as the  above `execute` operations.\n\n```ballerina\n\/\/ Create the table with the records that need to be inserted.\nvar data = [\n  { name: \"John\", age: 25  },\n  { name: \"Peter\", age: 24 },\n  { name: \"jane\", age: 22 }\n];\n\n\/\/ Do the batch update by passing the batches.\nsql:ParameterizedQuery[] batch = from var row in data\n                                 select `INSERT INTO students ('name', 'age')\n                                 VALUES (${row.name}, ${row.age})`;\nsql:ExecutionResult[] ret = check dbClient->batchExecute(batch);\n```\n\n#### Execute SQL Stored Procedures\n\nThis example demonstrates how to execute a stored procedure with a single `INSERT` statement that is executed via the \n`call` remote function of the client.\n\n```ballerina\nint uid = 10;\nsql:IntegerOutParameter insertId = new;\n\nsql:ProcedureCallResult|sql:Error ret = dbClient->call(`call InsertPerson(${uid}, ${insertId})`);\nif ret is error {\n    \/\/An error returned\n} else {\n    stream<record{}, sql:Error>? resultStr = ret.queryResult;\n    if resultStr is stream<record{}, sql:Error> {\n        sql:Error? e = resultStr.forEach(function(record{} result) {\n        \/\/can perform operations using 'result'.\n      });\n    }\n    check ret.close();\n}\n```\n\nNote that you have to invoke the close operation on the `sql:ProcedureCallResult` explicitly to release the connection resources and avoid a connection leak as shown above.\n\n>**Note:** The default thread pool size used in Ballerina is: [the number of processors available * 2]. You can configure\nthe thread pool size by using the `BALLERINA_MAX_POOL_SIZE` environment variable.\n> ", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/mysql/0.7.0-beta.1", "packageUrl":"/ballerinax/mysql/0.7.0-beta.1"}], "pullCount":7}, {"organization":"ballerinax", "name":"rabbitmq", "version":"1.1.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/rabbitmq/1.1.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/rabbitmq/1.1.0-beta.1/ballerinax-rabbitmq-java11-1.1.0-beta.1.bala", "digest":"sha-256=7dedd0fb5c4a63571e083663bd81083cbc2df5c1ee0c6e8a034a5368b6ce232a", "summary":"", "readme":"## Package Overview\n\nThe `rabbitmq` library is one of the standard library packages of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\n\/\"> Ballerina <\/a> language.\n\nThis package provides the capability to send and receive messages by connecting to the RabbitMQ server. RabbitMQ gives your applications a common platform to send and receive messages and a safe place for your messages to live until received. RabbitMQ is one of the most popular open-source message brokers. It is lightweight and easy to deploy on-premise and in the cloud. \n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina Standard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n\n- Discuss code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag.", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622648677000, "modules":[{"name":"rabbitmq", "summary":"", "readme":"## Overview\n\nThis module provides the capability to send and receive messages by connecting to the RabbitMQ server.\n\nRabbitMQ gives your applications a common platform to send and receive messages and a safe place for your messages to live until received. RabbitMQ is one of the most popular open-source message brokers. It is lightweight and easy to deploy on-premise and in the cloud.\n\n### Basic Usage\n\n#### Setting Up the Connection\n\nFirst, you need to set up the connection with the RabbitMQ server. The following ways can be used to connect to a\nRabbitMQ server.\n\n1. Connect to a RabbitMQ node with the default host and port:\n```ballerina\n    rabbitmq:Client rabbitmqClient = check new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n```\n\n2. Connect to a RabbitMQ node with a custom host and port:\n```ballerina\n    rabbitmq:Client rabbitmqClient = check new(\"localhost\", 5672);\n```\n\n3. Connect to a RabbitMQ node with host, port, and additional configurations:\n```ballerina\n    rabbitmq:ConnectionConfiguration config = {\n        username: \"ballerina\",\n        password: \"password\"\n    };\n    rabbitmq:Client rabbitmqClient = check new(\"localhost\", 5672, configs);\n```\n\nThe `rabbitmq:Client` can now be used to send and receive messages as described in the subsequent sections.\n\n#### Using Exchanges and Queues\n\nClient applications work with exchanges and queues, which are the high-level building blocks of the AMQP protocol. These must be declared before they can be used. The following code declares an exchange and a server-named queue and then binds them together.\n\n```ballerina\n    check rabbitmqClient->exchangeDeclare(\"MyExchange\", rabbitmq:DIRECT_EXCHANGE);\n    check rabbitmqClient->queueDeclare(\"MyQueue\");\n    check rabbitmqClient->queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n```\n\nThis sample code will declare,\n- a durable auto-delete exchange of the type `rabbitmq:DIRECT_EXCHANGE`\n- a non-durable, exclusive auto-delete queue with an auto-generated name\n\nNext, the `queueBind` function is called to bind the queue to the exchange with the given routing key.\n\n```ballerina\n    check rabbitmqClient->exchangeDeclare(\"MyExchange\", rabbitmq:DIRECT_EXCHANGE);\n    check rabbitmqClient->queueDeclare(\"MyQueue\", { durable: true,\n                                                   exclusive: false,\n                                                   autoDelete: false });\n    check rabbitmqClient->queueBind(\"MyQueue\", \"MyExchange\", \"routing-key\");\n```\n\nThis sample code will declare,\n- a durable auto-delete exchange of the type `rabbitmq:DIRECT_EXCHANGE`\n- a durable, non-exclusive, non-auto-delete queue with a well-known name\n\n#### Deleting Entities and Purging Queues\n\n- Delete a queue:\n```ballerina\n    check rabbitmqClient->queueDelete(\"MyQueue\");\n```\n- Delete a queue only if it is empty:\n```ballerina\n    check rabbitmqClient->queueDelete(\"MyQueue\", false, true);\n```\n- Delete a queue only if it is unused (does not have any consumers):\n```ballerina\n    check rabbitmqClient->queueDelete(\"MyQueue\", true, false);\n```\n- Delete an exchange:\n```ballerina\n    check rabbitmqClient->exchangeDelete(\"MyExchange\");\n```\n- Purge a queue (delete all of its messages):\n```ballerina\n    check rabbitmqClient->queuePurge(\"MyQueue\");\n```\n\n#### Publishing Messages\n\nTo publish a message to an exchange, use the `publishMessage()` function as follows:\n\n```ballerina\n    string message = \"Hello from Ballerina\";\n    check rabbitmqClient->publishMessage({ content: message.toBytes(), routingKey: queueName });\n``` \nSetting other properties of the message such as routing headers can be done by using the `BasicProperties` record with the appropriate values.\n\n```ballerina\n    rabbitmq:BasicProperties props = {\n       replyTo: \"reply-queue\"  \n    };\n    string message = \"Hello from Ballerina\";\n    check rabbitmqClient->publishMessage({ content: message.toBytes(), routingKey: queueName, properties: props });\n```\n\n#### Consuming Messages using Consumer Services\n\nThe most efficient way to receive messages is to set up a subscription using a Ballerina RabbitMQ `rabbitmq:Listener` and any number of consumer services. The messages will then be delivered automatically as they arrive rather than having to be explicitly requested. Multiple consumer services can be bound to one Ballerina RabbitMQ `rabbitmq:Listener`. The queue to which the service is listening is configured in the `rabbitmq:ServiceConfig` annotation of the service or else as the name of the service.\n\n1. Listen to incoming messages with the `onMessage` remote method:\n\n```ballerina\n    listener rabbitmq:Listener channelListener= new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n    \n    @rabbitmq:ServiceConfig {\n        queueName: \"MyQueue\"\n    }\n    service rabbitmq:Service on channelListener {\n        remote function onMessage(rabbitmq:Message message) {\n        }\n    }\n```\n\n2. Listen to incoming messages and reply directly with the `onRequest` remote method:\n\n```ballerina\n    listener rabbitmq:Listener channelListener= new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n    \n    @rabbitmq:ServiceConfig {\n        queueName: \"MyQueue\"\n    }\n    service rabbitmq:Service on channelListener {\n        remote function onRequest(rabbitmq:Message message) returns string {\n            return \"Hello Back!\";\n        }\n    }\n```\n\nThe `rabbitmq:Message` record received can be used to retrieve its contents.\n\n### Advanced Usage\n\n#### Client Acknowledgements\n\nThe message consuming is supported by mainly two types of acknowledgement modes, which are auto acknowledgements and client acknowledgements.\nClient acknowledgements can further be divided into two different types as positive and negative acknowledgements.\nThe default acknowledgement mode is auto-ack (messages are acknowledged immediately after consuming). The following examples show the usage of positive and negative acknowledgements.\n> WARNING: To ensure the reliability of receiving messages, use the client-ack mode.\n\n1. Positive client acknowledgement:\n```ballerina\n    listener rabbitmq:Listener channelListener= new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n    \n    @rabbitmq:ServiceConfig {\n        queueName: \"MyQueue\",\n        autoAck: false\n    }\n    service rabbitmq:Service on channelListener {\n        remote function onMessage(rabbitmq:Message message, rabbitmq:Caller caller) {\n            rabbitmq:Error? result = caller->basicAck();\n        }\n    }\n```\n\n2. Negative client acknowledgement:\n```ballerina\n    listener rabbitmq:Listener channelListener= new(rabbitmq:DEFAULT_HOST, rabbitmq:DEFAULT_PORT);\n    \n    @rabbitmq:ServiceConfig {\n        queueName: \"MyQueue\",\n        autoAck: false\n    }\n    service rabbitmq:Service on channelListener {\n        remote function onMessage(rabbitmq:Message message) {\n            rabbitmq:Error? result = caller->basicNack(true, requeue = false);\n        }\n    }\n```\n\nThe negatively-acknowledged (rejected) messages can be re-queued by setting the `requeue` to `true`.", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/rabbitmq/1.1.0-beta.1", "packageUrl":"/ballerinax/rabbitmq/1.1.0-beta.1"}], "pullCount":5}, {"organization":"ballerinax", "name":"kafka", "version":"2.1.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/kafka/2.1.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/kafka/2.1.0-beta.1/ballerinax-kafka-java11-2.1.0-beta.1.bala", "digest":"sha-256=7159ab5a705431b87b813b41b883ad49eba67c8686520ddb7fb630f745703590", "summary":"", "readme":"## Overview\n\nThe `kafka` package is one of the standard library packages of the <a target=\"_blank\" href=\"https:\/\/ballerina.io \/\"> Ballerina<\/a> language.\n\nThis package provides support for the Apache Kafka event streaming platform. This helps to communicate with Kafka brokers as Producers and Consumers. Apache Kafka is an open-source distributed event streaming platform used for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.  \n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina\nStandard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n\n- Discuss about code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag.", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622648489000, "modules":[{"name":"kafka", "summary":"", "readme":"## Overview\n\nThis module provides an implementation to interact with Kafka Brokers via Kafka Consumer and Kafka Producer clients.\n\nApache Kafka is an open-source distributed event streaming platform used for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.\n\nThis module supports Kafka 1.x.x and 2.0.0 versions.\n\n### Consumer and Producer\n#### Kafka Producer\nA Kafka producer is a Kafka client that publishes records to the Kafka cluster. The producer is thread-safe and sharing a single producer instance across threads will generally be faster than having multiple instances. When working with a Kafka producer, the first thing to do is to initialize the producer.\nFor the producer to execute successfully, an active Kafka broker should be available.\n\nThe code snippet given below initializes a producer with the basic configuration.\n```ballerina\nimport ballerinax\/kafka;\n\nkafka:ProducerConfiguration producerConfiguration = {\n    clientId: \"basic-producer\",\n    acks: \"all\",\n    retryCount: 3\n};\n\nkafka:Producer kafkaProducer = check new (kafka:DEFAULT_URL, producerConfiguration);\n```\n#### Kafka Consumer\nA Kafka consumer is a subscriber responsible for reading records from one or more topics and one or more partitions of a topic. When working with a Kafka consumer, the first thing to do is initialize the consumer.\nFor the consumer to execute successfully, an active Kafka broker should be available.\n\nThe code snippet given below initializes a consumer with the basic configuration.\n```ballerina\nkafka:ConsumerConfiguration consumerConfiguration = {\n    groupId: \"group-id\",    \/\/ Unique string that identifies the consumer\n    offsetReset: \"earliest\",    \/\/ Offset reset strategy if no initial offset\n    topics: [\"kafka-topic\"]\n};\n\nkafka:Consumer kafkaConsumer = check new (kafka:DEFAULT_URL, consumerConfiguration);\n```\n### Listener\nThe Kafka consumer can be used as a listener to a set of topics without the need to manually `poll` the messages.\n\nYou can use the `Caller` to manually commit the offsets of the messages that are read by the service. The following code snippet shows how to initialize and define the listener and how to commit the offsets manually.\n```ballerina\nkafka:ConsumerConfiguration consumerConfigs = {\n    groupId: \"group-id\",\n    topics: [\"kafka-topic-1\"],\n    pollingInterval: 1,\n    autoCommit: false\n};\n\nlistener kafka:Listener kafkaListener = new (kafka:DEFAULT_URL, consumerConfiguration);\n\nservice kafka:Service on kafkaListener {\n    remote function onConsumerRecord(kafka:Caller caller, kafka:ConsumerRecord[] records) {\n        \/\/ processes the records\n        ...\n        \/\/ commits the offsets manually\n        kafka:Error? commitResult = caller->commit();\n\n        if (commitResult is error) {\n            io:println(\"Error occurred while committing the offsets for the consumer \", 'error = commitResult);\n        }\n    }\n}\n```\n### Data Serialization\nSerialization is the process of converting data into a stream of bytes that is used for transmission. Kafka\nstores and transmits these bytes of arrays in its queue. Deserialization does the opposite of serialization\nin which bytes of arrays are converted into the desired data type.\n\nCurrently, this module only supports the `byte array` data type for both the keys and values. The following code snippets\nshow how to produce and read a message from Kafka.\n```ballerina\nstring message = \"Hello World, Ballerina\";\nstring key = \"my-key\";\n\/\/ converts the message and key to a byte array\ncheck kafkaProducer->send({ topic: \"test-kafka-topic\", key: key.toBytes(), value: message.toBytes() });\n```\n```ballerina\nkafka:ConsumerRecord[] records = check kafkaConsumer->poll(1);\n\nforeach var kafkaRecord in records {\n    byte[] messageContent = kafkaRecord.value;\n    \/\/ tries to generate the string value from the byte array\n    string result = check string:fromBytes(messageContent);\n    io:println(\"The result is : \", result);\n}\n```\n### Concurrency\nIn Kafka, records are grouped into smaller units called partitions. These can be processed independently without\ncompromising the correctness of the results and lays the foundation for parallel processing. This can be achieved by\nusing multiple consumers within the same group each reading and processing data from a subset of topic partitions and \nrunning in a single thread.\n\nTopic partitions are assigned to consumers automatically or you can manually assign topic partitions.\n\nThe following code snippet joins a consumer to the `consumer-group` and assigns it to a topic partition manually.\n```ballerina\nkafka:ConsumerConfiguration consumerConfigs = {\n    \/\/ `groupId` determines the consumer group\n    groupId: \"consumer-group\",\n    pollingInterval: 1,\n    autoCommit: false\n};\n\nkafka:Consumer kafkaConsumer = check new (kafka:DEFAULT_URL, consumerConfiguration);\n\/\/ creates a topic partition\nkafka:TopicPartition topicPartition = {\n    topic: \"kafka-topic-1\",\n    partition: 1\n};\n\/\/ passes the topic partitions to the assign function as an array\ncheck kafkaConsumer->assign([topicPartition]);\n```", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/kafka/2.1.0-beta.1", "packageUrl":"/ballerinax/kafka/2.1.0-beta.1"}], "pullCount":10}, {"organization":"ballerinax", "name":"nats", "version":"1.1.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/nats/1.1.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/nats/1.1.0-beta.1/ballerinax-nats-java11-1.1.0-beta.1.bala", "digest":"sha-256=83ec7205cede556c67d2c09699a8f9b074d66b46efc36619d6efc1866fa018b2", "summary":"", "readme":"## Package Overview\n\nThe `nats` library is one of the standard library packages of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\n\/\"> Ballerina <\/a> language.\n\nThis package provides the capability to send and receive messages by connecting to the NATS server. NATS makes it easy for programs to communicate across different environments, languages, cloud providers, and on-premise systems. Clients connect to the NATS system usually via a single URL and then subscribe or publish messages to a subject.\n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina Standard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n\n- Discuss code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag.", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622620626000, "modules":[{"name":"nats", "summary":"", "readme":"## Overview\n\nThis module provides the capability to send and receive messages by connecting to the NATS server.\n\nNATS messaging enables the communication of data that is segmented into messages among computer applications and services. Data is encoded and framed as a message and sent by a publisher. The message is received, decoded, and processed by one or more subscribers. NATS makes it easy for programs to communicate across different environments, languages, cloud providers, and on-premise systems. Clients connect to the NATS system usually via a single URL and then subscribe or publish messages to a subject.\n\n### Basic Usage\n\n#### Setting up the Connection\n\nFirst, you need to set up the connection with the NATS Basic server. The following ways can be used to connect to a\nNATS Basic server.\n\n1. Connect to a server using the default URL:\n```ballerina\nnats:Client natsClient = check new(nats:DEFAULT_URL);\n```\n\n2. Connect to a server using the URL:\n```ballerina\nnats:Client natsClient = check new(\"nats:\/\/serverone:4222\");\n```\n\n3. Connect to one or more servers with custom configurations:\n```ballerina\nnats:ConnectionConfiguration config = {\n    connectionName: \"my-nats\",\n    noEcho: true\n};\nnats:Client natsClient = check new([\"nats:\/\/serverone:4222\",  \"nats:\/\/servertwo:4222\"],  config);\n```\n\n#### Publishing Messages\n\n##### Publishing Messages to the NATS Basic Server\n\nOnce connected, publishing is accomplished via one of the three methods below.\n\n1. Publish with the subject and the message content:\n```ballerina\nstring message = \"hello world\";\nnats:Error? result = \n    natsClient->publishMessage({ content: message.toBytes(), subject: \"demo.nats.basic\"});\n```\n\n2. Publish as a request that expects a reply:\n```ballerina\nstring message = \"hello world\";\nnats:Message|nats:Error reqReply = \n    natsClient->requestMessage({ content: message.toBytes(), subject: \"demo.nats.basic\"}, 5);\n```\n\n3. Publish messages with a `replyTo` subject:\n```ballerina\nstring message = \"hello world\";\nnats:Error? result = natsClient->publish({ content: message.toBytes(), subject: \"demo.nats.basic\",\n                                                    replyTo: \"demo.reply\" });\n```\n\n#### Listening to Incoming Messages\n\n##### Listening to Messages from a NATS Server\n\n1. Listen to incoming messages with the `onMessage` remote method:\n```ballerina\n\/\/ Binds the consumer to listen to the messages published to the 'demo.example.*' subject\n@nats:ServiceConfig {\n    subject: \"demo.example.*\"\n}\nservice nats:Service on new nats:Listener(nats:DEFAULT_URL) {\n\n    remote function onMessage(nats:Message message) {\n    }\n}\n```\n\n2. Listen to incoming messages and reply directly with the `onRequest` remote method:\n```ballerina\n\/\/ Binds the consumer to listen to the messages published to the 'demo.example.*' subject\n@nats:ServiceConfig {\n    subject: \"demo.example.*\"\n}\nservice nats:Service on new nats:Listener(nats:DEFAULT_URL) {\n\n    \/\/ The returned message will be published to the replyTo subject of the consumed message\n    remote function onRequest(nats:Message message) returns string? {\n        return \"Reply Message\";\n    }\n}\n```\n\n### Advanced Usage\n\n#### Setting up TLS\n\nThe Ballerina NATS module allows the use of TLS in communication. This setting expects a secure socket to be\nset in the connection configuration as shown below.\n\n##### Configuring TLS in the `nats:Listener`\n```ballerina\nnats:SecureSocket secured = {\n    cert: {\n        path: \"<path>\/truststore.p12\",\n        password: \"password\"\n    },\n    key: {\n        path: \"<path>\/keystore.p12\",\n        password: \"password\"\n    }\n};\nnats:Listener natsListener = check new(\"nats:\/\/serverone:4222\", secureSocket = secured);\n```\n\n##### Configuring TLS in the `nats:Client`\n```ballerina\nnats:SecureSocket secured = {\n    cert: {\n        path: \"<path>\/truststore.p12\",\n        password: \"password\"\n    },\n    key: {\n        path: \"<path>\/keystore.p12\",\n        password: \"password\"\n    }\n};\nnats:Client natsClient = check new(\"nats:\/\/serverone:4222\", secureSocket = secured);\n```", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/nats/1.1.0-beta.1", "packageUrl":"/ballerinax/nats/1.1.0-beta.1"}], "pullCount":5}, {"organization":"ballerinax", "name":"stan", "version":"1.1.0-beta.1", "platform":"java11", "languageSpecificationVersion":"2021R1", "URL":"/ballerinax/stan/1.1.0-beta.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/stan/1.1.0-beta.1/ballerinax-stan-java11-1.1.0-beta.1.bala", "digest":"sha-256=a788887012ef260ba24c2cdd8358f0045fc9c152064b2856a12f6e18de24e7f6", "summary":"", "readme":"## Package Overview\n\nThe `stan` library is one of the standard library packages of the<a target=\"_blank\" href=\"https:\/\/ballerina.io\n\/\"> Ballerina <\/a> language.\n\nThis package provides the capability to send and receive messages by connecting to the NATS streaming server. NATS Streaming is a data streaming system powered by NATS that adds persistence, message replay, durable subscriptions, etc. to NATS.\n\n### Report Issues\n\nTo report bugs, request new features, start new discussions, view project boards, etc., go to the [Ballerina Standard Library parent repository](https:\/\/github.com\/ballerina-platform\/ballerina-standard-library).\n\n### Useful Links\n\n- Discuss code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n- Chat live with us via our [Slack channel](https:\/\/ballerina.io\/community\/slack\/).\n- Post all technical questions on Stack Overflow with the [#ballerina](https:\/\/stackoverflow.com\/questions\/tagged\/ballerina) tag.", "template":false, "licenses":[], "authors":[], "sourceCodeLocation":"", "keywords":[], "ballerinaVersion":"slbeta1", "icon":"", "createdDate":1622620489000, "modules":[{"name":"stan", "summary":"", "readme":"## Overview\n\nThis module provides the capability to send and receive messages by connecting to the NATS streaming server.\n\nNATS Streaming is a data streaming system powered by NATS. It embeds, extends, and interoperates seamlessly with the core NATS platform. In addition to the features of the core NATS platform, NATS Streaming provides advanced functionality such as persistence, message replay, durable subscriptions, etc.\n\n### Basic Usage\n\n#### Setting up the Connection\n\nFirst, you need to set up the connection with the NATS Streaming server. The following ways can be used to connect to a\nNATS Streaming server by initializing the `stan:Client` or `stan:Listener`.\n\n1. Connect to a server using the default URL:\n```ballerina\nstan:Client stanClient = check new(stan:DEFAULT_URL);\n```\n\n2. Connect to a server using a specific URL:\n```ballerina\nstan:Client stanClient = check new(\"nats:\/\/localhost:4222\");\n```\n\n3. Connect to a server with the custom configurations:\n```ballerina\nstan:StreamingConfiguration config = {\n  clusterId: \"test-cluster\",\n  ackTimeout: 30,\n  connectionTimeout: 5;\n};\nstan:Client stanClient = check new(\"nats:\/\/localhost:4222\",  config);\n```\n\n#### Publishing Messages\n\nOnce connected, use the `publishMessage` function to publish messages to a given subject as shown below.\n\n```ballerina\nstring message = \"hello world\";\ncheck producer->publishMessage({ content: message, subject: \"demo\" });\n```\n\n#### Listening to Incoming Messages\n\n```ballerina\n\/\/ Binds the consumer to listen to the messages published to the 'demo' subject.\n@stan:ServiceConfig {\n    subject: \"demo\"\n}\nservice stan:Service on subscription {\n    \n    remote function onMessage(stan:Message message) {\n    }\n}\n```\n### Advanced Usage\n\n#### Setting up TLS\n\nThe Ballerina NATS streaming module allows the use of TLS in communication. This setting expects a secure socket to be\nset in the connection configuration as shown below.\n\n##### Configuring TLS in the `stan:Listener`\n```ballerina\nstan:SecureSocket secured = {\n    cert: {\n        path: \"<path>\/truststore.p12\",\n        password: \"password\"\n    },\n    key: {\n        path: \"<path>\/keystore.p12\",\n        password: \"password\"\n    }\n};\nstan:Listener stanListener = check new(\"nats:\/\/serverone:4222\", secureSocket = secured);\n```\n\n##### Configuring TLS in the `stan:Client`\n```ballerina\nstan:SecureSocket secured = {\n    cert: {\n        path: \"<path>\/truststore.p12\",\n        password: \"password\"\n    },\n    key: {\n        path: \"<path>\/keystore.p12\",\n        password: \"password\"\n    }\n};\nstan:Client stanClient = check new(\"nats:\/\/serverone:4222\", secureSocket = secured);\n```\n\n#### Acknowledging Messages\n\nNATS Streaming offers At-Least-Once delivery semantics meaning that once a message has been delivered to an eligible subscriber if an acknowledgment is not received within the configured timeout interval, NATS Streaming will attempt redelivery of the message.\nIf you need to acknowledge the incoming messages manually, make sure to set the `autoAck` status of the service config to false as shown below.\n\n```ballerina\n\/\/ Set `autoAck` to false.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    autoAck: false\n}\nservice stan:Service on subscription {\n    \n    remote function onMessage(stan:Message message, stan:Caller caller) {\n        \/\/ Manually acknowledge the message received.\n        stan:Error? ackResult = caller->ack();\n    }\n}\n```\n\n#### Durable Subscriptions\n\nDurable subscriptions allow clients to assign a durable name to a subscription when it is created. Doing this causes the NATS Streaming server to track the last-acknowledged message for that `clientID` + `durable name` so that only messages since the last acknowledged message will be delivered to the client. These subscriptions will survive a server restart.\n\n```ballerina\n\n\/\/ Set the client ID for the listener.\nlistener stan:Listener lis = new(stan:DEFAULT_URL, clientId = \"c0\");\n\n\/\/ Set the durable name.\n@stan:ServiceConfig {\n    subject: \"demo\",\n    durableName: \"sample-name\"\n}\nservice stan:Service on lis {\n    remote function onMessage(stan:Message message) {\n    }\n}\n```", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/stan/1.1.0-beta.1", "packageUrl":"/ballerinax/stan/1.1.0-beta.1"}], "pullCount":5}, {"organization":"ballerinax", "name":"redis", "version":"0.99.5", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/redis/0.99.5", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/redis/0.99.5/ballerinax-redis-java11-0.99.5.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"## Module Overview\n\nThis module provides the functionality required to access and manipulate key-value data stored in a Redis database.\nCurrently the provided functionality is limited to usage Redis as a database\/cache. Broker functionality of Redis is\nnot yet exposed through this module.\n\n### Client\n\nTo access a Redis datasource, you must first create a `client`object. Create a client of the redis client type\n(i.e. `redis:Client`) and provide the necessary connection parameters. This will create a connection\/pool of\nconnections to the given Redis database. A sample for creating a client with a Redis client can be found\nbelow.\n\n### Database operations\n\nOnce the client is created, redis commands can be executed through that client.\n\n## Samples\n\n### Creating a Client\n\n```ballerina\nredis:Client conn = check new ({\n    host: \"localhost:6379\",\n    password: \"\",\n    options: { connectionPooling: true, isClusterConnection: false, ssl: false,\n        startTls: false, verifyPeer: false, database: 0, connectionTimeout: \n        500 }\n});\n```\n\nThis module provides API functions for manipulating Redis String, Hash, List, Set and Sorted Set data types and\nbasic Redis key\/connection commands. For the full list of available configuration options refer the API docs of the\nclient.\n\n## Example Usage\n```ballerina\n\/\/ Ping Server\nstring result = checkpanic conn->ping();\nio:println(result);\n\n\/\/ String Operations\nvar stringSetresult = conn->set(\"Project\", \"Ballerina\");\n\nif (stringSetresult is string) {\n    io:println(\"Reply from the server: \" + stringSetresult);\n} else {\n    io:println(\"Error occurred while calling `setVal`\");\n}\n\nvar value = conn->get(\"Project\");\n\nif (value is string) {\n    io:println(\"Reply from the server: \" + value);\n} else if (value is ()) {\n    io:println(\"Key does not exist\");\n} else {\n    io:println(\"Error occurred while calling `get`\");\n}\n\n\/\/ List Operations\n\nvar listPushresult = conn->lPush(\"NumberList\", [\"One\", \"Two\"]);\n\nif (listPushresult is int) {\n    io:println(\"Number of elements pushed: \" + listPushresult);\n} else {\n    io:println(\"Error occurred while calling `lPush`\");\n}\n\nvar lPopResult = conn->lPop(\"NumberList\");\n\nif (lPopResult is string) {\n    io:println(\"Popped element: \" + lPopResult);\n} else if (lPopResult is ()) {\n    io:println(\"Key does not exist\");\n} else {\n    io:println(\"Error occurred while calling `lPop`\");\n}\n\n\/\/ Set Oprerations\n\nvar setAddResult = conn->sAdd(\"NumberSet\", [\"1\", \"2\", \"3\"]);\n\nif (setAddResult is int) {\n    io:println(\"Number of elements added: \" + setAddResult);\n} else {\n    io:println(\"Error occurred while calling `sAdd`\");\n}\n\nvar setCardResult = conn->sCard(\"NumberSet\");\n\nif (setCardResult is int) {\n    io:println(\"Number of memebers in the set: \" + setCardResult);\n} else {\n    io:println(\"Error occurred while calling `sCard`\");\n}\n\n\/\/ Hash Operations\n\nvar hashSetResult = conn->hSet(\"HashKey\", \"Name\", \"Manuri\");\n\nif (hashSetResult is boolean) {\n    io:println(\"Hash set status: \" + hashSetResult);\n} else {\n    io:println(\"Error occurred while calling `hSet`\");\n}\n\nvar hashGetResult = conn->hGet(\"HashKey\", \"Name\");\n\nif (hashGetResult is string) {\n    io:println(\"Value of the hash field: \" + hashGetResult);\n} else {\n    io:println(\"Error occurred while calling `hGet`\");\n}\n\n\/\/ Closing the client\n\nconn.stop();\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-redis", "keywords":["redis", "in-memory-database"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620323330000, "modules":[{"name":"redis", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/redis/0.99.5", "packageUrl":"/ballerinax/redis/0.99.5"}], "pullCount":24}, {"organization":"ballerinax", "name":"azure_storage_service", "version":"0.1.1", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/azure_storage_service/0.1.1", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/azure_storage_service/0.1.1/ballerinax-azure_storage_service-java11-0.1.1.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Azure Storage Service Connectors\n\n[![Build Status](https:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-storage-service\/workflows\/CI\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-storage-service\/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https:\/\/img.shields.io\/github\/last-commit\/ballerina-platform\/module-ballerinax-azure-storage-service.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-storage-service\/commits\/master)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\nConnect to Azure Storage Services using Ballerina.\n\n# Introduction\n\n## What is Azure Storage Service\n\n[Azure Storage Service](https:\/\/docs.microsoft.com\/en-us\/azure\/storage\/common\/storage-introduction) is a highly \navailable, scalable, secure, durable and redundant cloud storage solution form Microsoft. There are four types of \nstorage which are Blob Storage, File Storage, Queue Storage and Table Storage.\n\n# Prerequisites\n\n* Azure Account to Access Azure Portal https:\/\/docs.microsoft.com\/en-us\/learn\/modules\/create-an-azure-account\/\n\n* Azure Storage Account https:\/\/docs.microsoft.com\/en-us\/learn\/modules\/create-azure-storage-account\/\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Ballerina SL Alpha 5 Installed\nBallerina Swan Lake Alpha 5 is required. \n\n* Shared Access Signature (SAS) or One of the Access Key for authentication\n\n\n## Compatibility\n\n|                      |  Version           |\n|----------------------|------------------- |\n| Ballerina            | Swan Lake Alpha 5  |\n| Azure Storage Service|     2019-12-12     |\n\n\n## Azure Storage Service - Blobs\nPlease check the [Blob Service Connector Documentation](https:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-storage-service\/blob\/main\/modules\/blobs\/README.md) to get more information about the Azure Storage Blob Service Connector.\n\n## Azure Storage Service - Files\nPlease check the [File Service Connector Documentation](https:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-storage-service\/blob\/main\/modules\/files\/README.md) to get more information about the Azure Storage File Service Connector.", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-azure-storage-service", "keywords":["azure", "storage", "blob", "file"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620303780000, "modules":[{"name":"azure_storage_service", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/azure_storage_service/0.1.1", "packageUrl":"/ballerinax/azure_storage_service/0.1.1"}], "pullCount":25}, {"organization":"ballerinax", "name":"asb", "version":"0.1.3", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/asb/0.1.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/asb/0.1.3/ballerinax-asb-java11-0.1.3.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Azure Service Bus Module\n\nConnects to Microsoft Azure Service Bus using Ballerina.\n\n# Module Overview\nMicrosoft Azure Service Bus is a fully managed enterprise message broker with message queues and publish-subscribe \ntopics. The primary wire protocol for Service Bus is Advanced Messaging Queueing Protocol (AMQP) 1.0, an open ISO\/IEC \nstandard. Service Bus provides a Microsoft supported native API and this module make use of this public API. \nService Bus service APIs access the Service Bus service directly, and perform various management operations at the \nentity level, rather than at the namespace level (such as sending a message to a queue). This module supports these \nbasic operations. These APIs use SAS authentication and this module supports SAS authentication.  \n\n# Compatibility\n|                     |    Version                  |\n|:-------------------:|:---------------------------:|\n| Ballerina Language  | Swan-Lake-Alpha5            |\n| Service Bus API     | v3.5.1                      |\n\n# Supported Operations\n\n## Operations on Connecting to the ASB\nThe `ballerinax\/asb` module contains operations related to connecting with the azure service bus. It includes operations \nto create SenderConnection, close SenderConnection, create ReceiverConnection, close ReceiverConnection. \n\n## Operations on Queue\nThe `ballerinax\/asb` module contains operations on azure service bus Queue. It includes operations to send message to \nqueue, receive message from queue, receive messages from queue, send batch of messages to queue, receive batch of \nmessages from queue, complete messages from queue, complete message from queue, and abandon message from queue.  \n\n## Operations on Topic\/Subscription\nThe `ballerinax\/asb` module contains operations on azure service bus Topic\/Subscription. It includes operations to send \nmessage to topic, receive message from subscription, receive messages from subscription, send batch of messages to \ntopic, receive batch of messages from subscription, complete messages from subscription, complete message from \nsubscription, and abandon message from subscription.  \n\n## Listener Capabilities\nThe `ballerinax\/asb` module contains operations related to asynchronous message listening capabilities from the azure \nservice bus. It includes operations to attach service, start listening, detach service, graceful stop listening, and \nimmediate stop listening.\n\n# Prerequisites:\n\n* An Azure account and subscription.\n  If you don't have an Azure subscription, [sign up for a free Azure account](https:\/\/azure.microsoft.com\/free\/).\n\n* A Service Bus namespace.\n  If you don't have [a service bus namespace](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-create-namespace-portal),\n  learn how to create your Service Bus namespace.\n\n* A messaging entity, such as a queue, topic or subscription.\n  If you don't have these items, learn how to\n    * [Create a queue in the Azure portal](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#create-a-queue-in-the-azure-portal)\n    * [Create a Topic using the Azure portal](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-topics-subscriptions-portal#create-a-topic-using-the-azure-portal)\n    * [Create Subscriptions to the Topic](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-topics-subscriptions-portal#create-subscriptions-to-the-topic)\n\n* Java 11 Installed\n  Java Development Kit (JDK) with version 11 is required.\n\n* Ballerina SLAlpha5 Installed\n  Ballerina Swan Lake Alpha 5 is required.\n\n* Shared Access Signature (SAS) Authentication Credentials\n    * Connection String\n    * Entity Path\n\n## Configuration\nInstantiate the connector by giving authorization credentials that a client application can use to send\/receive messages\nto\/from the queue\/topic\/subscription.\n\n### Getting the authorization credentials\n\n#### For Service Bus Queues\n\n1. Make sure you have an Azure subscription. If you don't have an Azure subscription, you can create a\n   [free account](https:\/\/azure.microsoft.com\/en-us\/free\/) before you begin.\n\n2. [Create a namespace in the Azure portal](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#create-a-namespace-in-the-azure-portal)\n\n3. [Get the connection string](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#get-the-connection-string)\n\n4. [Create a queue in the Azure portal & get Entity Path](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#create-a-queue-in-the-azure-portal). \n   It is in the format ‘queueName’.\n\n#### For Service Bus Topics and Subscriptions\n\n1. Make sure you have an Azure subscription. If you don't have an Azure subscription, you can create a\n   [free account](https:\/\/azure.microsoft.com\/en-us\/free\/) before you begin.\n\n2. [Create a namespace in the Azure portal](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#create-a-namespace-in-the-azure-portal)\n\n3. [Get the connection string](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-portal#get-the-connection-string)\n\n4. [Create a topic in the Azure portal & get Entity Path](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-topics-subscriptions-portal#create-a-topic-using-the-azure-portal). \n   It's in the format ‘topicName‘.\n\n5. [Create a subscription in the Azure portal & get Entity Path](https:\/\/docs.microsoft.com\/en-us\/azure\/service-bus-messaging\/service-bus-quickstart-topics-subscriptions-portal#create-subscriptions-to-the-topic). \n   It’s in the format ‘topicName\/subscriptions\/subscriptionName’.\n\n# Quickstart(s):\n\n## Send and Receive Messages from the Azure Service Bus Queue\n\nThis is the simplest scenario to send and receive messages from an Azure Service Bus queue. You need to obtain \na connection string of the name space and an entity path name of the queue you want to send and receive messages from. \n\n### Step 1: Import the Azure Service Bus Ballerina Library\nFirst, import the ballerinax\/asb module into the Ballerina project.\n```ballerina\n    import ballerinax\/asb as asb;\n```\n\n### Step 2: Initialize the Azure Service Bus Client Configuration\nYou can now make the connection configuration using the connection string.\n```ballerina\n    asb:AsbConnectionConfiguration config = {\n       connectionString: <CONNECTION_STRING>\n    };\n```\n\n### Step 3: Create an Azure Service Bus Client using the connection configuration\nYou can now make an Azure service bus client using the connection configuration.\n```ballerina\n    asb:AsbClient asbClient = new (config);\n```\n\n### Step 4: Create a Queue Sender using the Azure service bus client\nYou can now make a sender connection using the Azure service bus client. Provide the `queueName` as a parameter.\n```ballerina\n    handle queueSender = checkpanic asbClient->createQueueSender(queueName);\n```\n\n### Step 5 : Create a Queue Receiver using the Azure service bus client\nYou can now make a receiver connection using the connection configuration. Provide the `queueName` as a parameter. \nOptionally you can provide the receive mode which is PEEKLOCK by default.\n```ballerina\n    handle queueReceiver = checkpanic asbClient->createQueueReceiver(queueName, asb:RECEIVEANDDELETE);\n```\n\n### Step 6: Initialize the Input Values\nInitialize the message to be sent with message body, optional parameters and properties.\n```ballerina\n    \/\/ Input values\n    string stringContent = \"This is My Message Body\"; \n    byte[] byteContent = stringContent.toBytes();\n    map<string> properties = {a: \"propertyValue1\", b: \"propertyValue2\"};\n    int timeToLive = 60; \/\/ In seconds\n    int serverWaitTime = 60; \/\/ In seconds\n\n    asb:ApplicationProperties applicationProperties = {\n        properties: {a: \"propertyValue1\", b: \"propertyValue2\"}\n    };\n\n    asb:Message message1 = {\n        body: byteContent,\n        contentType: asb:TEXT,\n        timeToLive: timeToLive,\n        applicationProperties: applicationProperties\n    };\n```\n\n### Step 7: Send a Message to Azure Service Bus\nYou can now send a message to the configured azure service bus entity with message body, optional parameters and \nproperties. Here we have shown how to send a text message parsed to the byte array format.\n```ballerina\n    checkpanic asbClient->send(queueSender, message1);\n```\n\n### Step 8: Receive a Message from Azure Service Bus\nYou can now receive a message from the configured azure service bus entity.\n```ballerina\n    asb:Message|asb:Error? messageReceived = asbClient->receive(queueReceiver, serverWaitTime);\n\n    if (messageReceived is asb:Message) {\n        log:printInfo(\"Reading Received Message : \" + messageReceived.toString());\n    } else if (messageReceived is ()) {\n        log:printError(\"No message in the queue.\");\n    } else {\n        log:printError(\"Receiving message via Asb receiver connection failed.\");\n    }\n```\n\n### Step 9: Close Sender Connection\nYou can now close the sender connection.\n```ballerina\n    checkpanic asbClient->closeSender(queueSender);\n```\n\n### Step 10: Close Receiver Connection\nYou can now close the receiver connection.\n```ballerina\n    checkpanic asbClient->closeReceiver(queueReceiver);\n```\n\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-service-bus\/blob\/main\/asb-ballerina\/samples\/send_and_receive_message_from_queue.bal\n\n## Send and Listen to Messages from the Azure Service Bus Queue\n\nThis is the simplest scenario to listen to messages from an Azure Service Bus queue. You need to obtain a connection \nstring of the name space and an entity path name of the queue you want to listen messages from. \n\n### Step 1: Import the Azure Service Bus Ballerina Library\nFirst, import the ballerinax\/asb module into the Ballerina project.\n```ballerina\n    import ballerinax\/asb as asb;\n```\n\n### Step 2: Initialize the Azure Service Bus Client Configuration\nYou can now make the connection configuration using the connection string.\n```ballerina\n    asb:ConnectionConfiguration config = {\n       connectionString: <CONNECTION_STRING>\n    };\n```\n\n### Step 3: Create an Azure Service Bus Client using the connection configuration\nYou can now make an Azure service bus client using the connection configuration.\n```ballerina\n    asb:AsbClient asbClient = new (config);\n```\n\n### Step 4: Create a Queue Sender using the Azure service bus client\nYou can now make a sender connection using the Azure service bus client. Provide the `queueName` as a parameter.\n```ballerina\n    handle queueSender = checkpanic asbClient->createQueueSender(queueName);\n```\n\n### Step 5: Initialize the Input Values\nInitialize the message to be sent with message body, optional parameters and properties.\n```ballerina\n    \/\/ Input values\n    string stringContent = \"This is My Message Body\"; \n    byte[] byteContent = stringContent.toBytes();\n    map<string> properties = {a: \"propertyValue1\", b: \"propertyValue2\"};\n    int timeToLive = 60; \/\/ In seconds\n    int serverWaitTime = 60; \/\/ In seconds\n\n    asb:ApplicationProperties applicationProperties = {\n        properties: {a: \"propertyValue1\", b: \"propertyValue2\"}\n    };\n\n    asb:Message message1 = {\n        body: byteContent,\n        contentType: asb:TEXT,\n        timeToLive: timeToLive,\n        applicationProperties: applicationProperties\n    };\n```\n\n### Step 6: Send a Message to Azure Service Bus\nYou can now send a message to the configured azure service bus entity with message body, optional parameters and \nproperties. Here we have shown how to send a text message parsed to the byte array format.\n```ballerina\n    checkpanic asbClient->send(queueSender, message1);\n```\n\n### Step 7: Create a service object with the service configuration and the service logic to execute based on the message received\nYou can now create a service object with the service configuration specified using the @asb:ServiceConfig annotation. \nWe need to give the connection string and the entity path of the queue we are to listen messages from. We can optionally provide the receive mode. Default mode is the PEEKLOCK mode. Then we can give the service logic to execute when a message is received inside the onMessage remote function.\n```ballerina\n    asb:Service asyncTestService =\n    @asb:ServiceConfig {\n        entityConfig: {\n            connectionString: <CONNECTION_STRING>,\n            entityPath: <ENTITY_PATH>,\n            receiveMode: <PEEKLOCK_OR_RECEIVEONDELETE>\n        }\n    }\n    service object {\n        remote function onMessage(asb:Message message) {\n            log:printInfo(\"The message received: \" + message.toString());\n            \/\/ Write your logic here\n        }\n    };\n```\n\n### Step 8: Initialize the ASB Listener  and Asynchronously listen to messages from the Azure Service Bus Queue\nYou can now initialize the ASB Listener and attach the service object with the listener. Then the user can start the \nlistener and asynchronously listen to messages from the azure service bus connection and execute the service logic \nbased on the message received. Here we have sent the current worker to sleep for 20 seconds. You can detach the service \nfrom the listener endpoint at any instance and stop listening to messages. You can gracefully stop listening by \ndetaching from the listener and by terminating the connection. You can also immediately stop listening by terminating \nthe connection with the Azure Service Bus.\n```ballerina\n    asb:Listener? channelListener = new();\n    if (channelListener is asb:Listener) {\n        checkpanic channelListener.attach(asyncTestService);\n        checkpanic channelListener.'start();\n        log:printInfo(\"start listening\");\n        runtime:sleep(20);\n        log:printInfo(\"end listening\");\n        checkpanic channelListener.detach(asyncTestService);\n        checkpanic channelListener.gracefulStop();\n        checkpanic channelListener.immediateStop();\n    }\n```\n\n### Step 8: Close Sender Connection\nYou can now close the sender connection.\n```ballerina\n    checkpanic asbClient->closeSender(queueSender);\n```\n\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-service-bus\/blob\/main\/asb-ballerina\/samples\/async_consumer.bal\n\n\n# Samples: \n\n1. Send and Receive Batch from Queue\nThis is the basic scenario of sending and receiving a batch of messages from a queue. A user must create a sender \nconnection and a receiver connection with the azure service bus to send and receive a message. The message is \npassed as a parameter with optional parameters and properties to the send operation. The user can \nreceive the array of Message objects at the other receiver end.\n\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-service-bus\/blob\/main\/asb-ballerina\/samples\/send_and_receive_batch_from_queue.bal\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/asb;\n\n\/\/ Connection Configurations\nconfigurable string connectionString = ?;\nconfigurable string queueName = ?;\n\npublic function main() {\n\n    \/\/ Input values\n    string stringContent = \"This is My Message Body\"; \n    byte[] byteContent = stringContent.toBytes();\n    map<string> properties = {a: \"propertyValue1\", b: \"propertyValue2\"};\n    int timeToLive = 60; \/\/ In seconds\n    int serverWaitTime = 60; \/\/ In seconds\n    int maxMessageCount = 2;\n\n    asb:ApplicationProperties applicationProperties = {\n        properties: properties\n    };\n\n    asb:Message message1 = {\n        body: byteContent,\n        contentType: asb:TEXT,\n        timeToLive: timeToLive\n    };\n\n    asb:Message message2 = {\n        body: byteContent,\n        contentType: asb:TEXT,\n        timeToLive: timeToLive\n    };\n\n    asb:MessageBatch messages = {\n        messageCount: 2,\n        messages: [message1, message2]\n    };\n\n    asb:AsbConnectionConfiguration config = {\n        connectionString: connectionString\n    };\n\n    asb:AsbClient asbClient = new (config);\n\n    log:printInfo(\"Creating Asb sender connection.\");\n    handle queueSender = checkpanic asbClient->createQueueSender(queueName);\n\n    log:printInfo(\"Creating Asb receiver connection.\");\n    handle queueReceiver = checkpanic asbClient->createQueueReceiver(queueName, asb:RECEIVEANDDELETE);\n\n    log:printInfo(\"Sending via Asb sender connection.\");\n    checkpanic asbClient->sendBatch(queueSender, messages);\n\n    log:printInfo(\"Receiving from Asb receiver connection.\");\n    asb:MessageBatch|asb:Error? messageReceived = \n        asbClient->receiveBatch(queueReceiver, maxMessageCount, serverWaitTime);\n\n    if (messageReceived is asb:MessageBatch) {\n        foreach asb:Message message in messageReceived.messages {\n            if (message.toString() != \"\") {\n                log:printInfo(\"Reading Received Message : \" + message.toString());\n            }\n        }\n    } else if (messageReceived is ()) {\n        log:printError(\"No message in the queue.\");\n    } else {\n        log:printError(\"Receiving message via Asb receiver connection failed.\");\n    }\n\n    log:printInfo(\"Closing Asb sender connection.\");\n    checkpanic asbClient->closeSender(queueSender);\n\n    log:printInfo(\"Closing Asb receiver connection.\");\n    checkpanic asbClient->closeReceiver(queueReceiver);\n}    \n```\n\n2. Send to Topic and Receive from Subscription\nThis is the basic scenario of sending a message to a topic and receiving a message from a subscription. A user must \ncreate a sender connection and a receiver connection with the azure service bus to send and receive a message. \nThe message is passed as a parameter with optional parameters and properties to the send \noperation. The user can receive the Message object at the other receiver end.\n\nSample is available at:\nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-service-bus\/blob\/main\/asb-ballerina\/samples\/send_to_topic_and_receive_from_subscription.bal\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/asb;\n\n\/\/ Connection Configurations\nconfigurable string connectionString = ?;\nconfigurable string topicName = ?;\nconfigurable string subscriptionName1 = ?;\n\npublic function main() {\n\n    \/\/ Input values\n    string stringContent = \"This is My Message Body\"; \n    byte[] byteContent = stringContent.toBytes();\n    map<string> properties = {a: \"propertyValue1\", b: \"propertyValue2\"};\n    int timeToLive = 60; \/\/ In seconds\n    int serverWaitTime = 60; \/\/ In seconds\n\n    asb:ApplicationProperties applicationProperties = {\n        properties: {a: \"propertyValue1\", b: \"propertyValue2\"}\n    };\n\n    asb:Message message1 = {\n        body: byteContent,\n        contentType: asb:TEXT,\n        timeToLive: timeToLive,\n        applicationProperties: applicationProperties\n    };\n\n    asb:AsbConnectionConfiguration config = {\n        connectionString: connectionString\n    };\n\n    asb:AsbClient asbClient = new (config);\n\n    log:printInfo(\"Creating Asb sender connection.\");\n    handle topicSender = checkpanic asbClient->createTopicSender(topicName);\n\n    log:printInfo(\"Creating Asb receiver connection.\");\n    handle subscriptionReceiver = \n        checkpanic asbClient->createSubscriptionReceiver(topicName, subscriptionName1, asb:RECEIVEANDDELETE);\n\n    log:printInfo(\"Sending via Asb sender connection.\");\n    checkpanic asbClient->send(topicSender, message1);\n\n    log:printInfo(\"Receiving from Asb receiver connection.\");\n    asb:Message|asb:Error? messageReceived = asbClient->receive(subscriptionReceiver, serverWaitTime);\n\n    if (messageReceived is asb:Message) {\n        log:printInfo(\"Reading Received Message : \" + messageReceived.toString());\n    } else if (messageReceived is ()) {\n        log:printError(\"No message in the subscription.\");\n    } else {\n        log:printError(\"Receiving message via Asb receiver connection failed.\");\n    }\n\n    log:printInfo(\"Closing Asb sender connection.\");\n    checkpanic asbClient->closeSender(topicSender);\n\n    log:printInfo(\"Closing Asb receiver connection.\");\n    checkpanic asbClient->closeReceiver(subscriptionReceiver);\n}    \n```\n\nMore Samples are available at: \nhttps:\/\/github.com\/ballerina-platform\/module-ballerinax-azure-service-bus\/tree\/main\/asb-ballerina\/samples", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-azure-service-bus", "keywords":["Azure", "ServiceBus"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620303409000, "modules":[{"name":"asb", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/asb/0.1.3", "packageUrl":"/ballerinax/asb/0.1.3"}], "pullCount":21}, {"organization":"ballerinax", "name":"slack", "version":"0.9.8", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/slack/0.9.8", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/slack/0.9.8/ballerinax-slack-java11-0.9.8.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"[![Build](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/workflows\/CI\/badge.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https:\/\/img.shields.io\/github\/last-commit\/ballerina-platform\/module-ballerinax-slack.svg)](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/commits\/master)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\n# Ballerina Slack Connector \nConnects to Slack using Ballerina\n\n# Introduction\n## Slack\n[Slack](https:\/\/api.slack.com\/) is a channel-based messaging platform. With Slack, people can work together more effectively, connect all their software tools and services, and find the information they need to do their best work — all within a secure, enterprise-grade environment.\n\n## Connector Overview\nThe Ballerina Slack Connector allows you to access the Slack Web API and Slack Events API through Ballerina. This \nconnector can be used to implement some of the most common use cases of Slack. This connector provides the capability\nto query information from and perform some actions in a Slack workspace. This connector also allows you to listen to\nSlack Events.\n\n## Prerequisites\n* Slack Account https:\/\/slack.com\/get-started#\/createnew\n\n* Java 11 Installed - Java Development Kit (JDK) with version 11 is required.\n\n* Ballerina SL Alpha 5 Installed - Ballerina Swan Lake Alpha 5 is required. \n\n## Supported Versions\n|                             |           Version           |\n|:---------------------------:|:---------------------------:|\n| Ballerina Language          |        Swan Lake Alpha 5    |\n\n## Obtaining Slack Token\n1. Visit https:\/\/api.slack.com\/apps and create a Slack App.\n2. In the \"Add features and functionality\" section, Click permissions.\n3. Go to the Scopes section and add necessary OAuth scopes for User Token. (\"channels:write\", \"chat:write\", \"files:read\",\n   \"files:write\", \"users:read\")\n4. Install the app to the workspace.\n5. Get your User OAuth token from the OAuth & Permissions section of your Slack App.\n\n## Module Overview - `ballerinax\/slack`\n\nThe `ballerinax\/slack` module provides a Slack client, which allows you to access the Slack Web API through Ballerina.\n\nThe following sections provide you details on how to use the Slack connector.\n\n- [Feature Overview](#feature-overview)\n- [Quickstart](#quickstart)\n- [Samples](#samples)\n\n## Feature Overview\n\n1. Conducting messaging-related operations. For example, post messages on slack, delete messages, \nsend attachments, etc.\n2. Executing `conversations\/channels`-related operations. For example, create conversations,\njoin a conversation, add users to a conversation, archive\/unarchive conversations, etc.\n3. Conducting `users\/user groups`-related operations. For example, get user information etc.\n4. Performing file-related operations in Slack. For example, upload files, delete files, get file information, etc.\n\n# Quickstart\n\n### Pull the Module\nExecute the below command to pull the Slack module from Ballerina Central:\n```ballerina\n$ ballerina pull ballerinax\/slack\n```\n\n### Slack Client Sample\nThe Slack Client Connector can be used to interact with the Slack Web API.\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack;\nimport ballerina\/os;\n\nslack:Configuration slackConfig = {\n    bearerTokenConfig: {\n        token: os:getEnv(\"SLACK_TOKEN\")\n    }\n};\n\npublic function main() returns error? {\n    slack:Client slackClient = check new(slackConfig);\n\n    slack:Message messageParams = {\n        channelName: \"channelName\",\n        text: \"Hello\"\n    };\n\n    \/\/ Post a message to a channel.\n    var postResponse = slackClient->postMessage(messageParams);\n    if (postResponse is string) {\n        log:printInfo(\"Message sent\");\n    } else {\n        log:printError(postResponse.toString());\n    }\n\n    \/\/ List all the conversations.\n    var listConvResponse = slackClient->listConversations();\n    if (listConvResponse is error) {\n        log:printError(listConvResponse.toString());\n    } else {\n        log:printInfo(listConvResponse.toString());\n    }\n\n    \/\/ Upload a file to a channel.\n    var fileResponse = slackClient->uploadFile(\"filePath\", \"channelName\");\n    if (fileResponse is error) {\n        log:printError(fileResponse.toString());\n    } else {\n        log:printInfo(\"Uploaded file \" + fileResponse.id);\n    }\n\n    \/\/ Get user information.\n    var userResponse = slackClient->getUserInfo(\"userName\");\n    if (userResponse is error) {\n        log:printError(userResponse.toString());\n    } else {\n        log:printInfo(\"Found user information of the user \", userResponse.name);\n    }\n}\n```\n## Please check the [Samples directory](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/tree\/master\/samples) for more examples.\n\n\n## Module Overview - `ballerinax\/slack.'listener`\n\nThe `ballerinax\/slack.'listener` module provides a Listener to grasp event triggers from your Slack App. This functionality is provided by [Slack Event API](https:\/\/api.slack.com\/apis\/connections\/events-api). \n\n## Listener Feature Overview\n1. Receive event triggers and event related data from Slack\n2. Validate Slack requests using the Verification token issued and automatic response to Slack API when needed.\n\n## Supported Trigger Types\n1. \"onAppMention\" - Subscribe to only the message events that mention your app or bot\n2. \"onChannelCreated\" - A channel was created\n3. \"onEmojiChanged\" - A custom emoji has been added or changed\n4. \"onFileShared\" - A file was shared\n5. \"onMemberJoinedChannel\" - A user joined a public or private channel\n6. \"onMessage\" - A message was sent to a channel\n7. \"onReactionAdded\" - A member has added an emoji reaction to an item\n8. \"onTeamJoin\" - A new member has joined\n\n## Quickstart\n\n### Prerequisites\n1. Create your own slack app and enable Event Subscription in your slack app settings. \n2. Subscribe to the events that you are planning to listen and save changes.\n3. Obtain verification token from the Basic Information section of your Slack App.\n4. Download and install [Ballerina](https:\/\/ballerinalang.org\/downloads\/).\n5. Install npm and setup the [ngrok](https:\/\/ngrok.com\/download).\n\n### Pull the Module\nExecute the below command to pull the Slack Listener module from Ballerina Central:\n```ballerina\n$ ballerina pull ballerinax\/slack.'listener\n```\n\n### Implementation of the listener\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack.'listener as slack;\n\nslack:ListenerConfiguration configuration = {\n    port: 9090,\n    verificationToken: \"VERIFICATION_TOKEN\"\n};\n\nlistener slack:Listener slackListener = new (configuration);\n\nservice \/slack on slackListener {\n    isolated remote function onMessage(slack:SlackEvent eventInfo) returns error? {\n        log:printInfo(\"New Message\");\n        log:printInfo(eventInfo.toString());\n    }\n}\n```\n\n* Write a remote function to receive particular event type. Implement your logic within that function.\n\n* \"onAppMention\", \"onChannelCreated\", \"onEmojiChanged\", \"onFileShared\", \"onMemberJoinedChannel\", \"onMessage\",\n\"onReactionAdded\", \"onTeamJoin\" are the supported event types.\n\n### Register the Request URL\n1. Run your ballerina service (similar to below sample) on prefered port.\n2. Start ngok on same port using the command ``` .\/ngrok http 9090 ```\n3. In Event Subscriptions section of your Slack App settings, paste the URL issued by ngrok following with your service path (eg : ```https:\/\/365fc542d344.ngrok.io\/slack\/events```) \n4. Slack Event API will send a url_verification event containing the token and challenge key value pairs.\n5. Slack Listener will automatically verify the URL by comparing the token and send the required response back to slack \n6. Check whether your Request URL displayed as verified in your Slack.\n7. Subscribe to the events that you are planning to listen and click save changes.\n\n### Receiving events\n* After successful verification of Request URL your ballerina service will receive events. \n\n## Samples\n\n### Slack Listener Sample\n* Following sample code is written to receive triggered event data from Slack Event API.\n* Name of the remote functions written within the service must be one of the supported trigger type.\n   Example: \"onAppMention\", \"onChannelCreated\", \"onEmojiChanged\", \"onFileShared\", \"onMemberJoinedChannel\", \"onMessage\",\n   \"onReactionAdded\", \"onTeamJoin\"\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/slack.'listener as slack;\n\nslack:ListenerConfiguration configuration = {\n    port: 9090,\n    verificationToken: \"VERIFICATION_TOKEN\"\n};\n\nlistener slack:Listener slackListener = new (configuration);\n\nservice \/slack on slackListener {\n    isolated remote function onMessage(slack:SlackEvent eventInfo) returns error? {\n        log:printInfo(\"New Message\");\n        log:printInfo(eventInfo.toString());\n    }\n}\n```\n\n## Please check the [Samples directory](https:\/\/github.com\/ballerina-platform\/module-ballerinax-slack\/tree\/master\/samples) for more examples.", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-slack", "keywords":["slack"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620303086000, "modules":[{"name":"slack", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/slack/0.9.8", "packageUrl":"/ballerinax/slack/0.9.8"}], "pullCount":111}, {"organization":"ballerinax", "name":"aws.s3", "version":"0.99.4", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/aws.s3/0.99.4", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/aws.s3/0.99.4/ballerinax-aws.s3-java11-0.99.4.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"Connects to Amazon S3 using Ballerina.", "readme":"# Ballerina Amazon S3 Connector \nConnects to Amazon S3 using Ballerina.\n\n# Introduction\n## Amazon S3\n[Amazon Simple Storage Service (Amazon S3)](https:\/\/aws.amazon.com\/s3\/) is an object storage service that offers industry-leading scalability, data availability, security, and performance.This means customers of all sizes and industries can use it to store and protect any amount of data for a range of use cases, such as data lakes, websites, mobile applications, backup and restore, archive, enterprise applications, IoT devices, and big data analytics. \n\n## Key Features of Amazon S3\n* Manage buckets\n* Manage objects \n\n## Connector Overview\n\nThe Amazon S3 Connector allows you to access the Amazon S3 REST API through Ballerina. The following sections provide the details on client operations.\n\n**Buckets operations** - \nConnector contains operations that list the existing buckets, create a bucket, delete a bucket, and list objects in a bucket.\n\n**Objects operations** - \nConnector contains operations that create an object, delete an object, and retrieve an object.\n\n\n## Compatibility\n|                    |    Version                  |  \n|:------------------:|:---------------------------:|\n| Ballerina Language |   Swan Lake Alpha5          |\n|   Amazon S3 API    |   2006-03-01                |\n\n\n\n\n## Before you Begin\n\nYou need to get credentials such as **Access Key** and **Secret Access Key (API Secret)** from Amazon S3.\n\n#### Obtaining Access Keys\n\n 1. Create an Amazon account by visiting <https:\/\/aws.amazon.com\/s3\/>\n 2. Create a new access key, which includes a new secret access key.\n    - To create a new secret access key for your root account, use the [security credentials](https:\/\/console.aws.amazon.com\/iam\/home?#security_credential) page. Expand the Access Keys section, and then click **Create New Root Key**.\n    - To create a new secret access key for an IAM user, open the [IAM console](https:\/\/console.aws.amazon.com\/iam\/home?region=us-east-1#home). Click **Users** in the **Details** pane, click the appropriate IAM user, and then click **Create Access Key** on the **Security Credentials** tab.\n3. Download the newly created credentials, when prompted to do so in the key creation wizard.\n\nIn the directory where you have your sample, create a `Config.toml` file and add the details you obtained above within the quotes. region, trustStorePath and trustStorePassword are optionals.\n\n**Ballerina Config.toml file**\n\n```\naccessKeyId = \"\"\nsecretAccessKey = \"\"\nregion = \"\"\n```\n\n# Quickstart\n\n## Create a bucket\n### Step 1: Import the AWS S3 module\nFirst, import the `ballerinax\/aws.s3` module into the Ballerina project.\n```ballerina\nimport ballerinax\/aws.s3;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the S3 client config.\n```ballerina\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: <ACCESS_KEY_ID>,\n    secretAccessKey: <SECRET_ACCESS_KEY>,\n    region: <REGION>\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n```\n\n### Step 3: Set up all the data required to create the bucket\nThe `createBucket` remote function creates a bucket. The `bucketName` represents the name of the bucket that has to be created. This operation returns an `error` if unsuccessful. \n\n```ballerina\nstring bucketName = \"name\";\n```\n\n### Step 4: Create bucket\nThe response from `createBucket` is an `error` if creating the bucket was unsuccessful.\n\n```ballerina\n\/\/Create new bucket.\nerror? createBucketResponse = amazonS3Client->createBucket(bucketName);\nif (createBucketResponse is error) {\n    \/\/ If unsuccessful\n    log:printError(\"Error: \" + createBucketResponse.toString());\n} else {\n    \/\/ If successful\n    log:printInfo(\"Bucket Creation Status: Success\");\n}\n```\n\n# Samples\n\nSamples are available at : https:\/\/github.com\/ballerina-platform\/module-ballerinax-aws.s3\/tree\/master\/samples. To run a sample, create a new TOML file with name `Config.toml` in the same directory as the `.bal` file with above-mentioned configurable values.\n\n### Create a new bucket\n\nThis sample shows how to create a new bucket in AWS. The bucket name is required to do this operation. This operation returns an `error` if unsuccessful. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    s3:CannedACL cannedACL = s3:ACL_PRIVATE;\n    error? createBucketResponse = amazonS3Client->createBucket(bucketName, cannedACL);\n    if (createBucketResponse is error) {\n        log:printError(\"Error: \" + createBucketResponse.toString());\n    } else {\n        log:printInfo(\"Bucket Creation Status: Success\");\n    }\n}\n```\n\n### List all buckets\n\nThis sample shows how to list all buckets that are available in an authorized user's account. This operation returns array of `Bucket` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    var listBucketResponse = amazonS3Client->listBuckets();\n    if (listBucketResponse is s3:Bucket[]) {\n        log:printInfo(\"Listing all buckets: \");\n        foreach var bucket in listBucketResponse {\n            log:printInfo(\"Bucket Name: \" + bucket.name);\n        }\n    } else {\n        log:printError(\"Error: \" + listBucketResponse.toString());\n    }\n}\n```\n\n### Create a new object\n\nThis sample shows how to create a new object in a bucket. The bucket name, object name and file content are required to do this operation. This operation returns an `error` if unsuccessful. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    error? createObjectResponse = amazonS3Client->createObject(bucketName, \"test.txt\", \"Sample content\");\n    if (createObjectResponse is error) {\n        log:printError(\"Error: \"+ createObjectResponse.toString());\n    } else {\n        log:printInfo(\"Object created successfully\");\n    }\n}\n```\n\n### List all objects\n\nThis sample shows how to list all objects that are available in a bucket. This operation returns array of `S3Object` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() returns error? {\n    var listObjectsResponse = amazonS3Client->listObjects(bucketName);\n    if (listObjectsResponse is s3:S3Object[]) {\n        log:printInfo(\"Listing all object: \");\n        foreach var s3Object in listObjectsResponse {\n            log:printInfo(\"---------------------------------\");\n            log:printInfo(\"Object Name: \" + s3Object[\"objectName\"].toString());\n            log:printInfo(\"Object Size: \" + s3Object[\"objectSize\"].toString());\n        }\n    } else {\n        log:printError(\"Error: \" + listObjectsResponse.toString());\n    }\n}\n```\n\n### Get an object\n\nThis sample shows how to get an object that is available in a bucket. The bucket name and object name are required to do this operation. This operation returns a `S3Object` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina\/log;\nimport ballerina\/lang.'string as strings;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() returns error? {\n    var getObjectResponse = amazonS3Client->getObject(bucketName, \"test.txt\");\n    if (getObjectResponse is s3:S3Object) {\n        log:printInfo(getObjectResponse.toString());\n        byte[]? byteArray = getObjectResponse[\"content\"];\n        if (byteArray is byte[]) {\n            string content = check strings:fromBytes(byteArray);\n            log:printInfo(\"Object content: \" + content);\n        }\n    } else {\n        log:printError(\"Error: \" + getObjectResponse.toString());\n    }\n}\n```\n\n### Delete an object\n\nThis sample shows how to delete an object that is available in a bucket. The bucket name and object name are required to do this operation. This operation returns an `error` if unsuccessful\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new(amazonS3Config);\n\npublic function main() {\n    error? deleteObjectResponse = amazonS3Client->deleteObject(bucketName, \"test.txt\");\n    if (deleteObjectResponse is error) {\n        log:printError(\"Error: \" + deleteObjectResponse.toString());\n    } else {\n        log:printInfo(\"Successfully deleted object\");\n    }\n}\n```\n\n### Delete a bucket\n\nThis sample shows how to delete a bucket that is available in an user's account. The bucket name is required to do this operation. This operation returns an `error` if unsuccessful\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.s3;\n\nconfigurable string accessKeyId = ?;\nconfigurable string secretAccessKey = ?;\nconfigurable string region = ?;\nconfigurable string bucketName = ?;\n\ns3:ClientConfiguration amazonS3Config = {\n    accessKeyId: accessKeyId,\n    secretAccessKey: secretAccessKey,\n    region: region\n};\n\ns3:Client amazonS3Client = check new (amazonS3Config);\n\npublic function main() {\n    error? deleteBucketResponse = amazonS3Client->deleteBucket(bucketName);\n    if (deleteBucketResponse is error) {\n        log:printError(\"Error: \" + deleteBucketResponse.toString());\n    } else {\n        log:printInfo(\"Successfully deleted bucket\");\n    }\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-amazons3", "keywords":["ballerina", "aws.s3", "amazon", "client", "connector"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620299340000, "modules":[{"name":"aws.s3", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/aws.s3/0.99.4", "packageUrl":"/ballerinax/aws.s3/0.99.4"}], "pullCount":55}, {"organization":"ballerinax", "name":"aws.sqs", "version":"0.99.3", "platform":"java11", "languageSpecificationVersion":"v2020-12-17", "URL":"/ballerinax/aws.sqs/0.99.3", "balaVersion":"2.0.0", "balaURL":"https://fileserver.central.ballerina.io/2.0/ballerinax/aws.sqs/0.99.3/ballerinax-aws.sqs-java11-0.99.3.bala", "digest":"sha-256=0000000000000000000000000000000000000000000000000000000000000000", "summary":"", "readme":"# Ballerina Amazon SQS Connector\n\nAmazon SQS Connector allows you to connect to the Amazon Simple Queue Service (SQS) via REST API from Ballerina.\n\n## Compatibility\n| Ballerina Language Versions | Amazon SQS API version  |\n| --------------------------- | ----------------------  |\n|     Swan Lake Alpha 5       |        2012-11-05       |\n\nThe following sections provide you with information on how to use the Ballerina Amazon SQS connector.\n\n- [Contribute To Develop](#contribute-to-develop)\n- [Working with Amazon SQS Connector Actions](#Working-with-AWS-SQS-Connector)\n- [Sample](#sample)\n\n### Contribute to development\n\nClone the repository by running the following command \n```shell\ngit clone git@github.com:ballerina-platform\/module-amazonsqs.git\n```\n\n### Working with AWS SQS Connector\n\nFirst, import the `ballerinax\/aws.sqs` module into the Ballerina project.\n\n```ballerina\nimport ballerinax\/aws.sqs;\n```\n\nIn order for you to use the AWS SQS Connector, first you need to create an AWS SQS Client.\n\nBallerina provides a [config module](https:\/\/ballerina.io\/v1-1\/learn\/by-example\/config-api.html) to obtain parameters from the configuration file. Specify the configuration object and create the client as follows.\n\n```ballerina\nsqs:Configuration configuration = {\n    accessKey: config:getAsString(\"ACCESS_KEY_ID\"),\n    secretKey: config:getAsString(\"SECRET_ACCESS_KEY\"),\n    region: config:getAsString(\"REGION\"),\n    accountNumber: config:getAsString(\"ACCOUNT_NUMBER\")\n};\n\nsqs:Client sqsClient = new(configuration);\n```\n\n##### Sample\n\n```ballerina\nimport ballerina\/log;\nimport ballerinax\/aws.sqs;\n\n\/\/ Add the SQS credentials as the Configuration\nsqs:Configuration configuration = {\n    accessKey: \"<ACCESS_KEY>\",\n    secretKey: \"<SECRET_ACCESS>\",\n    region: \"<REGION>\",\n    accountNumber: \"<ACCOUNT_NUMBER>\"\n};\n\nsqs:Client sqsClient = new(configuration);\n\npublic function main(string... args) {\n\n    \/\/ Create a new SQS Standard queue named \"newQueue\"\n    map<string> attributes = {};\n    string|error response = sqsClient->createQueue(\"newQueue\", attributes);\n    if (response is string) {\n        log:printInfo(\"Created queue URL: \" + response);\n    } else {\n        log:printInfo(\"Error while creating a queue\");\n    }\n\n}\n```", "template":false, "licenses":["Apache-2.0"], "authors":["Ballerina"], "sourceCodeLocation":"https://github.com/ballerina-platform/module-ballerinax-aws.sqs", "keywords":["aws.sqs", "Amazon", "SQS", "Ballerina", "connector", "client"], "ballerinaVersion":"slalpha5", "icon":"", "createdDate":1620298815000, "modules":[{"name":"aws.sqs", "summary":"", "readme":"", "apiDocURL":"https://docs.central.ballerina.io/ballerinax/aws.sqs/0.99.3", "packageUrl":"/ballerinax/aws.sqs/0.99.3"}], "pullCount":60}], "count":33, "offset":0, "limit":15}
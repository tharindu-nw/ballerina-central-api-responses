{
  "packages": [
    {
      "organization": "ballerinax",
      "name": "choreo",
      "version": "0.2.4",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/choreo/0.2.4",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/choreo/0.2.4/ballerinax-choreo-java11-0.2.4.bala",
      "summary": "",
      "readme": "## Package Overview\n\nThe Choreo Observability Extension is one of the observability extensions of the<a target=\"_blank\" href=\"https://ballerina.io/\"> Ballerina</a> language.\n\nIt provides an implementation for publishing traces & metrics to Choreo.\n\n## Enabling Choreo Extension\n\nTo package the Choreo extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax/choreo as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and connect to Choreo, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nenabled=true\nprovider=\"choreo\"\n```",
      "template": false,
      "licenses": [],
      "authors": [],
      "sourceCodeLocation": "",
      "keywords": [],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1619702325000,
      "modules": [],
      "pullCount": 1653
    },
    {
      "organization": "ballerinax",
      "name": "java.arrays",
      "version": "0.10.0-alpha4",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/java.arrays/0.10.0-alpha4",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/java.arrays/0.10.0-alpha4/ballerinax-java.arrays-java11-0.10.0-alpha4.bala",
      "summary": "",
      "readme": "",
      "template": false,
      "licenses": [],
      "authors": [],
      "sourceCodeLocation": "",
      "keywords": [],
      "ballerinaVersion": "slalpha2",
      "createdDate": 1613803181000,
      "modules": [],
      "pullCount": 331
    },
    {
      "organization": "ballerinax",
      "name": "twilio",
      "version": "0.99.8",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/twilio/0.99.8",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/twilio/0.99.8/ballerinax-twilio-java11-0.99.8.bala",
      "summary": "",
      "readme": "# Twilio Connector\n\n[![Build Status](https://travis-ci.org/ballerina-platform/module-ballerinax-twilio.svg?branch=master)](https://travis-ci.org/ballerina-platform/module-ballerinax-twilio)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nConnects the twilio communication services\n\n# Introduction\n\nTwilio’s APIs power its platform for communications. Behind these APIs is a software layer connecting and optimizing communications networks around the world to allow your users to call and message anyone, globally. Twilio has a whole host of APIs, from SMS to Voice to Wireless! You can find Twilio's API reference documentation throughout twilio product documentation. For more information, Please browse the various [Twilio APIs here](https://www.twilio.com/docs/api).\nAs twilio supports for [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). It needs the URL authentication for each request using the credentials provided by the twilio. You can find both your account SID and auth token in the Twilio Console after signing up for [a free Twilio trial account](http://twilio.com/try-twilio?_ga=2.127476109.1229618101.1613523745-690133185.1613523745). \nTwilio uses webhooks to asynchronously let your application know when events happen, like getting an incoming call or receiving an SMS message.\n\n# Connector Overview\n\nThe Twilio connector allows you to send SMS, voice and WhatsApp messages through the Twilio REST API and also connector provides the facility to receive inbound HTTP(S) requests (also known as webhooks) from Twilio's servers.\nThe Twilio connector consists with two modules\n\n*Twilio Client module  - The default module has the twilio client that is used to communicate through the SMS, VoiceCalls and Whatsapp messages.\n\n*Webhook Listener module  - The module that provides the listener supports for the twilio events such as SentSMSEvent, VoiceCallRinging etc.\n\n# Prerequisites\n\n* [Twilio Account](https://www.twilio.com/) to obtain Account SID, Auth Token and Twilio phone number\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Ballerina SLAlpha2 Installed\nBallerina Swan Lake Alpha 4 is required. \n\n* (optional)[ngork](https://ngrok.com/) is requried to test listner samples using localhost\n\n# Supported Versions & Limitations\n\n## Supported Versions\n\n|                           |    Version         |\n|:-------------------------:|:------------------:|\n| Ballerina Language        | Swan Lake Alpha 5  |\n| Twilio Basic API          | 2010-04-01         |\n| Java Development Kit (JDK)| 11                 |\n\n## Limitations\n* The connector doesn't support to Authy based operation at the moment.\n* The connector only supports limited number of operations of the twilio APIs.\n\n# Quickstart(s)\n\n## Module - `ballerinax/twilio`\n\n### Feature Overview\n\n1. Send SMS, WhatsApp messages\n2. Make voice calls\n\n### Getting started\n\n1.  Have a [Quick Tour](https://ballerina.io/learn/getting-started/quick-tour/) section to download and install Ballerina.  \n\n2.  To use Twilio endpoint, you need to provide the following:\n\n       - Account SId\n       - Auth Token\n\n![image](samples/docs/dashboardTokens.png)\n\n3. Import the Twilio module to your Ballerina program as follows. You can use [configurable variables](https://ballerina.io/learn/by-example/configurable.html) to provide the necessary credentials.\n\n\t```ballerina\n\timport ballerina/log;\n    import ballerinax/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        //Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        //Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        //Get account detail remote function is called by the twilio client\n        var details = twilioClient->getAccountDetails();\n\n        //Response is printed as log messages\n        if (details is twilio:Account) {\n            log:printInfo(\"Account Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n\t```\n\n## Module - `ballerinax/twilio.webhook`\n\n### Feature Overview\n\nThe Twilio Listener connector allows you to listen to Twilio SMS and Call status change events.\n1. Listen to incoming message events and message status change callback events from the twilio SMS\n2. Listen to incoming call events and call status change callback events from the twilio Voice Call\n\n### Note:\n\nCallback URL registration method depends on the event type.\n1. Twilio SMS\n - Incoming Messages\n    - Callback webhook URL has to be registered in the console under the particular Twilio number.\n - Status change events\n    - Callback webhook URL has to be registered at the time of sending the SMS (from the client connector)\n2. Twilio Call\n - Incoming Call\n    - Callback webhook URL has to be registered in the console under the particular Twilio number.\n - Status change events\n    - Callback webhook URL has to be registered at the time of making the call (from the client connector)\n\n### Getting started\n\n1.  Have a [Quick Tour](https://ballerina.io/learn/getting-started/quick-tour/) section to download and install Ballerina.\n\n2. Import the Twilio Webhook module to your Ballerina program as follows.\n\n\t```ballerina\n\timport ballerina/log;\n    import ballerinax/twilio;\n    import ballerinax/twilio.webhook as webhook;\n    import ballerina/http;\n\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string twimlURL = ?;\n    configurable string statusCallbackUrl = ?;\n\n    //Starting a service with using twilio listner by providing port,authToken, status call back url.\n    listener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\n    service / on twilioListener {\n        resource function post twilio(http:Caller caller, http:Request request) returns error? {\n            var payload = check twilioListener.getEventType(caller, request);\n            if (payload is webhook:CallStatusChangeEvent) {\n                if (payload.CallStatus == webhook:RINGING) {\n                    log:printInfo(\"The call is in rining status\");\n                } \n            } \n        }\n    }\n\t```\n# Samples\n## Twilio Client Operations\n\n### Get Account details\nThis shows you how to obtain the account details of your twilio account.\nSample is available at: \n```ballerina\n    import ballerina/log;\n    import ballerinax/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        //Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        //Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        //Get account detail remote function is called by the twilio client\n        var details = twilioClient->getAccountDetails();\n\n        //Response is printed as log messages\n        if (details is twilio:Account) {\n            log:printInfo(\"Account Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n\n### Send an SMS\nThis section shows how to use the connector to send an SMS. You will need a verfied phone number if you are using a trial account to send the message from your twilio phone number. if the SMS is sent successfully it will provides SMSResponse record with details of the SMS otherwise it will provide the error occured.\n\nSample is available at: \n```ballerina\nimport ballerina/log;\nimport ballerinax/twilio;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string message = \"Wso2-Test-SMS-Message\";\n\n\npublic function main() {\n    //Twilio Client configuration\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n\n    //Twilio Client\n    twilio:Client twilioClient = new (twilioConfig);\n\n    //Send SMS remote function is called by the twilio client\n    var details = twilioClient->sendSms(fromMobile, toMobile, message);\n\n    //Response is printed as log messages\n    if (details is twilio:SmsResponse) {\n        log:printInfo(\"SMS_SID: \" + details.sid.toString() + \", Body: \" + details.body.toString());\n    } else {\n        log:printInfo(details.message());\n    }\n}\n```\n### Send a whatappMessage\nAs the following example, the connector supports to send whatapp messages and if the message is successfully sent , you will get WhatsAppResponse record otherwsie an error message.\nSample is available at:\n```ballerina\n    import ballerina/log;\n    import ballerinax/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n\n    public function main() {\n        //Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        //Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        //Send whatsapp remote function is called by the twilio client\n        var details = twilioClient->sendWhatsAppMessage(fromNo = fromMobile, toNo = toMobile, message = \"Test Whatsapp\");\n\n        //Response is printed as log messages\n        if (details is twilio:WhatsAppResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n### Make a voice call\nYou can make voice call with twilio voice enabled phone number. The following should be provided in addition to the account access credentials.\n    \"fromNo\" - the voice-enabled Twilio phone number you added to your account earlier\n    \"toNo\" - the person you'd like to call\n    \"twiml\" - Instructions in the form [TwiML](https://www.twilio.com/docs/voice/twiml) that explains what should happen when the other party picks up the phone\n    \"statusCallback\" - Optionally, instead of passing the Twiml parameter, you can provide a Url that returns TwiML Voice instructions.\nSample is available at:\n```ballerina\n    import ballerina/log;\n    import ballerinax/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n    configurable string fromMobile = ?;\n    configurable string toMobile = ?;\n    configurable string twimlURL = ?;\n\n    public function main() {\n        //Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        //Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n\n        //Make voice Call remote function is called by the twilio client\n        var details = twilioClient->makeVoiceCall(fromMobile, toMobile, twimlURL);\n\n        //Response is printed as log messages\n        if (details is twilio:VoiceCallResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n\n### Get a message\nThis section shows you how to get a message details  from your account. you need to provide message sid to retreive the details from the message list of your account. If the request is successful, it will send the MessageResourceResponse record else an error message with the details.\nSample is available at:\n```ballerina\n    import ballerina/log;\n    import ballerinax/twilio;\n\n    configurable string accountSId = ?;\n    configurable string authToken = ?;\n\n    public function main() {\n        //Twilio Client configuration\n        twilio:TwilioConfiguration twilioConfig = {\n            accountSId: accountSId,\n            authToken: authToken\n        };\n\n        //Twilio Client\n        twilio:Client twilioClient = new (twilioConfig);\n        \n        //Set Message resource SID to get the message detial\n        string messageSid = \"<Add Mesaage SID>\";\n\n        //Get SMS remote function is called by the twilio client\n        var details = twilioClient->getMessage(messageSid);\n\n        //Response is printed as log messages\n        if (details is twilio:MessageResourceResponse) {\n            log:printInfo(\"Message Detail: \" + details.toString());\n        } else {\n            log:printInfo(details.message());\n        }\n    }\n```\n## Twilio Listener Operations\n\n### QUEUED/SENT SMS Event\nThis examples shows how you can start a ballerina twilio listener using localhost. you will need to use ngork to expose a web server running on your local machine to the internet. Find more sample from here.\n```ballerina\nimport ballerina/log;\nimport ballerinax/twilio;\nimport ballerinax/twilio.webhook as webhook;\nimport ballerina/http;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string message = \"Wso2-Test-SMS-Message\";\n\n//ngork is used to get the callback url eg: http://6d602a963438.ngrok.io/twilio\nconfigurable string statusCallbackUrl = ?;\n\n//Starting a service with twilio listner by providing port,authToken, status call back url.\nlistener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\nservice / on twilioListener {\n    resource function post twilio(http:Caller caller, http:Request request) returns error? {\n        var payload = check twilioListener.getEventType(caller, request);\n\n        //Check for the event and get the status of the event.\n        if (payload is webhook:SmsStatusChangeEvent) {\n            if (payload.SmsStatus == webhook:QUEUED) {\n                log:printInfo(\"The SMS has been queued to be sent\");\n            } \n        } \n    }\n}\n\npublic function main() {\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n    twilio:Client twilioClient = new (twilioConfig);\n    var details = twilioClient->sendSms(fromMobile, toMobile, message, statusCallbackUrl);\n    if (details is error) {\n        log:printInfo(details.message());\n    }\n\n}\n```\n### Ringing/InProgress/Completed Voice Call Events\nThis provides the listener support to the voice calls. you will need to use ngork to expose a web server running on your local machine to the internet. Find more sample from here.\n```ballerina\n\nimport ballerina/log;\nimport ballerinax/twilio;\nimport ballerinax/twilio.webhook as webhook;\nimport ballerina/http;\n\nconfigurable string fromMobile = ?;\nconfigurable string toMobile = ?;\nconfigurable string accountSId = ?;\nconfigurable string authToken = ?;\nconfigurable string twimlURL = ?;\n\n//ngork is used to get the callback url eg: http://6d602a963438.ngrok.io/twilio\nconfigurable string statusCallbackUrl = ?;\n\n//Starting a service with using twilio listner by providing port,authToken, status call back url.\nlistener webhook:TwilioEventListener twilioListener = new (9090, authToken, statusCallbackUrl);\nservice / on twilioListener {\n    resource function post twilio(http:Caller caller, http:Request request) returns error? {\n        var payload = check twilioListener.getEventType(caller, request);\n        if (payload is webhook:CallStatusChangeEvent) {\n            if (payload.CallStatus == webhook:COMPLETED) {\n                log:printInfo(\"The call has been answered\");\n            } \n        } \n    }\n}\n\npublic function main() {\n    twilio:TwilioConfiguration twilioConfig = {\n        accountSId: accountSId,\n        authToken: authToken\n    };\n    twilio:Client twilioClient = new (twilioConfig);\n    \n    //Setting webhook callback details\n    twilio:StatusCallback webhookCallbackInfo = {\n        url: statusCallbackUrl,\n        method: webhook:POST,\n        events: [webhook:COMPLETED]\n    };\n    var details = twilioClient->makeVoiceCall(fromMobile, toMobile, twimlURL, webhookCallbackInfo);\n    if (details is error) {\n        log:printInfo(details.message());\n    }\n\n}\n```",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-twilio",
      "keywords": [
        "twilio",
        "sms",
        "call",
        "otp",
        "whatsapp",
        "webhook"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620236103000,
      "modules": [],
      "pullCount": 177
    },
    {
      "organization": "ballerinax",
      "name": "googleapis.calendar",
      "version": "0.1.5",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis.calendar/0.1.5",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.calendar/0.1.5/ballerinax-googleapis.calendar-java11-0.1.5.bala",
      "summary": "",
      "readme": "[![Build](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/workflows/CI/badge.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https://img.shields.io/github/last-commit/ballerina-platform/module-ballerinax-googleapis.calendar.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/commits/master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# Ballerina Google Calendar Connector \nConnects to Google Calendar using Ballerina.\n\n# Introduction\n## Google Calendar\n[Google Calendar](https://developers.google.com/calendar) is a time-management and scheduling calendar service developed by Google. It lets users to organize their schedule and share events with others. The Google Calendar endpoint allows you to access the Google Calendar API Version v3 through Ballerina.\n\n## Key Features of Google Calendar\n* Manage Events\n* Manage Calendar\n* Listen event changes - [Push Notification](https://developers.google.com/calendar/v3/push)\n\n## Connector Overview\n\nThe Google Calendar Ballerina Connector allows you to access the Google Calendar API Version V3 through Ballerina. The connector can be used to implement some of the most common use cases of Google Calendar. The connector provides the capability to programmatically manage events and calendar, CRUD operations on event and calendar operations through the connector endpoints and listener for the events created in the calendar.\n\n# Prerequisites\n\n* Java 11 Installed\n  Java Development Kit (JDK) with version 11 is required.\n\n* Download the required Ballerina [distribution](https://ballerinalang.org/downloads/) version\n\n## Compatibility\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha5            |\n| Google Calendar API         |             V3                  |\n| Java Development Kit (JDK)  |             11                  |\n\n### Obtaining Tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the \naccess token and refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. [Enable Calendar API in your app's Cloud Platform project.](https://developers.google.com/workspace/guides/create-project#enable-api)\n7. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground).\n8. Click the gear icon in the upper right corner and check the box labeled **Use your own OAuth credentials** (if it isn't already checked) and enter the OAuth2 client ID and OAuth2 client secret you obtained above.\n9. Select required Google Calendar scopes, and then click **Authorize APIs**.\n10. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token and access token. \n\n### Add configurations file\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Calendar uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Calendar connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Calendar connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <refreshUrl>\n        }\n    }\n    ```\n* Callback address is additionally required in order to use Google Calendar listener. It is the path of the listener resource function. The time-to-live in seconds for the notification channel is provided in optional parameter expiration time. By default it is 604800 seconds.\n  * Callback address\n  * Expiration time\n\n* Add the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n  ```\n  clientId = \"<client_id\">\n  clientSecret = \"<client_secret>\"\n  refreshToken = \"<refresh_token>\"\n  refreshUrl = \"<refresh_URL>\"\n  address = \"<address>\"\n  ```\n\n\n# Quickstart(s)\n\n## Create an quick add event\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax/googleapis.calendar` module into the Ballerina project.\n```ballerina\nimport ballerinax/googleapis.calendar;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,\n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\nNote: Must specify the **Refresh token**, obtained with exchanging the authorization code, the **Client ID** and the \n**Client Secret** obtained in the App creation, when configuring the Calendar connector client.\n\n\n### Step 3: Set up all the data required to create the quick event\nThe `quickAddEvent` remote function creates an event. The `calendarId` represents the calendar where the event has to be created and `title` refers the name of the event.\n\n```ballerina\nstring calendarId = \"primary\";\nstring title = \"Sample Event\";\n```\n\n### Step 4: Create the quick add event\nThe response from `quickAddEvent` is either an Event record or an `error` (if creating the event was unsuccessful).\n\n```ballerina\n//Create new quick add event.\ncalendar:Event|error response = calendarClient->quickAddEvent(calendarId, title);\n\nif (response is calendar:Event) {\n    // If successful, log event id\n    log:printInfo(response.id);\n} else {\n    // If unsuccessful\n    log:printError(\"Error: \" + response.toString());\n}\n```\n\n## Create an listener for new event creation\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax/googleapis.calendar`, `import ballerinax/googleapis.calendar.'listener as listen` and `import ballerina/http` modules into the Ballerina project.\n\n```ballerina\nimport ballerinax/googleapis.calendar;\nimport ballerinax/googleapis.calendar.'listener as listen;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\n\n### Step 3: Initialize the Calendar Listener\nDefine all the data required to create\n\n```ballerina\nint port = 4567;\nstring calendarId = \"primary\";\nstring address = \"callback_url;\n\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address);\n```\n\n### Step 4: Create the listener service\nIf there is an event created in calendar, log will print the event title\n\n```ballerina\nservice /calendar on googleListener {\n    remote function onNewEvent(calendar:Event event) returns error? {\n        log:printInfo(\"Created new event : \", event);\n    }\n}\n```\n\n# **Samples**\n\nSamples are available at : https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/tree/main/samples\nTo run a sample, create a new TOML file with name `Config.toml` in the same directory as the `.bal` file with above-mentioned configurable values. Configurable value port is additionally required in order to use listener.\n\n```\nport = \"<port>\"\n```\nRun this command inside sample directory:\n    ```shell\n    $ bal run \"<ballerina_file>\"\n    ```\n\n\n- #### [Get all calendars](samples/get_calendars.bal)\n\n    This sample shows how to get all calendars that are available in an authorized user's account. This operation returns stream `Calendar` if successful. Else returns `error`.\n\n- #### [Create a new calendar](samples/create_calendar.bal)\n\n    This sample shows how to create a new calendar in an authorized user's account. The name of the new calendar is required to do this. This operation will return a `CalenderResource` if successful. Else return an `error`.\n\n- #### [Delete a calendar](samples/delete_calendar.bal)\n\n    This sample shows how to delete a calendar in an authorized user's account. The calendar id is required to do this operation. This operation returns an error `true` if unsuccessful.\n\n- #### [Create a new event](samples/create_event.bal)\n\n    This sample shows how to create an event in an authorized user's calendar. The calendar id and input event are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Create a quick add event](samples/quick_add_event.bal)\n\n    This sample shows how to create a quick add event in an authorized user's calendar. It creates an event based on a simple text string. The calendar id and event title are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Get an event](samples/get_event.bal)\n\n    This sample shows how to get an event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Get all events](samples/get_events.bal)\n\n    This sample shows how to get all events that are available in an authorized user's calendar. The calendar id is required to do this operation. This operation returns stream `Event` if successful. Else returns `error`.\n\n- #### [Update an existing event](samples/update_event.bal)\n\n    This sample shows how to update an existing event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n- #### [Delete an event](samples/delete_event.bal)\n\n    This sample shows how to delete an event in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an error `true` if unsuccessful.\n\n- #### [Watch event changes](samples/watch_event.bal)\n\n    This sample shows how to watch for changes to events in an authorized user's calendar. It is a subscription to receive push notification from Google on events changes.  The calendar id and callback url are required to do this operation. Channel live time can be provided via an optional parameter. By default it is 604800 seconds. This operation returns  `WatchResponse` if successful. Else returns `error`.\n\n- #### [Stop a channel subscription](samples/stop_channel.bal)\n\n    This sample shows how to stop an existing subscription. The channel id and resource is are required to do this operation. This operation returns an error `true` if unsuccessful.\n\n## Listener\n\n- #### [Trigger for new event](samples/trigger_create_event.bal)\n\n    This sample shows how to create a trigger on new event. When a new event is occurred, that event details can be captured in this listener.\n\n- #### [Trigger for updated event](samples/trigger_update_event.bal)\n\n    This sample shows how to create a trigger on an event update. When a new event is updated, that event details can be captured in this listener.\n\n- #### [Trigger for deleted event](samples/trigger_delete_event.bal)\n\n    This sample shows how to create a trigger on cancelled event. When a new event is cancelled, that event details can be captured in this listener.",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar",
      "keywords": [
        "google",
        "calendar"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620278600000,
      "modules": [],
      "pullCount": 159
    },
    {
      "organization": "ballerinax",
      "name": "googleapis.sheets",
      "version": "0.99.8",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis.sheets/0.99.8",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.sheets/0.99.8/ballerinax-googleapis.sheets-java11-0.99.8.bala",
      "summary": "Connects to Google Sheets using Ballerina.",
      "readme": "# Ballerina Google Sheets Module\n\nConnects to Google Sheets using Ballerina.\n\n# Module Overview\n\nThe Google Spreadsheet Ballerina Connector allows you to access the [Google Spreadsheet API Version v4](https://developers.google.com/sheets/api) through Ballerina. The connector can be used to implement some of the most common use cases of Google Spreadsheets. The connector provides the capability to programmatically manage spreadsheets, manage worksheets, do CRUD operations on worksheets, and do column wise, row wise and cell wise operations through the connector endpoints.\n\nThe Google Spreadsheet Ballerina Connector supports spreadsheet management operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet. It also supports worksheet management operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet. The connector also provides capabilities to handle data level operations like setting, getting and clearing a range of data, inserting columns/rows before and after a given position, creating or updating, getting and deleting columns/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Compatibility\n\n|                                   | Version               |\n|:---------------------------------:|:---------------------:|\n| Google Sheets API Version         | V4                    |\n| Ballerina Language                | Swan Lake Alpha 5     |\n| Java Development Kit (JDK)        | 11                    |\n\n# Supported Operations\n\n## Spreadsheet Management Operations\nThe `ballerinax/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nspreadsheet management operations. It includes operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet.\n\n## Worksheet Management Operations\nThe `ballerinax/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet management operations. It includes operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet.\n\n\n## Worksheet Service Operations\nThe `ballerinax/googleapis.sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet data level operations. It includes operations like setting, getting and clearing a range of data, inserting columns/rows before and after a given position, creating or updating, getting and deleting columns/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Prerequisites:\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https://ballerinalang.org/downloads/)\nBallerina Swan Lake Alpha 5 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Spreadsheet uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Spreadsheet connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Spreadsheet connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <sheets:REFRESH_URL>\n        }\n    }\n    ```\n\n## Obtaining Tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), select the required Google Spreadsheet scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the access token and refresh token.\n\n## Add project configurations file\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the token obtained in the previous step to the `Config.toml` file.\n\n```\n[ballerinax.googleapis.sheets]\nrefreshToken = \"enter your refresh token here\"\nclientId = \"enter your client id here\"\nclientSecret = \"enter your client secret here\"\ntrustStorePath = \"enter a truststore path if required\"\ntrustStorePassword = \"enter a truststore password if required\"\n\n```\n\n# Quickstart(s):\n\n## Working with GSheets Endpoint Actions\n\n### Step 1: Import the Google Sheets Ballerina Library\nFirst, import the ballerinax/googleapis.sheets module into the Ballerina project.\n```ballerina\n    import ballerinax/googleapis.sheets as sheets;\n```\nAll the actions return valid response or error. If the action is a success, then the requested resource will be returned. Else error will be returned.\n\n### Step 2: Initialize the Google Sheets Client\nIn order for you to use the GSheets Endpoint, first you need to create a GSheets Client endpoint.\n```ballerina\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n```\nThen the endpoint actions can be invoked as `var response = spreadsheetClient->actionName(arguments)`.\n\n### Step 3: Initialize the Google Sheets Client with default truststore\n```ballerina\nimport ballerina/io;\nimport ballerinax/googleapis.sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n### Step 4: Initialize the Google Sheets Client with custom truststore\n```ballerina\nimport ballerina/io;\nimport ballerinax/googleapis.sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    },\n    secureSocketConfig: {\n        trustStore: {\n            path: \"<fullQualifiedPathToTrustStore>\",\n            password: \"<truststorePassword>\"\n        }\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n# Samples\n\n### Create Spreadsheet with given name\nWe must specify the spreadsheet name as a string parameter to the createSpreadsheet remote operation. This is the basic scenario of creating a new spreadsheet with the name “NewSpreadsheet”. It returns a Spreadsheet record type with all the information related to the spreadsheet created on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    string spreadsheetId = \"\";\n    string sheetName = \"\";\n    \n    // Create Spreadsheet with given name\n    sheets:Spreadsheet|error response = spreadsheetClient->createSpreadsheet(\"NewSpreadsheet\");\n    if (response is sheets:Spreadsheet) {\n        log:printInfo(\"Spreadsheet Details: \" + response.toString());\n        spreadsheetId = response.spreadsheetId;\n    } else {\n        log:printError(\"Error: \" + response.toString());\n    }\n```\n\n### Add a New Worksheet with given name\nWe must specify the spreadsheet ID and the name for the new worksheet as string parameters to the addSheet remote operation. Spreadsheet ID is available in the spreadsheet URL \"https://docs.google.com/spreadsheets/d/\" + <spreadsheetId> + \"/edit#gid=\" + <sheetId>. This is the basic scenario of adding a new worksheet  with the name “NewWorksheet” by the spreadsheet ID which is obtained when creating a new spreadsheet. It returns a Sheet record type with all the information related to the worksheet added on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    // Add a New Worksheet with given name to the Spreadsheet with the given Spreadsheet ID\n    sheets:Sheet|error sheet = spreadsheetClient->addSheet(spreadsheetId, \"NewWorksheet\");\n    if (sheet is sheets:Sheet) {\n        log:printInfo(\"Sheet Details: \" + sheet.toString());\n        sheetName = sheet.properties.title;\n    } else {\n        log:printError(\"Error: \" + sheet.toString());\n    }\n```\nMore Samples are available at \"https://github.com/ballerina-platform/module-ballerinax-googleapis.sheets/tree/master/samples\".",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-googlespreadsheet",
      "keywords": [
        "sheets",
        "google",
        "spreadsheet"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620153574000,
      "modules": [],
      "pullCount": 126
    },
    {
      "organization": "ballerinax",
      "name": "github",
      "version": "0.99.14",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/github/0.99.14",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/github/0.99.14/ballerinax-github-java11-0.99.14.bala",
      "summary": "",
      "readme": "# Ballerina GitHub Endpoint\n\n[![Build Status](https://travis-ci.org/ballerina-platform/module-ballerinax-github.svg?branch=master)](https://travis-ci.org/ballerina-platform/module-ballerinax-github)\n\nConnects to GitHub using Ballerina.\n\n# Introduction\n\n## What is GitHub?\n\n[GitHub](https://github.com/) brings together the world's largest community of developers to discover, share, and build better software. From open source projects to private team repositories, GitHub is an all-in-one platform for collaborative development.\n\n## Key Features of GitHub\n\n- Collaboration\n- Integrated issue and bug tracking\n- Code review\n- Project management\n- Team management\n- Documentation\n- Track and assign tasks\n- Propose changes\n\n![Ballerina GitHub Endpoint Overview](../docs/resources/BallerinaGitHubEndpoint_Overview.jpg)\n\n## Connector Overview\n\nGithub Ballerina Connector is used to connect with the GitHub to perform operations exposed by GitHub GraphQL. Also, it provides easy integration with GitHub webhooks\n\nThe connector provides auto completion and type conversions. The following\nsections explains how to use Ballerina GitHub connector. You can refer the [GitHub GraphQL API v4.0](https://developer.github.com/v4/) and [GitHub Webhooks](https://developer.github.com/webhooks/) to learn more about the APIs.\n\n# Prerequisites\n\n* GitHub Account\n\n* Ballerina Swan Lake Alpha5 Installed\n\n* [Personal Access Token](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token) or [GitHub OAuth App token](https://docs.github.com/en/developers/apps/creating-an-oauth-app).\n\n# Supported Versions & Limitations\n\n## Supported Versions\n\n|                                   | Version               |\n|:---------------------------------:|:---------------------:|\n| GitHub GraphQL API                | v4                    |\n| Ballerina Language                | Swan Lake Alpha 5     |\n| Java Development Kit (JDK)        | 11                    |\n\n# Quickstart(s)\n\n## Client Side Operation Example: Get Issue List.\n\nIn an occasion when we need to obtain the list of issues associated with a repository, we can use the `getIssues`\n\n### Step 1: Import the GitHub ballerina library.\nFirst, import the `ballerinax/github` module into a ballerina project.\n```ballerina\n    import ballerinax/github;\n```\n\n### Step 2: Initialize the GitHub client.\nYou can now make the connection configuration using the personal access token, or the obtained oAuth app token.\n\n```ballerina\n    configurable string accessToken = ?;\n\n    github:Configuration config = {\n        token: accessToken\n    };\n\n    github:Client githubClient = new (config);\n\n```\n\n### Step 3: Initialize the required parameters\nInitialize variables with suitable values which needs to be passed as arguments to the client remote function.\n\n```ballerina\n    int recordCount = 10; // number of issues per page.\n    string repositoryOwner = \"\";\n    string repositoryName = \"\";\n```\n\n### Step 4: Invoke the client remote function and obtain the results.\n\n```ballerina\n    var issueList = githubClient->getRepositoryIssueList(repositoryOwner, repositoryName, [github:ISSUE_OPEN], recordCount);\n    if (issueList is github:IssueList) {\n        log:printInfo(string `Issue List: ${issueList.nodes.length()} Issues found`);\n    } else {\n        log:printError(\"Error: \"+ issueList.toString());\n    }\n```\n\n\n## Listener Side Operation Example: On one or more commits are pushed to a repository branch or tag.\n\n### Step 1: Import the GitHub Webhook ballerina library.\nFirst, import the `ballerinax/github.webhook` module and `ballerina/websub` module into a ballerina project.\n```ballerina\n    import ballerina/websub;\n    import ballerinax/github.webhook as github;\n```\n\n### Step 2: Initialize the GitHub Webhook Listener.\nInitialize the Webhook Listener by providing the port number.\n\n```ballerina\n    listener github:Listener webhookListener = new (9090);\n```\n\n### Step 3: Annotate the service with websub:SubscriberServiceConfig.\nAnnotate the service with `websub:SubscriberServiceConfig` providing necessary properties.\n\n```ballerina\n@websub:SubscriberServiceConfig {\n    target: [github:HUB, githubTopic],\n    secret: githubSecret,\n    callback: githubCallback,\n    httpConfig: {\n        auth: {\n            token: accessToken\n        }\n    }\n}\nservice /subscriber on webhookListener {\n   \n}\n```\n\n### Step 4: Provide remote functions corresponding to the events which you are interested on.\n\n```ballerina\n    remote function onPush(github:PushEvent event) returns github:Acknowledgement? {\n        log:printInfo(\"Received push-event-message \", eventPayload = event);\n    }\n```",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-github",
      "keywords": [
        "github",
        "endpoint",
        "API"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620298145000,
      "modules": [],
      "pullCount": 114
    },
    {
      "organization": "ballerinax",
      "name": "googleapis.gmail",
      "version": "0.99.7",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis.gmail/0.99.7",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.gmail/0.99.7/ballerinax-googleapis.gmail-java11-0.99.7.bala",
      "summary": "Connects to Gmail from Ballerina.",
      "readme": "Connects to Gmail from Ballerina.\n\n## Module Overview\n\nBallerina Gmail Connector provides the capability to send, read and delete emails through the Gmail REST API. It also provides the ability to read, trash, untrash and delete threads, ability to get the Gmail profile and mailbox history, etc. The connector handles OAuth 2.0 authentication.\n\n## Configurations\n\nInstantiate the connector by giving authentication details in the Gmail client config, which has built-in support for OAuth 2.0. Gmail uses OAuth 2.0 to authenticate and authorize requests. The Gmail connector can be minimally instantiated in the Gmail client config using the Access Token or by using the Client ID, Client Secret and Refresh Token.\n\n**Obtaining Tokens to Run the Sample**\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth Consent Screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create Credentials** and select **OAuth Client ID**.\n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use\n[OAuth 2.0 Playground](https://developers.google.com/oauthplayground) to receive the Authorization Code and obtain the\nAccess Token and Refresh Token).\n5. Click **Create**. Your Client ID and Client Secret will appear.\n6. In a separate browser window or tab, visit [OAuth 2.0 Playground](https://developers.google.com/oauthplayground). Click on the `OAuth 2.0 Configuration`\n icon in the top right corner and click on `Use your own OAuth credentials` and provide your `OAuth Client ID` and `OAuth Client Secret`.\n7. Select the required Gmail API scopes from the list of API's, and then click **Authorize APIs**.\n8. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token and access token.\n\nYou can now enter the credentials in the Gmail client config.\n\n```ballerina\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: <REFRESH_TOKEN>,\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n    }\n};\n\ngmail:Client gmailClient = new (gmailConfig);\n```\n\n## Compatibility\n\n| Ballerina Language Versions  | Gmail API Version |\n|:----------------------------:|:-----------------:|\n|  Swan Lake Alpha 5           |   v1              |\n\n## Example Code\nThis code sample represents sending a new text message from one Gmail user to another one. Here, the receiver which needs to receive carbon copy is also mentioned.\n```ballerina\nimport ballerina/io;\nimport ballerinax/googleapis.gmail as gmail;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: <REFRESH_TOKEN>,\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n    }\n};\n\ngmail:Client gmailClient = new (gmailConfig);\n\npublic function main(string... args) {\n    \n    gmail:MessageRequest messageRequest = {};\n    messageRequest.recipient = \"aa@gmail.com\";\n    messageRequest.sender = \"bb@gmail.com\";\n    messageRequest.cc = \"cc@gmail.com\";\n    messageRequest.subject = \"Email-Subject\";\n    messageRequest.messageBody = \"Email Message Body Text\";\n\n    // Set the content type of the mail as TEXT_PLAIN or TEXT_HTML.\n    messageRequest.contentType = gmail:TEXT_PLAIN;\n    string userId = \"me\";\n\n    // Send the message.\n    var sendMessageResponse = gmailClient->sendMessage(userId, messageRequest);\n    if (sendMessageResponse is [string, string]) {\n        // If successful, print the message ID and thread ID.\n        [string, string] [messageId, threadId] = sendMessageResponse;\n        io:println(\"Sent Message ID: \" + messageId);\n        io:println(\"Sent Thread ID: \" + threadId);\n    } else {\n        // If unsuccessful, print the error returned.\n        io:println(\"Error: \", sendMessageResponse);\n    }\n}\n```\n# Listener Module\n\nConnects to Gmail Listener using Ballerina.\n\n# Module Overview\n\nThe Gmail Listener Ballerina Connector provides the capability to listen the push notification for changes to Gmail mailboxes. The Gmail Listener Ballerina Connector supports to listen the changes of Gmail mailboxes such as receiving new message, receiving new thread, adding new label to a message, adding star to a message, removing label to a message, removing star to a message and receiving a new attachment with following trigger methods: `onNewEmail`, `onNewThread`, `onNewLabeledEmail`, `onNewStarredEmail`, `onLabelRemovedEmail`,`onStarRemovedEmail`, `onNewAttachment`.\n\n\n# Prerequisites:\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https://ballerinalang.org/downloads/)\nBallerina Swan Lake Alpha 5 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for BasicAuth and OAuth 2.0. Gmail uses OAuth 2.0 to authenticate and authorize requests. The Gmail connector can be minimally instantiated in the HTTP client config using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n\n## Obtaining Tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Library** from the left side menu. In the search bar enter required API/Service name(Eg: Gmail, Cloud Pub/Sub). Then select required service and click **Enable** button.\n3. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n4. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n5. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the refresh token). \n6. Click **Create**. Your client ID and client secret appear. \n7. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), select the required Gmail scopes and `https://www.googleapis.com/auth/pubsub` scope of `Cloud Pub/Sub API v1`, and then click **Authorize APIs**.\n\n8. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token.\n\n\n## Add project configurations file\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the token obtained in the previous step to the `Config.toml` file.\n\n```\n[ballerinax.googleapis.gmail]\nrefreshToken = \"enter your refresh token here\"\nclientId = \"enter your client id here\"\nclientSecret = \"enter your client secret here\"\nport = \"enter the port where your listener runs\"\ntopicName = \"enter your push topic name\"\nsubscriptionName = \"enter your subscription name\"\nproject = \"enter your project name\"\npushEndpoint = \"Listener endpoint\"\n\n```\n\n# Compatibility\n\n| Ballerina Language Versions  | Gmail API Version |\n|:----------------------------:|:-----------------:|\n|  Swan Lake Alpha 5           |   v1              |\n\n# Quickstart(s):\n\n## Working with Gmail Listener\n\n### Step 1: Import Gmail and Gmail Listener Ballerina Library\nFirst, import the ballerinax/googleapis.gmail and ballerinax/googleapis.gmail.'listener module into the Ballerina project.\n```ballerina\n    import ballerinax/googleapis.gmail as gmail;\n    import ballerinax/googleapis.gmail.'listener as gmailListener;\n```\n\n### Step 2: Initialize the Gmail Listener\nIn order for you to use the Gmail Listener Endpoint, first you need to create a Gmail Listener endpoint.\n```ballerina\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\n\n\n```\n### Step 3: Write service with required trigger \nThe Listener triggers can be invoked by using a service.\n```ballerina\nservice / on gmailEventListener {\n   remote function onNewEmail(gmail:Message message) returns error? {\n           // You can write your logic here. \n   }   \n}\n```\n\n\n# Samples\n\n### On New Email\n\nTriggers when a new e-mail appears in the mail inbox.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis.gmail as gmail;\nimport ballerinax/googleapis.gmail.'listener as gmailListener;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n};\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\nservice / on gmailEventListener {\n   remote function onNewEmail(gmail:Message message) returns error? {\n           log:printInfo(\"New Email : \" , message);\n   }   \n}\n\n```\n\n### On New Labeled Email\n\nTriggers when you label an email.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis.gmail as gmail;\nimport ballerinax/googleapis.gmail.'listener as gmailListener;\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable int port = ?;\nconfigurable string project = ?;\nconfigurable string pushEndpoint = ?;\n\ngmail:GmailConfiguration gmailConfig = {\n    oauthClientConfig: {\n        refreshUrl: gmail:REFRESH_URL,\n        refreshToken: refreshToken,\n        clientId: clientId,\n        clientSecret: clientSecret\n        }\n};\n\nlistener gmailListener:Listener gmailEventListener = new(port, gmailConfig,  project, pushEndpoint);\n\nservice / on gmailEventListener {\n   remote function onNewLabeledEmail(gmailListener:ChangedLabel changedLabeldMsg) returns error? {\n           log:printInfo(\"Labeled : \" , changedLabeldMsg);\n   }   \n}\n\n```\nMore samples are available at \"https://github.com/ballerina-platform/module-ballerinax-googleapis.gmail/tree/master/samples/listener\".",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-googleapis.gmail",
      "keywords": [
        "gmail",
        "email",
        "google",
        "mail"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620227368000,
      "modules": [],
      "pullCount": 107
    },
    {
      "organization": "ballerinax",
      "name": "googleapis.drive",
      "version": "0.1.3",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis.drive/0.1.3",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis.drive/0.1.3/ballerinax-googleapis.drive-java11-0.1.3.bala",
      "summary": "",
      "readme": "# Ballerina Google Drive Connector\n\n[![Build](https://github.com/ballerina-platform/module-ballerinax-googleapis.drive/workflows/CI/badge.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.drive/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https://img.shields.io/github/last-commit/ballerina-platform/module-ballerinax-googleapis.drive.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.drive/commits/master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nConnects to Google Drive using Ballerina.\n\n<!-- TOC -->\n\n- [Google Drive Connecter](#markdown-navigation)\n    - [Introduction](#introduction)\n        - [What is Google drive](#what-is-google-drive-?)\n        - [Key features of Google Drive](#key-features-of-google-drive)\n        - [Connector Overview](#connector-overview)\n    - [Prerequisites](#prerequisites)\n        - [Obtaining tokens](#obtaining-tokens)\n        - [Add project configurations file](#add-project-configurations-file)\n    - [Supported versions & limitations](#supported-versions-&-limitations)\n    - [Quickstart](#quickstart)\n    - [Samples](#samples)\n    - [Building from the Source](#building-from-the-source)\n    - [Contributing to Ballerina](#contributing-to-ballerina)\n    - [Code of Conduct](#code-of-conduct)\n    - [Useful Links](#useful-links)\n    - [How you can contribute](#how-you-can-contribute)\n\n<!-- /TOC -->\n\n# Introduction\n\n## What is Google drive?\n\n[Google Drive](https://developers.google.com/drive/api) allows users to store files on their servers, \nsynchronize files across devices, and share files. Google Drive encompasses Google Docs, Google Sheets, and Google \nSlides, which are a part of the Google Docs Editors office suite that permits the collaborative editing of documents, \nspreadsheets, presentations, drawings, forms, and more. Files created and edited through the Google Docs suite are saved in Google Drive.\n\n![alt text](/docs/images/drive_overview.png?raw=true)\n\n## Key features of Google Drive\n\n* Easy and secure access to all of your content.\n* Store, share and collaborate on files and folders from any mobile device, tablet or computer.\n* Cloud-native collaboration apps to supercharge teamwork.\n* Drive integrates seamlessly with Docs, Sheets, and Slides, cloud-native apps that enable your team to collaborate effectively in real-time.\n* Integration with the tools and apps your team is already using.\n* Drive integrates with and complements your team’s existing technology. \n* Drive works on all major platforms, enabling you to work seamlessly across your browser, mobile device, tablet and computer.\n\n## Connector Overview\n\nThe Google Drive Ballerina Connector allows you to access the \n[Google Drive API Version v3](https://developers.google.com/drive/api) through Ballerina. The connector can be used to implement some of the most common use cases of Google Drive. The connector provides the capability to programmatically manage files & folders in the drive.\n\nThe Google Drive Ballerina Connector supports file and folder management operations related to creating, deleting, \nupdating and retrieving.\n\n![alt text](/docs/images/connecter_overview.png?raw=true)\n\n# Prerequisites\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https://ballerinalang.org/downloads/)\nBallerina Swan Lake Alpha 5  is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for BasicAuth and OAuth 2.0. Google Drive uses OAuth 2.0 to authenticate and authorize requests. The Google Drive connector can be minimally instantiated in the HTTP client config using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n\n## Obtaining tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and \nfollow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (\n    enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the access token and refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), \nselect the required Google Calendar scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the \nrefresh token and access token. \n\n## Add project configurations file\n\nAdd the project configuration file by creating a `Config. toml` file under the root path of the project structure.\nThis file should have the following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n#### Config.toml\n```ballerina\n[ballerinax.googleapis.drive]\nclientId = \"<client_id\">\nclientSecret = \"<client_secret>\"\nrefreshToken = \"<refresh_token>\"\n```\n\n# Supported versions & limitations\n\n## Supported Versions\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha 5           |\n| Google Drive API            |             V3                  |\n\n## Limitations\n\nGoogle API v3 supports resource types - Files, Permissions, Changes, Replies, Revisions, Drives and Channels. Currently, \nGoogle drive connecter supports operations related to Files, Channels and Changes only. .It doesn't support admin related operations like creatin new shared drives.\n\n# Quickstart\n\n## Working with Google Drive Endpoint Actions\n\nYou must follow the following steps in order to obtain the tokens needed for the configuration of the Ballerina Connector.\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), select the required Google Drive scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token.\n\n### Step 1: Import the Google Drive Ballerina Library\nFirst, import the ballerinax/googleapis.drive module into the Ballerina project.\n```ballerina\nimport ballerinax/googleapis.drive as drive;\n```\nAll the actions return a valid response or error. If the action is a success, then the requested resource will be returned. Else error will be returned.\n\n### Step 2: Initialize the Google Drive Client\nIn order for you to use the Drive Endpoint, first, you need to create a Google Drive Client endpoint.\n```ballerina\n\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshUrl = drive:REFRESH_URL;\n\ndrive:Configuration config = {\n    clientConfig: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: refreshUrl,\n        refreshToken: refreshToken\n    }\n};\n\ndrive:Client driveClient = new (config);\n```\nThen the endpoint actions can be invoked as `var response = driveClient->actionName(arguments)`.\n\n#### How to get an id from a file or folder in Google drive\n1. Go to Google drive https://drive.google.com/drive/u/0/my-drive\n2. Right-click on a folder or file.\n3. Click 'Get link'. Then copy the link.\n4. You can find the ID in the link copied or You can get the id directly from the browser URL after clicking on the file\n![alt text](/docs/images/file_id.jpeg?raw=true)\n\n## Example code\n\nCreating a drive:driveClient by giving the HTTP client config details. \n\n```ballerina\n    import ballerina/config;   \n    import ballerinax/googleapis.drive as drive;\n\n    configurable string clientId = ?;\n    configurable string clientSecret = ?;\n    configurable string refreshToken = ?;\n    configurable string refreshUrl = drive:REFRESH_URL;\n\n    Configuration config = {\n        clientConfig: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshUrl: refreshUrl,\n            refreshToken: refreshToken\n        }\n    };\n\n    drive:Client driveClient = check new (config);\n```\nThere is support for providing configuration using access token also.\n\n```\nConfiguration config = {\n    clientConfig: {\n        token: os:getEnv(\"ACCESS_TOKEN\")\n    }\n};\n```\n\n# Samples\n\n### Get file by id\n```ballerina\n    File|error response = driveClient->getFile(fileId);\n```\n### Copy File\n```ballerina\n    File|error response = driveClient->copyFile(sourceFileId);\n    File|error response = driveClient->copyFile(sourceFileId, destinationFolderId);\n    File|error response = driveClient->copyFile(sourceFileId, destinationFolderId, newFileName);\n```\n### Move File\n```ballerina\n    File|error response = driveClient->moveFile(sourceFileId, destinationFolderId);\n```\n### Rename File\n```ballerina\n    File|error response = driveClient->renameFile(fileId, newFileName);\n```\n### Create folder\n```ballerina\n    File|error response = driveClient->createFolder(folderName);\n    File|error response = driveClient->createFolder(folderName, parentFolderId);\n```\n### Create file\n```ballerina\n    File|error response = driveClient->createFile(fileName);\n    File|error response = driveClient->createFile(fileName, mimeType);\n    File|error response = driveClient->createFile(fileName, mimeType, parentFolderId);\n```\n\n### Search files by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFilesByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFilesByName(\"ballerina\", \"createdTime\");\n```\n### Search folders by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFoldersByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFoldersByName(\"ballerina\", \"createdTime\");\n```\n\n### Filter files\n```ballerina\n    stream<File>|error response = driveClient->filterFiles(filterString);\n    stream<File>|error response = driveClient->filterFiles(filterString, \"createdTime\");\n```\n\n| What you want to query                                               |    Example                                                             |\n| ---------------------------------------------------------------------|------------------------------------------------------------------------|\n|Files with the name \"hello\"                                           |     name = 'hello'                                                     |\n|Files with a name containing the words \"hello\" and \"goodbye\"          |     name contains 'hello' and name contains 'goodbye'                  |\n|Files with a name that does not contain the word \"hello\"              |     not name contains 'hello'                                          |   \n|Folders that are Google apps or have the folder MIME type             |     mimeType = 'application/vnd.google-apps.folder'                    |\n|Files that are not folders                                            |     mimeType != 'application/vnd.google-apps.folder'                   |\n|Files that contain the text \"important\" and in the trash              |     fullText contains 'important' and trashed = true                   |\n|Files that contain the word \"hello\"                                   |     fullText contains 'hello'                                          |\n|Files that do not have the word \"hello\"                               |     not fullText contains 'hello'                                      |\n|Files that contain the exact phrase \"hello world\"                     |     fullText contains '\"hello world\"'                                  |\n|Files with a query that contains the \"\" character (e.g., \"\\authors\")  |     fullText contains '\\\\authors'                                      |\n|Files with ID within a collection, e.g. parents collection            |     '1234567' in parents                                               |\n|Files in an Application data folder in a collection                   |     'appDataFolder' in parents                                         |\n|Files for which user \"test@example.org\" has write permission          |     'test@example.org' in writers                                      |\n|Files modified after a given date                                     |      modifiedTime > '2012-06-04T12:00:00' // default time zone is UTC  |\n|Files shared with the authorized user with \"hello\" in the name        |      sharedWithMe and name contains 'hello'                            |\n\n### Get All files\n```ballerina\n    drive:stream<File>|error res = driveClient->getAllFiles();\n```\n\n## Workspace related functions\n### Get All Google spreadsheets\n```ballerina\n    stream<File>|error response = driveClient->getAllSpreadsheets();\n     if (response is stream<File>){\n        error? e = response.forEach(isolated function (File response) {\n            log:printInfo(response?.id.toString());\n        });\n    } else {\n        log:printError(response.message());\n    }\n```\n### Search Google spreadsheets by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getSpreadsheetsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getSpreadsheetsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google documents by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getDocumentsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getDocumentsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google forms by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getFormsByName(\"ballerina\");\n    stream<File>|error response = driveClient->getFormsByName(\"ballerina\", \"createdTime\");\n```\n### Search Google slides by name (Partial search)\n```ballerina\n    stream<File>|error response = driveClient->getSlidesByName(\"ballerina\");\n    stream<File>|error response = driveClient->getSlidesByName(\"ballerina\", \"createdTime\");\n```\n### Update metadata in a file\n```ballerina\n    UpdateFileMetadataOptional optionalsFileMetadata = {\n        addParents : parentFolder\n    };\n    File payloadFileMetadata = {\n        name : \"test\"\n    };\n    File|error res = driveClient->updateFileMetadataById(fileId, optionalsFileMetadata, payloadFileMetadata);\n```\n### Download file\n```ballerina\n    string|error response = driveClient->downloadFile(fileId);\n```\n### Delete File by id\n```ballerina\n    boolean|error response = driveClient->deleteFile(fileId);\n```\n### Create folder with metadata\nMore details : https://developers.google.com/drive/api/v3/reference/files/update\n```ballerina\n    CreateFileOptional optionals_create_folder = {\n        ignoreDefaultVisibility : false\n    };\n    File payload_create_folder = {\n        mimeType : \"application/vnd.google-apps.folder\",\n        name : \"folderInTheRoot\"\n    };\n    File|error res = driveClient->createMetaDataFile(optionals_create_folder, payload_create_folder);\n```\n### Upload file\n```ballerina\n    File|error response = driveClient->uploadFile(localFilePath);\n    File|error response = driveClient->uploadFile(localFilePath, fileName);\n    File|error response = driveClient->uploadFile(localFilePath, fileName, parentFolderId);\n```\n### Upload file using a byte array\n```ballerina\n    byte[] byteArray = [116,101,115,116,45,115,116,114,105,110,103];\n    File|error response = driveClient->uploadFileUsingByteArray(byteArray, fileName);\n    File|error response = driveClient->uploadFileUsingByteArray(byteArray, fileName, parentFolderId);\n```\n\n# Building from the Source\n\n### Setting Up the Prerequisites\n\n1. Download and install Java SE Development Kit (JDK) version 11 (from one of the following locations).\n\n   * [Oracle](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)\n\n   * [OpenJDK](https://adoptopenjdk.net/)\n\n        > **Note:** Set the JAVA_HOME environment variable to the path name of the directory into which you installed JDK.\n\n2. Download and install [Ballerina Alpha 5 ](https://ballerina.io/). \n\n### Building the Source\n\nExecute the commands below to build from the source after installing Ballerina Alpha 5  version.\n\n1. To clone the repository:\nClone this repository using the following command:\n```shell\n    git clone https://github.com/ballerina-platform/module-ballerinax-googleapis.drive\n```\nExecute the commands below to build from the source after installing Ballerina SLP8 version.\n\n2. To build the library:\nRun this command from the module-ballerinax-googleapis.drive root directory:\n```shell script\n    bal build\n```\n\n3. To build the module without the tests:\n```shell script\n    bal build -c --skip-tests\n```\n\n## Contributing to Ballerina\n\nAs an open-source project, Ballerina welcomes contributions from the community. \n\nFor more information, go to the [contribution guidelines](https://github.com/ballerina-platform/ballerina-lang/blob/master/CONTRIBUTING.md).\n\n## Code of Conduct\n\nAll the contributors are encouraged to read the [Ballerina Code of Conduct](https://ballerina.io/code-of-conduct).\n\n## Useful Links\n\n* Discuss the code changes of the Ballerina project in [ballerina-dev@googlegroups.com](mailto:ballerina-dev@googlegroups.com).\n* Chat live with us via our [Slack channel](https://ballerina.io/community/slack/).\n* Post all technical questions on Stack Overflow with the [#ballerina](https://stackoverflow.com/questions/tagged/ballerina) tag.\n\n## How you can contribute\n\nClone the repository by running the following command\n`git clone https://github.com/ballerina-platform/module-ballerinax-googleapis.drive.git`\n\nAs an open-source project, we welcome contributions from the community. Check the [issue tracker](https://github.com/ballerina-platform/module-ballerinax-googleapis.drive/issues) for open issues that interest you. We look forward to receiving your contributions.",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-googleapis.drive",
      "keywords": [
        "google",
        "drive",
        "storage"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620235106000,
      "modules": [],
      "pullCount": 68
    },
    {
      "organization": "ballerinax",
      "name": "googleapis_sheets",
      "version": "0.99.7",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis_sheets/0.99.7",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis_sheets/0.99.7/ballerinax-googleapis_sheets-java11-0.99.7.bala",
      "summary": "Connects to Google Sheets using Ballerina.",
      "readme": "# Ballerina Google Sheets Module\n\nConnects to Google Sheets using Ballerina.\n\n# Module Overview\n\nThe Google Spreadsheet Ballerina Connector allows you to access the [Google Spreadsheet API Version v4](https://developers.google.com/sheets/api) through Ballerina. The connector can be used to implement some of the most common use cases of Google Spreadsheets. The connector provides the capability to programmatically manage spreadsheets, manage worksheets, do CRUD operations on worksheets, and do column wise, row wise and cell wise operations through the connector endpoints.\n\nThe Google Spreadsheet Ballerina Connector supports spreadsheet management operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet. It also supports worksheet management operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet. The connector also provides capabilities to handle data level operations like setting, getting and clearing a range of data, inserting columns/rows before and after a given position, creating or updating, getting and deleting columns/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Compatibility\n\n|                                   | Version               |\n|:---------------------------------:|:---------------------:|\n| Google Sheets API Version         | V4                    |\n| Ballerina Language                | Swan Lake Alpha 4     |\n| Java Development Kit (JDK)        | 11                    |\n\n# Supported Operations\n\n## Spreadsheet Management Operations\nThe `ballerinax/googleapis_sheets` module contains operations related to accessing the Google sheets API to perform \nspreadsheet management operations. It includes operations like creating a spreadsheet, opening a spreadsheet, listing all the spreadsheets available in a user account, renaming a spreadsheet.\n\n## Worksheet Management Operations\nThe `ballerinax/googleapis_sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet management operations. It includes operations like getting all the worksheets available in a spreadsheet, opening a worksheet, adding a new worksheet, removing a worksheet and renaming a worksheet.\n\n\n## Worksheet Service Operations\nThe `ballerinax/googleapis_sheets` module contains operations related to accessing the Google sheets API to perform \nworksheet data level operations. It includes operations like setting, getting and clearing a range of data, inserting columns/rows before and after a given position, creating or updating, getting and deleting columns/rows, setting, getting and clearing cell data, appending a row to a sheet, appending a row to a range of data, appending a cell to a range of data, copying a worksheet to a destination spreadsheet, and clearing worksheets.\n\n# Prerequisites:\n\n* Java 11 Installed\nJava Development Kit (JDK) with version 11 is required.\n\n* Download the Ballerina [distribution](https://ballerinalang.org/downloads/)\nBallerina Swan Lake Alpha 4 is required.\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Spreadsheet uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Spreadsheet connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Spreadsheet connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    sheets:SpreadsheetConfiguration spreadsheetConfig = {\n        oauthClientConfig: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <sheets:REFRESH_URL>\n        }\n    }\n    ```\n\n## Obtaining Tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), select the required Google Spreadsheet scopes, and then click **Authorize APIs**.\n7. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the access token and refresh token.\n\n## Add project configurations file\nAdd the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the token obtained in the previous step to the `Config.toml` file.\n\n```\n[ballerinax.googleapis_sheets]\nrefreshToken = \"enter your refresh token here\"\nclientId = \"enter your client id here\"\nclientSecret = \"enter your client secret here\"\ntrustStorePath = \"enter a truststore path if required\"\ntrustStorePassword = \"enter a truststore password if required\"\n\n```\n\n# Quickstart(s):\n\n## Working with GSheets Endpoint Actions\n\n### Step 1: Import the Google Sheets Ballerina Library\nFirst, import the ballerinax/googleapis_sheets module into the Ballerina project.\n```ballerina\n    import ballerinax/googleapis_sheets as sheets;\n```\nAll the actions return valid response or error. If the action is a success, then the requested resource will be returned. Else error will be returned.\n\n### Step 2: Initialize the Google Sheets Client\nIn order for you to use the GSheets Endpoint, first you need to create a GSheets Client endpoint.\n```ballerina\nconfigurable string refreshToken = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: refreshToken\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n```\nThen the endpoint actions can be invoked as `var response = spreadsheetClient->actionName(arguments)`.\n\n### Step 3: Initialize the Google Sheets Client with default truststore\n```ballerina\nimport ballerina/io;\nimport ballerinax/googleapis_sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n### Step 4: Initialize the Google Sheets Client with custom truststore\n```ballerina\nimport ballerina/io;\nimport ballerinax/googleapis_sheets as sheets;\n\nsheets:SpreadsheetConfiguration spreadsheetConfig = {\n    oauthClientConfig: {\n        clientId: \"<CLIENT_ID>\",\n        clientSecret: \"<CLIENT_SECRET>\",\n        refreshUrl: sheets:REFRESH_URL,\n        refreshToken: \"<REFRESH_TOKEN>\"\n    },\n    secureSocketConfig: {\n        trustStore: {\n            path: \"<fullQualifiedPathToTrustStore>\",\n            password: \"<truststorePassword>\"\n        }\n    }\n};\n\nsheets:Client spreadsheetClient = checkpanic new (spreadsheetConfig);\n\npublic function main(string... args) {\n    var response = spreadsheetClient->openSpreadsheetById(<spreadsheet-id>);\n    if (response is sheets:Spreadsheet) {\n        io:println(\"Spreadsheet Details: \", response);\n    } else {\n        io:println(\"Error: \", response);\n    }\n}\n```\n\n# Samples\n\n### Create Spreadsheet with given name\nWe must specify the spreadsheet name as a string parameter to the createSpreadsheet remote operation. This is the basic scenario of creating a new spreadsheet with the name “NewSpreadsheet”. It returns a Spreadsheet record type with all the information related to the spreadsheet created on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    string spreadsheetId = \"\";\n    string sheetName = \"\";\n    \n    // Create Spreadsheet with given name\n    sheets:Spreadsheet|error response = spreadsheetClient->createSpreadsheet(\"NewSpreadsheet\");\n    if (response is sheets:Spreadsheet) {\n        log:printInfo(\"Spreadsheet Details: \" + response.toString());\n        spreadsheetId = response.spreadsheetId;\n    } else {\n        log:printError(\"Error: \" + response.toString());\n    }\n```\n\n### Add a New Worksheet with given name\nWe must specify the spreadsheet ID and the name for the new worksheet as string parameters to the addSheet remote operation. Spreadsheet ID is available in the spreadsheet URL \"https://docs.google.com/spreadsheets/d/\" + <spreadsheetId> + \"/edit#gid=\" + <sheetId>. This is the basic scenario of adding a new worksheet  with the name “NewWorksheet” by the spreadsheet ID which is obtained when creating a new spreadsheet. It returns a Sheet record type with all the information related to the worksheet added on success and a ballerina error if the operation is unsuccessful.\n```ballerina\n    // Add a New Worksheet with given name to the Spreadsheet with the given Spreadsheet ID\n    sheets:Sheet|error sheet = spreadsheetClient->addSheet(spreadsheetId, \"NewWorksheet\");\n    if (sheet is sheets:Sheet) {\n        log:printInfo(\"Sheet Details: \" + sheet.toString());\n        sheetName = sheet.properties.title;\n    } else {\n        log:printError(\"Error: \" + sheet.toString());\n    }\n```\nMore Samples are available at \"https://github.com/ballerina-platform/module-ballerinax-googleapis.sheets/tree/master/samples\".",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-googlespreadsheet",
      "keywords": [
        "sheets",
        "google",
        "spreadsheet"
      ],
      "ballerinaVersion": "slalpha4",
      "createdDate": 1619160279000,
      "modules": [],
      "pullCount": 66
    },
    {
      "organization": "ballerinax",
      "name": "googleapis_calendar",
      "version": "0.1.4",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/googleapis_calendar/0.1.4",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/googleapis_calendar/0.1.4/ballerinax-googleapis_calendar-java11-0.1.4.bala",
      "summary": "",
      "readme": "[![Build](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/workflows/CI/badge.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/actions?query=workflow%3ACI)\n[![GitHub Last Commit](https://img.shields.io/github/last-commit/ballerina-platform/module-ballerinax-googleapis.calendar.svg)](https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/commits/master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# Ballerina Google Calendar Connector \nConnects to Google Calendar using Ballerina.\n\n# Introduction\n## Google Calendar\n[Google Calendar](https://developers.google.com/calendar) is a time-management and scheduling calendar service developed by Google. It lets users to organize their schedule and share events with others. The Google Calendar endpoint allows you to access the Google Calendar API Version v3 through Ballerina.\n\n## Key Features of Google Calendar\n* Manage Events\n* Manage Calendar\n* Listen event changes - [Push Notification](https://developers.google.com/calendar/v3/push)\n\n## Connector Overview\n\nThe Google Calendar Ballerina Connector allows you to access the Google Calendar API Version V3 through Ballerina. The connector can be used to implement some of the most common use cases of Google Calendar. The connector provides the capability to programmatically manage events and calendar, CRUD operations on event and calendar operations through the connector endpoints and listener for the events created in the calendar.\n\n# Prerequisites\n\n* Java 11 Installed\n  Java Development Kit (JDK) with version 11 is required.\n\n* Download the required Ballerina [distribution](https://ballerinalang.org/downloads/) version\n\n## Compatibility\n\n|                             |            Versions             |\n|:---------------------------:|:-------------------------------:|\n| Ballerina Language          |     Swan Lake Alpha4            |\n| Google Calendar API         |             V3                  |\n| Java Development Kit (JDK)  |             11                  |\n\n### Obtaining Tokens\n\n1. Visit [Google API Console](https://console.developers.google.com), click **Create Project**, and follow the wizard to create a new project.\n2. Go to **Credentials -> OAuth consent screen**, enter a product name to be shown to users, and click **Save**.\n3. On the **Credentials** tab, click **Create credentials** and select **OAuth client ID**. \n4. Select an application type, enter a name for the application, and specify a redirect URI (enter https://developers.google.com/oauthplayground if you want to use \n[OAuth 2.0 playground](https://developers.google.com/oauthplayground) to receive the authorization code and obtain the \naccess token and refresh token). \n5. Click **Create**. Your client ID and client secret appear. \n6. Enable Calendar API in API console.\n7. In a separate browser window or tab, visit [OAuth 2.0 playground](https://developers.google.com/oauthplayground), select the required Google Calendar scopes, and then click **Authorize APIs**.\n8. When you receive your authorization code, click **Exchange authorization code for tokens** to obtain the refresh token and access token. \n\n\n### Add configurations file\n\n* Instantiate the connector by giving authentication details in the HTTP client config. The HTTP client config has built-in support for Bearer Token Authentication and OAuth 2.0. Google Calendar uses OAuth 2.0 to authenticate and authorize requests. It uses the Direct Token Grant Type. The Google Calendar connector can be minimally instantiated in the HTTP client config using the OAuth 2.0 access token.\n    * Access Token \n    ``` \n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            token: <access token>\n        }\n    }\n    ```\n\n    The Google Calendar connector can also be instantiated in the HTTP client config without the access token using the client ID, client secret, and refresh token.\n    * Client ID\n    * Client Secret\n    * Refresh Token\n    * Refresh URL\n    ```\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: <clientId>,\n            clientSecret: <clientSecret>,\n            refreshToken: <refreshToken>,\n            refreshUrl: <refreshUrl>\n        }\n    }\n    ```\n* Callback address is additionally required in order to use Google Calendar listener. It is the path of the listener resource function. The time-to-live in seconds for the notification channel is provided in optional parameter expiration time. By default it is 604800 seconds.\n  * Callback address\n  * Expiration time\n\n* Add the project configuration file by creating a `Config.toml` file under the root path of the project structure.\nThis file should have following configurations. Add the tokens obtained in the previous step to the `Config.toml` file.\n\n  ```\n  clientId = \"<client_id\">\n  clientSecret = \"<client_secret>\"\n  refreshToken = \"<refresh_token>\"\n  refreshUrl = \"<refresh_URL>\"\n  address = \"<address>\"\n  ```\n\n\n# Quickstart(s)\n\n## Create an quick add event\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax/googleapis_calendar` module into the Ballerina project.\n```ballerina\nimport ballerinax/googleapis_calendar as calendar;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,\n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\nNote: Must specify the **Refresh token**, obtained with exchanging the authorization code, the **Client ID** and the \n**Client Secret** obtained in the App creation, when configuring the Calendar connector client.\n\n\n### Step 3: Set up all the data required to create the quick event\nThe `quickAddEvent` remote function creates an event. The `calendarId` represents the calendar where the event has to be created and `title` refers the name of the event.\n\n```ballerina\nstring calendarId = \"primary\";\nstring title = \"Sample Event\";\n```\n\n### Step 4: Create the quick add event\nThe response from `quickAddEvent` is either an Event record or an `error` (if creating the event was unsuccessful).\n\n```ballerina\n//Create new quick add event.\ncalendar:Event|error response = calendarClient->quickAddEvent(calendarId, title);\n\nif (response is calendar:Event) {\n    // If successful, log event id\n    log:printInfo(response.id);\n} else {\n    // If unsuccessful\n    log:printError(\"Error: \" + response.toString());\n}\n```\n\n## Create an listener for new event creation\n### Step 1: Import the Calendar module\nFirst, import the `ballerinax/googleapis_calendar`, `import ballerinax/googleapis_calendar.'listener as listen` and `import ballerina/http` modules into the Ballerina project.\n\n```ballerina\nimport ballerina/http;\nimport ballerinax/googleapis_calendar as calendar;\nimport ballerinax/googleapis_calendar.'listener as listen;\n```\n\n### Step 2: Initialize the Calendar Client giving necessary credentials\nYou can now enter the credentials in the Calendar client config.\n```ballerina\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: <CLIENT_ID>,\n        clientSecret: <CLIENT_SECRET>\n        refreshToken: <REFRESH_TOKEN>,\n        refreshUrl: <REFRESH_URL>,   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\n```\n\n### Step 3: Initialize the Calendar Listener\nDefine all the data required to create\n\n```ballerina\nint port = 4567;\nstring calendarId = \"primary\";\nstring address = \"callback_url;\n\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address);\n```\n\n### Step 4: Create the listener service\nIf there is an event created in calendar, log will print the event title\n\n```ballerina\nservice /calendar on googleListener {\n    resource function post events(http:Caller caller, http:Request request)  returns error? {\n        listen:EventInfo payload = check googleListener.getEventType(caller, request);\n        if (payload?.eventType is string && payload?.event is calendar:Event) {\n            if (payload?.eventType == listen:CREATED) {\n                var event = payload?.event;\n                string? summary = event?.summary;        \n                if (summary is string) {\n                    log:printInfo(summary);\n                } \n            }\n        }      \n    }\n}\n```\n\n# **Samples**\n\nSamples are available at : https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar/tree/main/samples\nTo run a sample, create a new TOML file with name `Config.toml` in the same directory as the `.bal` file with above-mentioned configurable values. Configurable value port is additionally required in order to use listener.\n\n```\nport = \"<port>\"\n```\nRun this command inside sample directory:\n    ```shell\n    $ bal run \"<ballerina_file>\"\n    ```\n\n### Get all calendars\n\nThis sample shows how to get all calendars that are available in an authorized user's account.  This operation returns stream `Calendar` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n    calendar:Client calendarClient = check new (config);\n\n    stream<calendar:Calendar>|error res = calendarClient->getCalendars();\n    if (res is stream<calendar:Calendar>) {\n        var cal = res.next();\n        string id = check cal?.value?.id;\n        log:printInfo(id);\n    } else {\n        log:printError(res.message());\n    }\n}\n```\n\n### Create a new calendar\n\nThis sample shows how to create a new calendar in an authorized user's account. The name of the new calendar is required to do this. This operation will return a `CalenderResource` if successful. Else return an `error`.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n       oauth2Config: {\n           clientId: clientId,\n           clientSecret: clientSecret,\n           refreshToken: refreshToken,\n           refreshUrl: refreshUrl\n       }\n    };\n    calendar:Client calendarClient = check new (config);\n\n    calendar:CalendarResource|error res = calendarClient->createCalendar(\"testCalendar\");\n    if (res is calendar:CalendarResource) {\n       log:printInfo(res.id);\n    } else {\n       log:printError(res.message());\n    }\n}\n```\n\n### Delete a calendar\n\nThis sample shows how to delete a calendar in an authorized user's account. The calendar id is required to do this operation. This operation returns an error `true` if unsuccessful.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n       oauth2Config: {\n           clientId: clientId,\n           clientSecret: clientSecret,\n           refreshToken: refreshToken,\n           refreshUrl: refreshUrl\n       }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    error? res = calendarClient->deleteCalendar(calendarId);\n    if (res is error) {\n        log:printError(res.message());\n    } else {\n        log:printInfo(\"Calendar is deleted\");\n    }\n}\n```\n\n### Create a new event\n\nThis sample shows how to create an event in an authorized user's calendar. The calendar id and input event are required to do this operation. This operation returns an `Event` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n       oauth2Config: {\n           clientId: clientId,\n           clientSecret: clientSecret,\n           refreshToken: refreshToken,\n           refreshUrl: refreshUrl\n       }\n    };\n    calendar:Client calendarClient = check new (config);\n\n    calendar:InputEvent event = {\n       'start: {\n           dateTime:  \"2021-02-28T09:00:00+0530\"\n       },\n       end: {\n           dateTime:  \"2021-02-28T09:00:00+0530\"\n       },\n       summary: \"Sample Event\"\n    };\n    calendar:Event|error res = calendarClient->createEvent(calendarId, event);\n    if (res is calendar:Event) {\n       log:printInfo(res.id);\n    } else {\n       log:printError(res.message());\n    }\n}\n```\n\n### Create an quick add event\n\nThis sample shows how to create an quick add in an authorized user's calendar. It creates an event based on a simple text string. The calendar id and event title are required to do this operation. This operation returns an `Event` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    calendar:Event|error res = calendarClient->quickAddEvent(calendarId, \"Sample Event\");\n    if (res is calendar:Event) {\n        log:printInfo(res.id);\n    } else {\n        log:printError(res.message());\n    }\n}\n```\n### Get an event\n\nThis sample shows how to get an event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string eventId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n    calendar:Client calendarClient = check new (config);\n\n    calendar:Event|error res = calendarClient->getEvent(calendarId, eventId);\n    if (res is calendar:Event) {\n        log:printInfo(res.id);\n    } else {\n        log:printError(res.message());\n    }\n}`\n```\n\n### Get all events\n\nThis sample shows how to get all events that are available in an authorized user's calendar. The calendar id is required to do this operation. This operation returns stream `Event` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    stream<calendar:Event>|error res = calendarClient->getEvents(calendarId);\n    if (res is stream<calendar:Event>) {\n        var eve = res.next();\n        string id = check eve?.value?.id;\n        log:printInfo(id);\n    } else {\n        log:printError(res.message());\n    }\n}\n```\n\n### Update an existing event\n\nThis sample shows how to update an existing event that is available in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an `Event` if successful. Else returns `error`.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string eventId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    calendar:InputEvent event = {\n        'start: {\n            dateTime:  \"2021-02-28T09:00:00+0530\"\n        },\n        end: {\n            dateTime:  \"2021-02-28T09:00:00+0530\"\n        },\n        summary: \"Sample Event\"\n    };\n\n    calendar:Event|error res = calendarClient->updateEvent(calendarId, eventId, event);\n    if (res is calendar:Event) {\n        log:printInfo(res.id);\n    } else {\n        log:printError(res.message());\n    }\n}\n```\n\n### Delete an event\n\nThis sample shows how to delete an event in an authorized user's calendar. The calendar and event ids are required to do this operation. This operation returns an error `true` if unsuccessful. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string eventId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n       oauth2Config: {\n           clientId: clientId,\n           clientSecret: clientSecret,\n           refreshToken: refreshToken,\n           refreshUrl: refreshUrl\n       }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    error? res = calendarClient->deleteEvent(calendarId, eventId);\n    if (res is error) {\n        log:printError(res.message());\n    } else {\n        log:printInfo(\"Event is deleted\");\n    }\n}\n```\n\n### Watch event changes\n\nThis sample shows how to watch for changes to events in an authorized user's calendar. It is a subscription to receive push notification from Google on events changes.  The calendar id and callback url are required to do this operation. Channel live time can be provided via an optional parameter. By default it is 604800 seconds. This operation returns  `WatchResponse` if successful. Else returns `error`. \n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string address = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    calendar:WatchResponse|error res = calendarClient->watchEvents(calendarId, address);\n    if (res is calendar:WatchResponse) {\n        log:printInfo(res.id);\n    } else {\n        log:printError(res.message());\n    }\n}\n```\n\n### Stop a channel subscription\n\nThis sample shows how to stop an existing subscription. The channel id and resource is are required to do this operation. This operation returns an error `true` if unsuccessful.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\n\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string testChannelId = ?;\nconfigurable string testResourceId = ?;\n\npublic function main() returns error? {\n\n    calendar:CalendarConfiguration config = {\n        oauth2Config: {\n            clientId: clientId,\n            clientSecret: clientSecret,\n            refreshToken: refreshToken,\n            refreshUrl: refreshUrl\n        }\n    };\n\n    calendar:Client calendarClient = check new (config);\n\n    error? res = calendarClient->stopChannel(testChannelId, testResourceId);\n    if (res is error) {\n        log:printError(res.message());\n    } else {\n        log:printInfo(\"Channel is terminated\");\n    }\n}\n```\n\n## Listener\n\n### Trigger for new event\n\nThis sample shows how to create a trigger on new event. When a new event is occurred, that event details can be captured in this listener.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\nimport ballerinax/googleapis_calendar.'listener as listen;\n\nconfigurable int port = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string address = ?;\nconfigurable string expiration = ?;\n\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshToken: refreshToken,\n        refreshUrl: refreshUrl   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address, expiration);\n\nservice /calendar on googleListener {\n    remote function onNewEvent(calendar:Event event) returns error? {\n        log:printInfo(\"Created new event : \", event);\n    }\n}\n```\n\n### Trigger for updated event\n\nThis sample shows how to create a trigger on an event update. When a new event is occurred, that event details can be captured in this listener.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\nimport ballerinax/googleapis_calendar.'listener as listen;\n\nconfigurable int port = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string address = ?;\nconfigurable string expiration = ?;\n\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshToken: refreshToken,\n        refreshUrl: refreshUrl   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address, expiration);\n\nservice /calendar on googleListener {\n    remote function onEventUpdate(calendar:Event event) returns error? {\n        log:printInfo(\"Updated an event : \", event);\n    }\n}\n```\n\n### Trigger for deleted event\n\nThis sample shows how to create a trigger on delete event. When a new event is occurred, that event details can be captured in this listener.\n\n```ballerina\nimport ballerina/http;\nimport ballerina/log;\nimport ballerinax/googleapis_calendar as calendar;\nimport ballerinax/googleapis_calendar.'listener as listen;\n\nconfigurable int port = ?;\nconfigurable string clientId = ?;\nconfigurable string clientSecret = ?;\nconfigurable string refreshToken = ?;\nconfigurable string refreshUrl = ?;\nconfigurable string calendarId = ?;\nconfigurable string address = ?;\nconfigurable string expiration = ?;\n\ncalendar:CalendarConfiguration config = {\n    oauth2Config: {\n        clientId: clientId,\n        clientSecret: clientSecret,\n        refreshToken: refreshToken,\n        refreshUrl: refreshUrl   \n    }\n};\n\ncalendar:Client calendarClient = check new (config);\nlistener listen:Listener googleListener = new (port, calendarClient, calendarId, address, expiration);\n\nservice /calendar on googleListener {\n    remote function onEventDelete(calendar:Event event) returns error? {\n           log:printInfo(\"Deleted an event : \", event);\n   }\n}\n```",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-googleapis.calendar",
      "keywords": [
        "google",
        "calendar"
      ],
      "ballerinaVersion": "slalpha4",
      "createdDate": 1619054987000,
      "modules": [],
      "pullCount": 63
    },
    {
      "organization": "ballerinax",
      "name": "prometheus",
      "version": "0.1.7",
      "platform": "any",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/prometheus/0.1.7",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/prometheus/0.1.7/ballerinax-prometheus-any-0.1.7.bala",
      "summary": "",
      "readme": "## Package Overview\n\nThe Prometheus Observability Extension is one of the metrics extensions of the <a target=\"_blank\" href=\"https://ballerina.io/\">Ballerina</a> language.\n\nIt provides an implementation for exporting metrics to a Prometheus Server.\n\n### Enabling Prometheus Extension\n\nTo package the Prometheus extension into the Jar, follow the following steps.\n1. Add the following import to your program.\n```ballerina\nimport ballerinax/prometheus as _;\n```\n\n2. Add the following to the `Ballerina.toml` when building your program.\n```toml\n[package]\norg = \"my_org\"\nname = \"my_package\"\nversion = \"1.0.0\"\n\n[build-options]\nobservabilityIncluded=true\n```\n\nTo enable the extension and export metrics to Prometheus, add the following to the `Config.toml` when running your program.\n```toml\n[ballerina.observe]\nmetricsEnabled=true\nmetricsReporter=\"prometheus\"\n\n[ballerinax.prometheus]\nhost=\"127.0.0.1\"  # Optional Configuration. Default value is localhost\nport=9797         # Optional Configuration. Default value is 9797\n```",
      "template": false,
      "licenses": [],
      "authors": [],
      "sourceCodeLocation": "",
      "keywords": [],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1619281440000,
      "modules": [],
      "pullCount": 60
    },
    {
      "organization": "ballerinax",
      "name": "sfdc",
      "version": "2.1.8",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/sfdc/2.1.8",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/sfdc/2.1.8/ballerinax-sfdc-java11-2.1.8.bala",
      "summary": "Connects to Salesforce from Ballerina.",
      "readme": "Connects to Salesforce from Ballerina.\n\n## Module Overview\n\nThe Salesforce connector allows users to perform CRUD operations for SObjects, query using SOQL, search using SOSL, and describe SObjects and organizational data through the Salesforce REST API. Also, it supports adding bulk data jobs and batches of types JSON, XML, and CSV via the Salesforce Bulk API. Apart from these functionalities Ballerina Salesforce Connector includes a listener module to capture events. This connector follows OAuth 2.0 authentication for secure access. \n\n\n## Compatibility\n|                     |    Version                  |\n|:-------------------:|:---------------------------:|\n| Ballerina Language  | swan-lake-Alpha5            |\n| Salesforce API      | v48.0                       |\n| Salesforce Bulk API | v1                          |\n\n\n## Supported Operations\n\n### REST API Operations\n\nREST API provides a powerful, convenient, and simple Web services API for interacting with Salesforce Lightning Platform providing access to all the Salesforce functionalities through REST resources and HTTP methods. Ballerina Salesforce Connector utilizes the REST API for Salesforce Object (SObject) operations and for searching and querying data. At the same time, the connector provides users to get SObject details and organizational data using the REST API. \n\n#### SObject Operations\n\nThe `ballerinax/sfdc` module contains operations related to standard and customized SObjects such as Account, Contact, Opportunity, Lead etc. It facilitates users to create SObjects and get, update and delete records by SObject Id. \n\n#### SOQL & SOSL Operations\n\nThe `ballerinax/sfdc` module contains operations, which query using Salesforce Object Query Language (SOQL) and search using Salesforce Object Search Language (SOSL). This allows complex operations using SObjects relationships.\n\n### Bulk API Operations\n\nSalesforce Bulk API is a specialized asynchronous RESTful API for loading and querying bulk of data at once.  The `ballerinax/sfdc` module supports bulk data operations for CSV, JSON, and XML data types. \n\n### Event Listener\n\nThe Salesforce Streaming API let users push a stream of notification from Salesforce to client apps based push topics. Push topics are SObjects that contain criterias for the events that users want to listen to such as data changes for a particular SObject.  \n\nThe `ballerinax/sfdc` module includes a Listener that would capture events on PushTopics defined in a Salesforce instance. PushTopic events provide a way to receive notifications for changes to Salesforce data that match an SOQL query.\n\n\n# Prerequisites\n\n1. Salesforce Organization  \n\n    You can simply setup the Salesforce Developer Edition Organization for testing purposes through the following link [developer.salesforce.com/signup](https://developer.salesforce.com/signup). \n\n2. Verify API Enabled permission in your Salesforce Organization\n3. Download and install [Ballerina](https://ballerina.io/downloads/). \n4. Install java and set up environment \n\n\n# Quickstart(s)\n\n## Step 1: Import Ballerina Salesforce module\n\nFirst, import the `ballerinax/sfdc` module into the Ballerina project.\n\n```ballerina\nimport ballerinax/sfdc;\n```\n\nInstantiate the connector by giving authentication details in the HTTP client config, which has built-in support for OAuth 2.0 to authenticate and authorize requests. The Salesforce connector can be instantiated in the HTTP client config using the access token or using the client ID, client secret, and refresh token.\n\n\n## Step 2: Obtain Tokens for authentication\n\n1. Visit [Salesforce](https://www.salesforce.com/) and create a Salesforce Account.\n2. Create a connected app and obtain the following credentials:\n    *   Base URL (Endpoint)\n    *   Access Token\n    *   Client ID\n    *   Client Secret\n    *   Refresh Token\n    *   Refresh Token URL\n3. When you are setting up the connected app, select the following scopes under Selected OAuth Scopes:\n    *   Access and manage your data (api)\n    *   Perform requests on your behalf at any time (refresh_token, offline_access)\n    *   Provide access to your data via the Web (web)\n4. Provide the client ID and client secret to obtain the refresh token and access token. For more information on obtaining OAuth2 credentials, go to [Salesforce documentation](https://help.salesforce.com/articleView?id=remoteaccess_authenticate_overview.htm).\n\n\n## Step 3: Create the Salesforce client\n\nThe Ballerina Salesforce connector has allowed users to create the client using the [direct token configuration](https://ballerina.io/learn/by-example/secured-client-with-oauth2-direct-token-type.html) and as well as [bearer token configuration](https://ballerina.io/learn/by-example/secured-client-with-bearer-token-auth.html). \n\nUsers are recommended to use direct-token config when initializing the Salesforce client for continuous access by providing the Salesfoce account's domain URL as the `baseURL` and the `client id`, `client secret`, `refresh token` obtained in the step two and `https://login.salesforce.com/services/oauth2/token` as `refreshUrl` in general scenarios. \n\n```ballerina\n// Create Salesforce client configuration by reading from config file.\n\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     clientId: <\"CLIENT_ID\">,\n     clientSecret: <\"CLIENT_SECRET\">,\n     refreshToken: <\"REFRESH_TOKEN\">,\n     refreshUrl: <\"REFRESH_URL\"> \n   }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\nIf the user already owns a valid access token he can initialize the client using bearer-token configuration providing the access token as a bearer token for quick API calls. \n\n```ballerina\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     token: <\"ACCESS_TOKEN\">\n   }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\nThis access token will expire in 7200 seconds in general scenarios and the expiration time of the access token can be different from organization to organization. In such cases users have to get the new access token and update the configuration. \n\nIf you want to add your own key store to define the `secureSocketConfig`, change the Salesforce configuration as mentioned below.\n\n\n```ballerina\n// Create Salesforce client configuration by reading from config file.\n\nsfdc:SalesforceConfiguration sfConfig = {\n   baseUrl: <\"EP_URL\">,\n   clientConfig: {\n     clientId: <\"CLIENT_ID\">,\n     clientSecret: <\"CLIENT_SECRET\">,\n     refreshToken: <\"REFRESH_TOKEN\">,\n     refreshUrl: <\"REFRESH_URL\"> \n   },\n   secureSocketConfig: {\n     trustStore: {\n       path: <\"TRUSTSTORE_PATH\"\">,\n       password: <\"TRUSTSTORE_PASSWORD\">\n      }\n    }\n};\n\nsfdc:Client baseClient = new (sfConfig);\n```\n\n\n## Step 4: Implement Operations\n\n\n### SObject Operations\n\nAs described earlier Ballerina Salesforce connector facilitates users to perform CRUD operations on SObject through remote method invocations. \n\n\n#### Create Record\n\nThe `createRecord` remote function of the baseclient can be used to create SObject records for a given SObject type. Users need to pass SObject name and the SObject record in json format to the `createRecord` function and it will return newly created record Id as a string at the success and will return an error at the failure. \n\n\n```ballerina\njson accountRecord = {\n   Name: \"John Keells Holdings\",\n   BillingCity: \"Colombo 3\"\n };\n\nstring|sdfc:Error recordId = baseClient->createRecord(ACCOUNT, accountRecord);\n```\n\n#### Get Record\n\nThe `getRecord` remote function of the baseclient can be used to get SObject record by SObject Id. Users need to pass the path to the SObject including the SObject Id to the `getRecord` function and it will return the record in json at the success and will return an error at the failure. \n\n\n```ballerina\nstring testRecordId = \"001xa000003DIlo\";\nstring path = \"/services/data/v48.0/sobjects/Account/\" + testRecordId;\njson|Error response = baseClient->getRecord(path);\n```\n\n#### Update Record\n\nThe `updateRecord` remote function of the baseclient can be used to update SObject records for a given SObject type. Users need to pass SObject name, SObject Id and the SObject record in json format to the updateRecord’ function and it will return `true` at the success and will return an error at the failure. \n\n\n```ballerina\njson account = {\n       Name: \"WSO2 Inc\",\n       BillingCity: \"Jaffna\",\n       Phone: \"+94110000000\"\n   };\nboolean|sfdc:Error isSuccess = baseClient->updateRecord(ACCOUNT, testRecordId, account);\n```\n\n#### Delete Record\n\nThe Ballerina Salesforce connector facilitates users to delete SObject records by the SObject Id. Users need to pass SObject Name and the SObject record id as parameters and the function will return true at successful completion. \n\n\n```ballerina\nstring testRecordId = \"001xa000003DIlo\";\nboolean|sfdc:Error isDeleted = baseClient->deleteRecord(ACCOUNT, testRecordId);\n```\n\n### Convenient CRUD Operations for Common SObjects\n\nApart from the common CRUD operations that can be used with any SObject, the Ballerina Salesforce Connector provides customized CRUD operations for pre-identified, most commonly used SObjects. They are **Account**, **Lead**, **Contact**, **Opportunity** and **Product**. \n\nFollowing are the sample codes for Account’s CRUD operations and the other above mentioned SObjects follow the same implementation and only the Id should be changed according to the SObject type. \n\n\n#### Create Account\n\n`createAccount` remote function accepts an account record in json as an argument and returns Id of the account created at success. \n\n\n```ballerina\njson accountRecord = {\n   Name: \"John Keells Holdings\",\n   BillingCity: \"Colombo 3\"\n };\n\nstring|sdfc:Error accountId = baseClient->createAccount(accountRecord);\n```\n\n\n#### Get Account by Id\n\nUser needs to pass the Id of the account and the names of the fields needed parameters for the `getAccountById` remote function. Function will return the record in json format at success. \n\n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\n\njson|sfdc:Error account = baseClient->getAccountById(accountId, Name, BillingCity);\n```\n\n\n#### Update Account\n\n`updateAccount` remote function accepts account id and the account record needed to update in json as arguments and returns true at success. \n\n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\njson account = {\n       Name: \"WSO2 Inc\",\n       BillingCity: \"Jaffna\",\n       Phone: \"+94110000000\"\n   };\nboolean|sfdc:Error isSuccess = baseClient->updateRecord(accountId, account);\n```\n\n#### Delete Account\n\nUser needs to pass the Id of the account he needs to delete for the `deleteAccount` remote function. Function will return true at success. \n\n```ballerina\nstring accountId = \"001xa000003DIlo\";\nboolean|sfdc:Error isDeleted = baseClient->deleteAccount(accountId);\n```\n\n## Query Operations\n\nThe `getQueryResult` remote function executes a SOQL query that returns all the results in a single response or if it exceeds the maximum record limit, it returns part of the results and an identifier that can be used to retrieve the remaining results.\n\n\n```ballerina\nstring sampleQuery = \"SELECT name FROM Account\";\nSoqlResult|Error res = baseClient->getQueryResult(sampleQuery);\n```\n\n\nThe response from `getQueryResult` is either a `SoqlResult` record with total size, execution status, resulting records, and URL to get the next record set (if query execution was successful) or Error (if the query execution was unsuccessful).\n\n\n```ballerina\nif (response is sfdc:SoqlResult) {\n    io:println(\"TotalSize:  \", response.totalSize.toString());\n    io:println(\"Done:  \", response.done.toString());\n    io:println(\"Records: \", response.records.toString());\n} else {\n    io:println(\"Error: \", response.message());\n}\n```\n\nIf response has exceeded the maximum record limit, response will contain a key named ‘nextRecordsUrl’ and then the user can call `getNextQueryResult` remote function to get the next record set. \n\n\n```ballerina\nsfdc:SoqlResult|sfdc:Error resp = baseClient->getNextQueryResult(<@untainted>nextRecordsUrl);\n```\n\n## Search Operations\n\nThe `searchSOSLString` remote function allows users to search using a string and returns all the occurrences of the string back to the user. SOSL searches are faster and can return more relevant results.\n\n\n```\nstring searchString = \"FIND {WSO2 Inc}\";\nsfdc:SoslResult|Error res = baseClient->searchSOSLString(searchString);\n```\n## Operations to get SObject Metadata\n\nBallerina Salesforce Connector facilitates users to retrieve SObject related information and metadata through Salesforce REST API. Following are the remote functions available for retrieving SObject metadata. \n\n\n<table>\n  <tr>\n   <td><strong>Remote Function</strong>\n   </td>\n   <td><strong>Description</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>describeAvailableObjects\n   </td>\n   <td>Lists the available objects and their metadata for your organization and available to the logged-in user\n   </td>\n  </tr>\n  <tr>\n   <td>getSObjectBasicInfo\n   </td>\n   <td>Returns metadata of the specified SObject\n   </td>\n  </tr>\n  <tr>\n   <td>describeSObject\n   </td>\n   <td>Returns  metadata at all levels for the specified object including the fields, URLs, and child relationships\n   </td>\n  </tr>\n  <tr>\n   <td>sObjectPlatformAction\n   </td>\n   <td>Query for actions displayed in the UI, given a user, a context, device format, and a record ID\n   </td>\n  </tr>\n</table>\n\n\n## Operations to get Organizational Data\n\nApart from the main SObject related functions Ballerina Salesforce Connector facilitates users to get information about their organization. Following are the remote functions available for retrieving organizational data. \n\n\n<table>\n  <tr>\n   <td><strong>Remote Function</strong>\n   </td>\n   <td><strong>Description</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>getAvailableApiVersions\n   </td>\n   <td>Use the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_versions.htm\">Versions</a> resource to list summary information about each REST API version currently available, including the version, label, and a link to each version's root\n   </td>\n  </tr>\n  <tr>\n   <td>getResourcesByApiVersion\n   </td>\n   <td>Use the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_discoveryresource.htm\">Resources by Version</a> resource to list the resources available for the specified API version. This provides the name and URI of each additional resource. Users need to provide API Version as a parameter to the function. \n   </td>\n  </tr>\n  <tr>\n   <td>getOrganizationLimits\n   </td>\n   <td>Use the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm\">Limits resource</a> to list your org limits. \n   </td>\n  </tr>\n</table>\n\n\n\n## Bulk Operations \n\nUsing the `createJob` remote function of the base client, we can create any type of job and of the data type JSON, XML and CSV. `createJob` remote function has four parameters.\n\n\n1. Operation - INSERT, UPDATE, DELETE, UPSERT or QUERY\n2. SObject type - Account, Contact, Opportunity etc.\n3. Content Type - JSON, XML or CSV\n4. ExternalIdFieldName (optional) - Field name of the external ID incase of an Upsert operation\n\nStep by step implementation of an `insert` bulk operation has described below. Follow the same process for other operation types too. \n\n```ballerina\nerror|sfdc:BulkJob insertJob = baseClient->creatJob(\"insert\", \"Contact\", \"JSON\");\n```\n\nUsing the created job object, we can add a batch to it, get information about the batch and get all the batches of the job.\n\n\n```ballerina\n   json contacts = [\n        {\n            description: \"Created_from_Ballerina_Sf_Bulk_API\",\n            FirstName: \"Morne\",\n            LastName: \"Morkel\",\n            Title: \"Professor Grade 03\",\n            Phone: \"0442226670\",\n            Email: \"morne89@gmail.com\"\n        }\n    ];\n```\n\n```ballerina\n    //Add json content.\n    error|sfdc:BatchInfo batch = baseClient->addBatch(insertJob, contacts);\n```\n\n```ballerina\n    //Get batch info.\n    error|sfdc:BatchInfo batchInfo = baseClient->getBatchInfo(insertJob, batch.id);\n```\n\n```ballerina\n    //Get all batches.\n    error|sfdc:BatchInfo[] batchInfoList = baseClient->getAllBatches(insertJob);\n```\n\n```ballerina\n    //Get the batch request.\n    var batchRequest = baseClient->getBatchRequest(insertJob, batchId);\n```\n\n```ballerina\n    //Get the batch result.\n    error|sdfc:Result[] batchResult = baseClient->getBatchResult(insertJob, batchId);\n```\n\n\nThe `getJobInfo` remote function retrieves all details of an existing job.\n\n\n```ballerina\n   error|sfdc:JobInfo jobInfo = baseClient->getJobInfo(insertJob);\n```\n\n\nThe `closeJob` and the `abortJob` remote functions close and abort the bulk job respectively. When a job is closed, no more batches can be added. When a job is aborted, no more records are processed. If changes to data have already been committed, they aren’t rolled back.\n\n\n```ballerina\n  error|sfdc:JobInfo closedJob = baseClient->closeJob(insertJob);\n```\n\n\n## Event Listener\n\nThe Listener which can be used to capture events on PushTopics defined in a Salesforce instance is configured as below.\n\n\n```ballerina\nsfdc:ListenerConfiguration listenerConfig = {\n   username: config:getAsString(\"SF_USERNAME\"),\n   password: config:getAsString(\"SF_PASSWORD\")\n};\nlistener sfdc:Listener eventListener = new (listenerConfig);\n```\n\nIn the above configuration, the password should be the concatenation of the user's Salesforce password and his secret key.\n\nNow, a service has to be defined on the ‘eventListener’ like the following.\n\n\n```ballerina\n  @sfdc:ServiceConfig {\n      topic:\"/topic/QuoteUpdate\"\n  }\n  service quoteUpdate on eventListener {\n      resource function onEvent(json quoteUpdate) { \n          //convert JSON string to JSON     \n          io:StringReader sr = new(quoteUpdate.toJsonString());\n          json|error quote = sr.readJson();\n          if (quote is json) {\n              io:println(\"Quote Status : \", quote.sobject.Status);\n          }\n      }\n  }\n```\n\n\nThe above service is listening to the PushTopic `QuoteUpdate` defined in the Salesforce like the following.\n\n\n```ballerina\n   PushTopic pushTopic = new PushTopic();\n   pushTopic.Name = 'QuoteUpdate';\n   pushTopic.Query = 'SELECT Id, Name, AccountId, OpportunityId, Status,GrandTotal  FROM Quote';\n   pushTopic.ApiVersion = 48.0;\n   pushTopic.NotifyForOperationUpdate = true;\n   pushTopic.NotifyForFields = 'Referenced';\n   insert pushTopic;\n```\n# Samples\n\nPlease find the samples for above mentioned use cases through following links.\n\n## [Samples for Salesforce REST API use cases](samples/rest_api_usecases)  \n\nThese samples demonstrate the employment of Ballerina Salesforce Connector in Salesforce REST API related operations. The samples can be further divided as following\n* Samples that can be used with any SObject's CRUD operations\n* Samples for convenient access of Account, Contact, Product, Opportunity and Target SObjects's CRUD operations\n* Samples for SOSL and SOQL related operations\n* Samples for retrieving Organization and SObject metadata\n\n\n## [Samples for Salesforce Bulk API use cases](samples/bulk_api_usecases)\n\nThese samples demonstrate the employment of Ballerina Salesforce Connector in Salesforce BULK API related operations. Examples for bulk insert, bulk insert through files, bulk update, bulk upsert and bulk delete using json, csv or xml data sets are given here.\n\n## [Samples for Event Listener](samples/event_listener_usecases)\n\nThis sample demonstrates on capturing events using the Event Listener of Ballerina Salesforce Connector. As mentioned above to listen to a certin event users need to publish a pushtopic related to that event in his/her Salesforce instance. \n\n# References\n\nTrailhead Salesforce Documentation -\n\n[https://trailhead.salesforce.com/en/content/learn/modules/api_basics/api_basics_overview](https://trailhead.salesforce.com/en/content/learn/modules/api_basics/api_basics_overview)\n\nSalesforce REST API Documentation -\n\n[https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest)",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-sfdc",
      "keywords": [
        "sfdc",
        "salesforce"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620199287000,
      "modules": [],
      "pullCount": 52
    },
    {
      "organization": "ballerinax",
      "name": "mysql",
      "version": "0.7.0-alpha9",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/mysql/0.7.0-alpha9",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/mysql/0.7.0-alpha9/ballerinax-mysql-java11-0.7.0-alpha9.bala",
      "summary": "",
      "readme": "## Package overview\n\nThis Package provides the functionality required to access and manipulate data stored in a MySQL database.  \n\n**Prerequisite:** Add the MySQL driver JAR as a native library dependency in your Ballerina project. \nThis Package uses database properties from the MySQL version 8.0.13 onwards. Therefore, it is recommended to use a \nMySQL driver version greater than 8.0.13. Then, once you build the project by executing the `ballerina build`\ncommand, you should be able to run the resultant by executing the `ballerina run` command.\n\nE.g., The `Ballerina.toml` content.\nChange the path to the JDBC driver appropriately.\n\n```toml\n[package]\norg = \"sample\"\nname = \"mysql\"\nversion= \"0.1.0\"\n\n[[platform.java11.dependency]]\nartifactId = \"mysql-connector-java\"\nversion = \"8.0.17\"\npath = \"/path/to/mysql-connector-java-8.0.17.jar\"\ngroupId = \"mysql\"\n``` \n\n### Client\nTo access a database, you must first create a \n[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/#/mysql/clients/Client) object. \nThe examples for creating a MySQL client can be found below.\n\n#### Creating a client\nThis example shows different ways of creating the `mysql:Client`. \n\nThe client can be created with an empty constructor and hence, the client will be initialized with the default properties. \nThe first example with the `dbClient1` demonstrates this.\n\nThe `dbClient2` receives the host, username, and password. Since the properties are passed in the same order as it is defined \nin the `jdbc:Client`, you can pass it without named params.\n\nThe `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \nFurther [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/#/mysql/records/Options) \nis passed to configure the SSL and connection timeout in the MySQL client. \n\nSimilarly, the `dbClient4` uses the named params and it provides an unshared connection pool in the type of \n[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/#/sql/records/ConnectionPool) \nto be used within the client. \nFor more details about connection pooling, see the [SQL Package](https://ballerina.io/learn/api-docs/ballerina/#/sql).\n\n```ballerina\nmysql:Client|sql:Error dbClient1 = new ();\nmysql:Client|sql:Error dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n                              \"information_schema\", 3306);\n                              \nmysql:Options mysqlOptions = {\n  ssl: {\n    mode: mysql:SSL_PREFERRED\n  },\n  connectTimeout: 10\n};\nmysql:Client|sql:Error dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n                              options = mysqlOptions);\nmysql:Client|sql:Error dbClient4 = new (user = \"rootUser\", password = \"rootPass\",\n                              connectionPool = {maxOpenConnections: 5});\n```\nYou can find more details about each property in the\n[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/#/mysql/clients/Client) constructor. \n\nThe [mysql:Client](https://ballerina.io/learn/api-docs/ballerina/#/mysql/clients/Client) references \n[sql:Client](https://ballerina.io/learn/api-docs/ballerina/#/sql/abstractObjects/Client) and all the operations \ndefined by the `sql:Client` will be supported by the `mysql:Client` as well. \n\nFor more information on all the operations supported by the `mysql:Client`, which include the below, see the [SQL Package](https://ballerina.io/learn/api-docs/ballerina/#/sql).\n\n1. Connection Pooling\n2. Querying data\n3. Inserting data\n4. Updating data\n5. Deleting data\n6. Batch insert and update data\n7. Execute stored procedures\n8. Closing client",
      "template": false,
      "licenses": [],
      "authors": [],
      "sourceCodeLocation": "",
      "keywords": [],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1619198074000,
      "modules": [],
      "pullCount": 48
    },
    {
      "organization": "ballerinax",
      "name": "java.jdbc",
      "version": "0.6.0-alpha9",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/java.jdbc/0.6.0-alpha9",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/java.jdbc/0.6.0-alpha9/ballerinax-java.jdbc-java11-0.6.0-alpha9.bala",
      "summary": "",
      "readme": "## Package overview\n\nThis package provides the functionality required to access and manipulate data stored in any type of relational database \nthat is accessible via Java Database Connectivity (JDBC). \n\n**Prerequisite:** Add the JDBC driver corresponding to the database you are trying to interact with\nas a native library dependency in your Ballerina project. Then, once you build the project by executing the `ballerina build`\ncommand, you should be able to run the resultant by executing the `ballerina run` command.\n\nE.g., The `Ballerina.toml` content.\nChange the path to the JDBC driver appropriately.\n\n```toml\n[package]\norg = \"sample\"\nname = \"jdbc\"\nversion= \"0.1.0\"\n\n[[platform.java11.dependency]]\nartifactId = \"h2\"\nversion = \"1.4.200\"\npath = \"/path/to/com.h2database.h2-1.4.200.jar\"\ngroupId = \"com.h2database\"\n``` \n\n### Client\nTo access a database, you must first create a \n[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/#/java.jdbc/clients/Client) object. \nThe examples for creating a JDBC client can be found below.\n\n#### Creating a client\nThis example shows the different ways of creating the `jdbc:Client`. The client can be created by passing \nthe JDBC URL, which is a mandatory property and all other fields are optional. \n\nThe `dbClient1` receives only the database URL and the `dbClient2` receives the username and password in addition to the URL. \nIf the properties are passed in the same order as it is defined in the `jdbc:Client`, you can pass it \nwithout named params.\n\nThe `dbClient3` uses the named params to pass all the attributes and provides the `options` property in the type of \n[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/#/java.jdbc/records/Options) \nand also uses the unshared connection pool in the type of \n[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/#/sql/records/ConnectionPool). \nFor more information about connection pooling, see [SQL Package](https://ballerina.io/learn/api-docs/ballerina/#/sql).\n\nThe `dbClient4` receives some custom properties within the \n[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/#/java.jdbc/records/Options)\nand those properties will be used by the defined `datasourceName`. \nAs per the provided example, the `org.h2.jdbcx.JdbcDataSource` datasource  will be configured with a `loginTimeout` \nof `2000` milli seconds.\n\n```ballerina\njdbc:Client|sql:Error dbClient1 = new (\"jdbc:h2:~/path/to/database\");\njdbc:Client|sql:Error dbClient2 = new (\"jdbc:h2:~/path/to/database\", \n                            \"root\", \"root\");\njdbc:Client|sql:Error dbClient3 = new (url =  \"jdbc:h2:~/path/to/database\",\n                             user = \"root\", password = \"root\",\n                             options = {\n                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n                             },\n                             connectionPool = {\n                                 maxOpenConnections: 5\n                             });\njdbc:Client|sql:Error dbClient4 = new (url =  \"jdbc:h2:~/path/to/database\", \n                             user = \"root\", password = \"root\",\n                             options = {\n                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n                                properties: {\"loginTimeout\": \"2000\"}\n                             });                          \n```\n\nYou can find more details about each property in the\n[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/#/java.jdbc/clients/Client) constructor. \n\nThe [jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/#/java.jdbc/clients/Client) references \n[sql:Client](https://ballerina.io/learn/api-docs/ballerina/#/sql/abstractObjects/Client) and \nall the operations defined by the `sql:Client` will be supported by the `jdbc:Client` as well. \n\nFor more information on all the operations supported by the `jdbc:Client`, which include the below, see the\n[SQL Package]((https://ballerina.io/learn/api-docs/ballerina/#/sql)).\n\n1. Connection Pooling\n2. Querying data\n3. Inserting data\n4. Updating data\n5. Deleting data\n6. Batch insert and update data\n7. Execute stored procedures\n8. Closing client\n\nFor examples on the usage of the connector, see the following.\n* [Client Initialization Example](https://ballerina.io/learn/by-example/jdbc-init-options.html) \n* [Select Query Operations Example](https://ballerina.io/learn/by-example/jdbc-query-operation.html)\n* [Query with Complex Types Example](https://ballerina.io/learn/by-example/jdbc-complex-type-queries.html)\n* [DDL and DML Operations Example](https://ballerina.io/learn/by-example/jdbc-execute-operation.html)\n* [Batch Execute Operations Example](https://ballerina.io/learn/by-example/jdbc-batch-execute-operation.html)\n* [Parameterized Query Example](https://ballerina.io/learn/by-example/jdbc-parameterized-query.html)",
      "template": false,
      "licenses": [],
      "authors": [],
      "sourceCodeLocation": "",
      "keywords": [],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1619198065000,
      "modules": [],
      "pullCount": 42
    },
    {
      "organization": "ballerinax",
      "name": "mongodb",
      "version": "2.0.7",
      "platform": "java11",
      "languageSpecificationVersion": "v2020-12-17",
      "URL": "/ballerinax/mongodb/2.0.7",
      "balaVersion": "2.0.0",
      "balaURL": "https://fileserver.central.ballerina.io/2.0/ballerinax/mongodb/2.0.7/ballerinax-mongodb-java11-2.0.7.bala",
      "summary": "Connects to MongoDB from ballerina ",
      "readme": "# Ballerina MongoDB Connector\n\nConnects to MongoDB from ballerina \n\n## Module Overview\n\nThe Mongo DB connector allows you to connect to a Mongo DB from Ballerina and perform various operations such as `getDatabaseNames`, `getCollectionNames`, `count`, `listIndices`, `find`, `insert`, `update`, and `delete`.\n\n## Prerequisites\n\n* A mongodb with username and password\n\n* Java 11 Installed <br/> Java Development Kit (JDK) with version 11 is required.\n\n* Ballerina SLAlpha5 Installed <br/> Ballerina Swan Lake Alpha 5 is required.\n\n## Compatibility\n\n|                             |       Version               |\n|:---------------------------:|:---------------------------:|\n| Ballerina Language          | Swan Lake Alpha 5           |\n| Mongo DB                    | V4.2.0                      |\n\n\n## Quickstart(s)\n\n## Insert a document\n\n### Step 1: Import the Mongo DB module\nFirst, import the `ballerinax/mongodb` module into the Ballerina project.\n```ballerina\nimport ballerinax/mongodb;\n```\n### Step 2: Set up configurable values\nYou can add required variables as configurable values in the ballerina file and can add those values in `Config.toml` file. \n1. In Ballerina file \n```ballerina\nconfigurable string host = ?;\nconfigurable int port = ?;\nconfigurable string username = ?;\nconfigurable string password = ?;\nconfigurable string database = ?;\nconfigurable string collection = ?;\n```\n2. In Config.toml\n\n```\nhost = \"<YOUR_HOST_NAME>\"\"\nport = <PORT>\nusername = \"<DB_USERNAME>\"\npassword = \"<DB_PASSWORD>\"\n\ndatabase = \"<DATABASE_NAME>\"\ncollection = \"<COLLECTION_NAME>\"\n```\n\n### Step 3: Initialize the Mongodb Client giving necessary credentials\n\nYou can now enter the credentials in the mongo client config. If you use this client for a particular database then you can pass the database name along with config during client initialization(It is optional). Otherwise you can pass the database name for each remote method call. This is not recommended unless you need to connect more than one database using a client. You need to set the database using atleast one of these methods.\n```ballerina\nmongodb:ClientConfig mongoConfig = {\n        host: host,\n        port: port,\n        username: username,\n        password: password,\n        options: {sslEnabled: false, serverSelectionTimeout: 5000}\n    };\n\n    mongodb:Client mongoClient = checkpanic new (mongoConfig, database);\n```\n### Step 4: Insert the document\nYou can invoke the remote method `insert` to insert the document.\n```ballerina\nmap<json> doc = { \"name\": \"Gmail\", \"version\": \"0.99.1\", \"type\" : \"Service\" };\n\n    checkpanic  mongoClient->insert(doc, collection);\n```\n### Step 5: Close the db client connection. \n\n```ballerina\nmongoClient->close();\n```\n\n## Sample\n\nYou can find samples here : https://github.com/ballerina-platform/module-ballerinax-mongodb/blob/master/mongodb/samples/\n\n### All operations in a single sample\n\nFirst, import the `ballerinax/mongodb` module into the Ballerina project.\n\n```ballerina\nimport ballerina/log;\nimport ballerinax/mongodb;\n\npublic function main() {\n\n    mongodb:ClientConfig mongoConfig = {\n        host: \"localhost\",\n        port: 27017,\n        username: \"admin\",\n        password: \"admin\",\n        options: {sslEnabled: false, serverSelectionTimeout: 5000}\n    };\n\n    mongodb:Client mongoClient = checkpanic new (mongoConfig, \"Ballerina\");\n\n    map<json> doc1 = { \"name\": \"ballerina\", \"type\": \"src\" };\n    map<json> doc2 = { \"name\": \"connectors\", \"type\": \"artifacts\" };\n    map<json> doc3 = { \"name\": \"docerina\", \"type\": \"src\" };\n    map<json> doc4 = { \"name\": \"test\", \"type\": \"artifacts\" };\n\n    log:printInfo(\"------------------ Inserting Data -------------------\");\n    checkpanic mongoClient->insert(doc1,\"projects\");\n    checkpanic mongoClient->insert(doc2,\"projects\");\n    checkpanic mongoClient->insert(doc3,\"projects\");\n    checkpanic mongoClient->insert(doc4,\"projects\");\n  \n    log:printInfo(\"------------------ Counting Data -------------------\");\n    int count = checkpanic mongoClient->countDocuments(\"projects\",());\n    log:printInfo(\"Count of the documents '\" + count.toString() + \"'.\");\n\n\n    log:printInfo(\"------------------ Querying Data -------------------\");\n    map<json>[] jsonRet = checkpanic mongoClient->find(\"projects\",(),());\n    log:printInfo(\"Returned documents '\" + jsonRet.toString() + \"'.\");\n\n    map<json> queryString = {\"name\": \"connectors\" };\n    jsonRet = checkpanic mongoClient->find(\"projects\", (), queryString);\n    log:printInfo(\"Returned Filtered documents '\" + jsonRet.toString() + \"'.\");\n\n\n    log:printInfo(\"------------------ Updating Data -------------------\");\n    map<json> replaceFilter = { \"type\": \"artifacts\" };\n    map<json> replaceDoc = { \"name\": \"main\", \"type\": \"artifacts\" };\n\n    int response = checkpanic mongoClient->update(replaceDoc,\"projects\", (), replaceFilter, true);\n    if (response > 0 ) {\n        log:printInfo(\"Modified count: '\" + response.toString() + \"'.\") ;\n    } else {\n        log:printInfo(\"Error in replacing data\");\n    }\n\n   log:printInfo(\"------------------ Deleting Data -------------------\");\n   map<json> deleteFilter = { \"name\": \"ballerina\" };\n   int deleteRet = checkpanic mongoClient->delete(\"projects\", (), deleteFilter, true);\n   if (deleteRet > 0 ) {\n       log:printInfo(\"Delete count: '\" + deleteRet.toString() + \"'.\") ;\n   } else {\n       log:printInfo(\"Error in deleting data\");\n   }\n\n     mongoClient->close();\n}\n```",
      "template": false,
      "licenses": [
        "Apache-2.0"
      ],
      "authors": [
        "Ballerina"
      ],
      "sourceCodeLocation": "https://github.com/ballerina-platform/module-ballerinax-mongodb",
      "keywords": [
        "MongoDB",
        "NoSQL"
      ],
      "ballerinaVersion": "slalpha5",
      "createdDate": 1620191987000,
      "modules": [],
      "pullCount": 38
    }
  ],
  "count": 34,
  "offset": 0,
  "limit": 15
}
